;
; File generated by cc65 v 2.17 - Git c37582b
;
	.fopt		compiler,"cc65 v 2.17 - Git c37582b"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.importzp	_ATTRIB_READ
	.importzp	_SCROLL_WRITE
	.importzp	_ATTRIB_WRITE
	.import		_pal_bg
	.import		_pal_spr
	.import		_pal_col
	.import		_pal_bright
	.import		_ppu_wait_nmi
	.import		_ppu_off
	.import		_ppu_on_all
	.import		_ppu_system
	.import		_oam_spr
	.import		_oam_meta_spr
	.import		_oam_hide_rest
	.import		_music_play
	.import		_music_stop
	.import		_sfx_play
	.import		_pad_poll
	.import		_scroll
	.import		_bank_spr
	.import		_bank_bg
	.import		_rand8
	.import		_set_vram_update
	.import		_vram_adr
	.import		_vram_put
	.import		_vram_fill
	.import		_vram_unrle
	.import		_memcpy
	.import		_memfill
	.import		_set_scroll_write
	.import		_bankswitch
	.export		_map_0
	.export		_enems_strip_0
	.export		_map_1
	.export		_enems_strip_1
	.export		_map_2
	.export		_enems_strip_2
	.export		_map_3
	.export		_enems_strip_3
	.export		_map_4
	.export		_enems_strip_4
	.export		_map_5
	.export		_enems_strip_5
	.export		_map_6
	.export		_enems_strip_6
	.export		_map_8
	.export		_enems_strip_8
	.export		_map_9
	.export		_enems_strip_9
	.export		_palcuts0
	.export		_palcuts1
	.export		_palss0
	.export		_paltitle
	.export		_palts0
	.export		_palts1
	.export		_palts2
	.export		_palts3
	.export		_palts4
	.export		_palts5
	.export		_palts6
	.export		_palts7
	.export		_palts8
	.export		_palts9
	.export		_ts0_tmaps_0
	.export		_ts0_tmaps_1
	.export		_ts0_tmaps_2
	.export		_ts0_tmaps_3
	.export		_ts0_pals_0
	.export		_ts0_pals_1
	.export		_ts0_pals_2
	.export		_ts0_pals_3
	.export		_ts1_tmaps_0
	.export		_ts1_tmaps_1
	.export		_ts1_tmaps_2
	.export		_ts1_tmaps_3
	.export		_ts1_pals_0
	.export		_ts1_pals_1
	.export		_ts1_pals_2
	.export		_ts1_pals_3
	.export		_ts3_tmaps_0
	.export		_ts3_tmaps_1
	.export		_ts3_tmaps_2
	.export		_ts3_tmaps_3
	.export		_ts3_pals_0
	.export		_ts3_pals_1
	.export		_ts3_pals_2
	.export		_ts3_pals_3
	.export		_ts4_tmaps_0
	.export		_ts4_tmaps_1
	.export		_ts4_tmaps_2
	.export		_ts4_tmaps_3
	.export		_ts4_pals_0
	.export		_ts4_pals_1
	.export		_ts4_pals_2
	.export		_ts4_pals_3
	.export		_ts6_tmaps_0
	.export		_ts6_tmaps_1
	.export		_ts6_tmaps_2
	.export		_ts6_tmaps_3
	.export		_ts6_pals_0
	.export		_ts6_pals_1
	.export		_ts6_pals_2
	.export		_ts6_pals_3
	.export		_ts7_tmaps_0
	.export		_ts7_tmaps_1
	.export		_ts7_tmaps_2
	.export		_ts7_tmaps_3
	.export		_ts7_pals_0
	.export		_ts7_pals_1
	.export		_ts7_pals_2
	.export		_ts7_pals_3
	.export		_ts8_tmaps_0
	.export		_ts8_tmaps_1
	.export		_ts8_tmaps_2
	.export		_ts8_tmaps_3
	.export		_ts8_pals_0
	.export		_ts8_pals_1
	.export		_ts8_pals_2
	.export		_ts8_pals_3
	.export		_ts9_tmaps_0
	.export		_ts9_tmaps_1
	.export		_ts9_tmaps_2
	.export		_ts9_tmaps_3
	.export		_ts9_pals_0
	.export		_ts9_pals_1
	.export		_ts9_pals_2
	.export		_ts9_pals_3
	.export		_sspl_00_a
	.export		_sspl_00_b
	.export		_sspl_01_a
	.export		_sspl_01_b
	.export		_sspl_02_a
	.export		_sspl_02_b
	.export		_sspl_03_a
	.export		_sspl_03_b
	.export		_sspl_04_a
	.export		_sspl_04_b
	.export		_sspl_05_a
	.export		_sspl_05_b
	.export		_sspl_06_a
	.export		_sspl_06_b
	.export		_sspl_07_a
	.export		_sspl_07_b
	.export		_ssena_00_a
	.export		_ssena_00_b
	.export		_ssena_01_a
	.export		_ssena_01_b
	.export		_ssenb_00_a
	.export		_ssenb_00_b
	.export		_ssenb_01_a
	.export		_ssenb_01_b
	.export		_ssenc
	.export		_ssend_00_a
	.export		_ssend_00_b
	.export		_ssend_01_a
	.export		_ssend_01_b
	.export		_ssend_02_a
	.export		_ssend_02_b
	.export		_ssene
	.export		_ssenf_00_a
	.export		_ssenf_00_b
	.export		_ssenf_01_a
	.export		_ssenf_01_b
	.export		_ssenf_02_a
	.export		_ssenf_02_b
	.export		_ssenf_03_a
	.export		_ssenf_03_b
	.export		_ssenf_04_a
	.export		_ssenf_04_b
	.export		_ssana_a
	.export		_ssana_b
	.export		_ssexpl
	.export		_sspointsa_00
	.export		_sspointsa_01
	.export		_sspointsa_02
	.export		_sspointsa_03
	.export		_sspointsa_04
	.export		_sspointsb_00
	.export		_sspointsb_01
	.export		_sspointsb_02
	.export		_spr_player0
	.export		_spr_player1
	.export		_spr_player
	.export		_spr_enems0
	.export		_spr_enems1
	.export		_spr_base0
	.export		_spr_points
	.export		_spr_hud
	.export		_attrs_adds
	.export		_attr_buff_adds
	.export		_wp_addr_lo
	.export		_wp_addr_hi
	.export		_shr2
	.export		_enems_lut_falling
	.export		_enems_lut_acceleration
	.export		_drop_fixed_times
	.export		_pow2
	.export		_pc_scores_a
	.export		_pc_scores_b
	.export		_sfx_item
	.export		_bg_anim
	.export		_score_offsets
	.export		_behs0
	.export		_behs1
	.export		_behs3
	.export		_behs4
	.export		_behs6
	.export		_behs7
	.export		_level_map
	.export		_level_ts_tmaps_0
	.export		_level_ts_tmaps_1
	.export		_level_ts_tmaps_2
	.export		_level_ts_tmaps_3
	.export		_level_ts_pals_0
	.export		_level_ts_pals_1
	.export		_level_ts_pals_2
	.export		_level_ts_pals_3
	.export		_level_pal_bg
	.export		_level_behs
	.export		_level_strips
	.export		_level_spr_enems
	.export		_level_killable_enems
	.export		_level_spr_base
	.export		_level_names
	.export		_title_png_rle
	.export		_cuts0_png_rle
	.export		_cuts1_png_rle
	.export		_spr_enems
	.export		_c_ts_tmaps_0
	.export		_c_ts_tmaps_1
	.export		_c_ts_tmaps_2
	.export		_c_ts_tmaps_3
	.export		_c_ts_pals_0
	.export		_c_ts_pals_1
	.export		_c_ts_pals_2
	.export		_c_ts_pals_3
	.export		_c_level_killable_enems
	.export		_c_spr_base
	.export		_map_ptr
	.export		_gp_gen
	.export		_map_tilepos
	.export		_behs
	.export		_ul
	.export		_gp_addr
	.export		_oam_index
	.export		_gpit
	.export		_gpjt
	.export		_rda
	.export		_rdb
	.export		_rdc
	.export		_rdd
	.export		_rdt
	.export		_rds
	.export		_rds16
	.export		_rdu16
	.export		_rdx
	.export		_rdy
	.export		_gpiit
	.export		_gpijt
	.export		_uin
	.export		_cam_pos
	.export		_cam_pos_lsb
	.export		_cam_pos_bit_4
	.export		_cam_pos_bit_3
	.export		_scroll_state
	.export		_scroll_y
	.export		_o_scroll_y
	.export		_wtp
	.export		_wtpr
	.export		_rle_buffer_ptr
	.export		_rle_buffer_i
	.export		_rle_ctr
	.export		_rle_value
	.export		_attr_buffer_i
	.export		_gppi
	.export		_gpri
	.export		_gpq
	.export		_gbuffer_y
	.export		_pad
	.export		_py
	.export		_px
	.export		_pvx
	.export		_pvy
	.export		_prx
	.export		_pry
	.export		_psprid
	.export		_pfacing
	.export		_pkill
	.export		_ppunching
	.export		_ptgmx
	.export		_plives
	.export		_plife
	.export		_pst
	.export		_pct
	.export		_gpint
	.export		_pj
	.export		_pctj
	.export		_ppossee
	.export		_pgotten
	.export		_pindex
	.export		_score_offset
	.export		_pcharacter
	.export		_psinking
	.export		_cx1
	.export		_cy1
	.export		_cx2
	.export		_cy2
	.export		_at1
	.export		_at2
	.export		_caux
	.export		__d1
	.export		__d2
	.export		_strip_pointer
	.export		_enit
	.export		_enjt
	.export		_enx
	.export		_eny
	.export		_encx
	.export		_envx
	.export		_envy
	.export		__enct
	.export		__enx
	.export		__enx1
	.export		__enx2
	.export		__enmx
	.export		__enmy
	.export		__eny
	.export		_ensloti
	.export		_enslots
	.export		_bit
	.export		_bpy
	.export		_bsloti
	.export		_bslots
	.export		__bx
	.export		__by
	.export		__puas_x
	.export		__puas_mx
	.export		__puas_y
	.export		_ntsc
	.export		_ticks
	.export		_halfticks
	.export		_level
	.export		_game_time
	.export		_ticker
	.export		_tick
	.export		_display
	.export		_flash
	.export		_free_frame
	.export		_fskipct
	.export		_scroll_speed
	.export		_goal_time
	.export		_sadv
	.export		_pad0
	.export		_pad1
	.export		_prevpad
	.export		_pad_once
	.export		_pad_doce
	.export		_half_life
	.export		_frame_counter
	.export		_hl_proc
	.export		_game_mode
	.export		_collide_players
	.export		_respawn_players
	.export		_nt
	.export		_do_split
	.export		_pselected
	.export		_update_list
	.export		_fader
	.export		_is_scrolling
	.export		_autoscroll
	.export		_scroll_to
	.export		_bx
	.export		_by
	.export		_bvx
	.export		_bvy
	.export		_ba
	.export		_pflickers
	.export		_p_pressingA
	.export		_p_pressingB
	.export		_pdpadaccelerates
	.export		_pndpaddeccelerates
	.export		_pcontinues
	.export		_eny1
	.export		_enx1
	.export		_enx2
	.export		_enct
	.export		_enmx
	.export		_enmy
	.export		_ena
	.export		_ent
	.export		_enl
	.export		_enhitbg
	.export		_entypekillable
	.export		_enstart
	.export		_bcd_score
	.export		_bcd_high_score
	.export		_points_x
	.export		_points_y
	.export		_points_id
	.export		_points_fc
	.export		_points_slots_index
	.export		_puas_x
	.export		_puas_y
	.export		_puas_mx
	.export		_puas_st
	.export		_puas_who
	.export		__PLAYER_AX
	.export		__PLAYER_RX
	.export		_pslips
	.export		_pal_cycle_do
	.export		_pal_cycle
	.export		_signal10000
	.export		_signal_continue
	.export		_round
	.export		_level_selected
	.export		_winner
	.export		_pscore
	.export		_apvx
	.export		_apvy
	.export		_aprx
	.export		_apfacing
	.export		_apkill
	.export		_aptgmx
	.export		_aplives
	.export		_aplife
	.export		_apst
	.export		_apct
	.export		_apsinking
	.export		_ap_pressingA
	.export		_ap_pressingB
	.export		_apj
	.export		_apctj
	.export		_appossee
	.export		_apgotten
	.export		_apon
	.export		_apcharacter
	.export		_apy
	.export		_apcy
	.export		_apx
	.export		_apcx
	.export		_apry
	.export		_bcd_score_init
	.export		_bcd_high_score_init
	.export		_bcd_score_add_5_2
	.export		_bcd_high_score_update
	.export		_bcd_compare_scores
	.export		_bcd_print
	.export		_bcd_print_ul
	.export		_get_pad_once
	.export		_custom_split
	.export		_fade_out
	.export		_fade_in
	.export		_cls
	.export		__upd2h
	.export		_p_t2
	.export		_p_t2_d
	.export		_p_t1
	.export		_p_s
	.export		_ascii_to_ul
	.export		_put_tile_ul
	.export		_scroll_init
	.export		_scroll_get_byte
	.export		_scroll_writers_realloc
	.export		_scroll_advance
	.export		_scroll_paint
	.export		_cm_two_points
	.export		_hud_paint
	.export		_hud_paint_lives
	.export		_hud_update_life
	.export		_hud_update_score
	.export		_puas_init
	.export		_puas_create
	.export		_puas_do
	.export		_points_init
	.export		_points_create
	.export		_points_do
	.export		_player_init
	.export		_players_init
	.export		_player_find_safe_spot
	.export		_player_hit
	.export		_player_respawn
	.export		_player_move
	.export		_players_move
	.export		_player_gotten
	.export		_enems_init
	.export		_enems_spawn
	.export		_enems_destroy
	.export		_enems_kill
	.export		_enems_do
	.export		_enter_screen
	.export		_exit_cleanly
	.export		_wait_time_or_input
	.export		_do_screen
	.export		_screen_print_stats
	.export		_screen_logo
	.export		_screen_title
	.export		_screen_select
	.export		_screen_select_level
	.export		_screen_game_over
	.export		_screen_ending
	.export		_screen_score
	.export		_screen_round_results
	.export		_screen_game_result
	.export		_game_init
	.export		_game_loop
	.export		_game_select_option
	.export		_game_title
	.export		_game_select
	.export		_game_over
	.export		_game_ending
	.export		_game_round_results
	.export		_game_game_result
	.export		_game_select_level
	.export		_main

.segment	"DATA"

.segment	"ZEROPAGE"
.segment	"BSS"

.segment	"RODATA"

_map_0:
	.byte	$ED
	.byte	$ED
	.byte	$55
	.byte	$34
	.byte	$12
	.byte	$14
	.byte	$E3
	.byte	$03
	.byte	$55
	.byte	$34
	.byte	$13
	.byte	$10
	.byte	$E0
	.byte	$60
	.byte	$14
	.byte	$10
	.byte	$11
	.byte	$C0
	.byte	$08
	.byte	$20
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$11
	.byte	$E0
	.byte	$E0
	.byte	$40
	.byte	$01
	.byte	$02
	.byte	$80
	.byte	$01
	.byte	$02
	.byte	$20
	.byte	$EC
	.byte	$6C
	.byte	$60
	.byte	$E4
	.byte	$64
	.byte	$E0
	.byte	$E0
	.byte	$20
	.byte	$8D
	.byte	$A0
	.byte	$8D
	.byte	$18
	.byte	$1A
	.byte	$18
	.byte	$1A
	.byte	$18
	.byte	$40
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$18
	.byte	$1A
	.byte	$18
	.byte	$1A
	.byte	$18
	.byte	$20
	.byte	$01
	.byte	$02
	.byte	$E0
	.byte	$60
	.byte	$8D
	.byte	$A0
	.byte	$8D
	.byte	$18
	.byte	$19
	.byte	$18
	.byte	$19
	.byte	$18
	.byte	$60
	.byte	$01
	.byte	$02
	.byte	$18
	.byte	$19
	.byte	$18
	.byte	$19
	.byte	$18
	.byte	$80
	.byte	$01
	.byte	$02
	.byte	$E0
	.byte	$00
	.byte	$8D
	.byte	$A0
	.byte	$8D
	.byte	$19
	.byte	$1A
	.byte	$19
	.byte	$1A
	.byte	$19
	.byte	$A0
	.byte	$19
	.byte	$1A
	.byte	$19
	.byte	$1A
	.byte	$19
	.byte	$E0
	.byte	$E0
	.byte	$80
	.byte	$AD
	.byte	$A0
	.byte	$01
	.byte	$02
	.byte	$20
	.byte	$18
	.byte	$1F
	.byte	$38
	.byte	$1F
	.byte	$18
	.byte	$20
	.byte	$01
	.byte	$02
	.byte	$E0
	.byte	$E0
	.byte	$00
	.byte	$8D
	.byte	$A0
	.byte	$8D
	.byte	$98
	.byte	$20
	.byte	$01
	.byte	$02
	.byte	$20
	.byte	$98
	.byte	$E0
	.byte	$E0
	.byte	$80
	.byte	$AD
	.byte	$E0
	.byte	$20
	.byte	$18
	.byte	$19
	.byte	$3A
	.byte	$19
	.byte	$18
	.byte	$60
	.byte	$01
	.byte	$E0
	.byte	$E0
	.byte	$40
	.byte	$08
	.byte	$E0
	.byte	$08
	.byte	$A0
	.byte	$1B
	.byte	$80
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$1B
	.byte	$E0
	.byte	$E0
	.byte	$60
	.byte	$08
	.byte	$60
	.byte	$01
	.byte	$02
	.byte	$A0
	.byte	$08
	.byte	$20
	.byte	$1C
	.byte	$E0
	.byte	$60
	.byte	$1C
	.byte	$E0
	.byte	$E0
	.byte	$00
	.byte	$ED
	.byte	$ED
	.byte	$18
	.byte	$19
	.byte	$18
	.byte	$1A
	.byte	$18
	.byte	$1B
	.byte	$18
	.byte	$39
	.byte	$18
	.byte	$1B
	.byte	$18
	.byte	$1A
	.byte	$18
	.byte	$19
	.byte	$18
	.byte	$E0
	.byte	$E0
	.byte	$20
	.byte	$08
	.byte	$A0
	.byte	$01
	.byte	$02
	.byte	$20
	.byte	$08
	.byte	$60
	.byte	$19
	.byte	$20
	.byte	$01
	.byte	$02
	.byte	$A0
	.byte	$19
	.byte	$E0
	.byte	$E0
	.byte	$80
	.byte	$EC
	.byte	$2C
	.byte	$A0
	.byte	$E4
	.byte	$24
	.byte	$E0
	.byte	$E0
	.byte	$40
	.byte	$4D
	.byte	$60
	.byte	$2D
	.byte	$60
	.byte	$4D
	.byte	$1A
	.byte	$19
	.byte	$18
	.byte	$60
	.byte	$38
	.byte	$60
	.byte	$18
	.byte	$19
	.byte	$1A
	.byte	$60
	.byte	$2D
	.byte	$60
	.byte	$2D
	.byte	$80
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$38
	.byte	$60
	.byte	$38
	.byte	$E0
	.byte	$40
	.byte	$2D
	.byte	$60
	.byte	$01
	.byte	$02
	.byte	$E0
	.byte	$38
	.byte	$C0
	.byte	$6D
	.byte	$E0
	.byte	$6D
	.byte	$1A
	.byte	$18
	.byte	$19
	.byte	$18
	.byte	$E0
	.byte	$18
	.byte	$19
	.byte	$18
	.byte	$1A
	.byte	$E0
	.byte	$E0
	.byte	$40
	.byte	$01
	.byte	$02
	.byte	$20
	.byte	$2D
	.byte	$20
	.byte	$01
	.byte	$02
	.byte	$E0
	.byte	$20
	.byte	$38
	.byte	$E0
	.byte	$40
	.byte	$2D
	.byte	$60
	.byte	$2D
	.byte	$E0
	.byte	$19
	.byte	$1A
	.byte	$60
	.byte	$1A
	.byte	$19
	.byte	$E0
	.byte	$40
	.byte	$2D
	.byte	$E0
	.byte	$01
	.byte	$02
	.byte	$60
	.byte	$38
	.byte	$80
	.byte	$01
	.byte	$02
	.byte	$40
	.byte	$2D
	.byte	$A0
	.byte	$2D
	.byte	$A0
	.byte	$19
	.byte	$18
	.byte	$A0
	.byte	$18
	.byte	$19
	.byte	$40
	.byte	$2D
	.byte	$E0
	.byte	$60
	.byte	$2D
	.byte	$1E
	.byte	$1D
	.byte	$80
	.byte	$2D
	.byte	$80
	.byte	$1D
	.byte	$1E
	.byte	$C0
	.byte	$38
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$C0
	.byte	$01
	.byte	$02
	.byte	$E0
	.byte	$40
	.byte	$EC
	.byte	$EC
	.byte	$E4
	.byte	$E4
	.byte	$E0
	.byte	$C0
	.byte	$01
	.byte	$20
	.byte	$0A
	.byte	$60
	.byte	$01
	.byte	$02
	.byte	$E0
	.byte	$00
	.byte	$18
	.byte	$E0
	.byte	$E0
	.byte	$20
	.byte	$0A
	.byte	$80
	.byte	$01
	.byte	$02
	.byte	$E0
	.byte	$19
	.byte	$E0
	.byte	$20
	.byte	$49
	.byte	$80
	.byte	$0A
	.byte	$60
	.byte	$49
	.byte	$1E
	.byte	$1C
	.byte	$1D
	.byte	$20
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$1A
	.byte	$60
	.byte	$1D
	.byte	$1C
	.byte	$1E
	.byte	$E0
	.byte	$40
	.byte	$0A
	.byte	$80
	.byte	$01
	.byte	$02
	.byte	$E0
	.byte	$18
	.byte	$E0
	.byte	$E0
	.byte	$C0
	.byte	$ED
	.byte	$2D
	.byte	$C0
	.byte	$23
	.byte	$00
	.byte	$3E
	.byte	$20
	.byte	$23
	.byte	$E0
	.byte	$E0
	.byte	$40
	.byte	$2D
	.byte	$E0
	.byte	$60
	.byte	$2D
	.byte	$1A
	.byte	$18
	.byte	$C0
	.byte	$01
	.byte	$02
	.byte	$40
	.byte	$18
	.byte	$1A
	.byte	$E0
	.byte	$E0
	.byte	$40
	.byte	$ED
	.byte	$2D
	.byte	$A0
	.byte	$18
	.byte	$19
	.byte	$18
	.byte	$19
	.byte	$18
	.byte	$19
	.byte	$18
	.byte	$19
	.byte	$18
	.byte	$19
	.byte	$20
	.byte	$01
	.byte	$02
	.byte	$E0
	.byte	$E0
	.byte	$00
	.byte	$08
	.byte	$E0
	.byte	$20
	.byte	$08
	.byte	$60
	.byte	$1A
	.byte	$E0
	.byte	$20
	.byte	$19
	.byte	$E0
	.byte	$01
	.byte	$02
	.byte	$E0
	.byte	$00
	.byte	$08
	.byte	$E0
	.byte	$60
	.byte	$08
	.byte	$20
	.byte	$18
	.byte	$E0
	.byte	$01
	.byte	$02
	.byte	$20
	.byte	$18
	.byte	$E0
	.byte	$E0
	.byte	$00
	.byte	$4D
	.byte	$E0
	.byte	$20
	.byte	$4D
	.byte	$19
	.byte	$18
	.byte	$1C
	.byte	$20
	.byte	$01
	.byte	$02
	.byte	$A0
	.byte	$19
	.byte	$18
	.byte	$1D
	.byte	$E0
	.byte	$E0
	.byte	$40
	.byte	$4D
	.byte	$60
	.byte	$4D
	.byte	$A0
	.byte	$1D
	.byte	$18
	.byte	$19
	.byte	$60
	.byte	$19
	.byte	$18
	.byte	$1E
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$00
	.byte	$6D
	.byte	$60
	.byte	$01
	.byte	$02
	.byte	$A0
	.byte	$1E
	.byte	$38
	.byte	$19
	.byte	$C0
	.byte	$01
	.byte	$02
	.byte	$E0
	.byte	$60
	.byte	$01
	.byte	$40
	.byte	$4D
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$4D
	.byte	$A0
	.byte	$18
	.byte	$19
	.byte	$18
	.byte	$60
	.byte	$18
	.byte	$19
	.byte	$18
	.byte	$E0
	.byte	$E0
	.byte	$40
	.byte	$4D
	.byte	$A0
	.byte	$01
	.byte	$02
	.byte	$20
	.byte	$4D
	.byte	$19
	.byte	$1A
	.byte	$19
	.byte	$E0
	.byte	$20
	.byte	$19
	.byte	$1A
	.byte	$19
	.byte	$60
	.byte	$01
	.byte	$02
	.byte	$E0
	.byte	$40
	.byte	$0A
	.byte	$E0
	.byte	$60
	.byte	$0A
	.byte	$20
	.byte	$18
	.byte	$E0
	.byte	$60
	.byte	$1D
	.byte	$E0
	.byte	$20
	.byte	$01
	.byte	$02
	.byte	$E0
	.byte	$0A
	.byte	$E0
	.byte	$0A
	.byte	$A0
	.byte	$18
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$80
	.byte	$1E
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$0A
	.byte	$60
	.byte	$0A
	.byte	$A0
	.byte	$01
	.byte	$02
	.byte	$20
	.byte	$1E
	.byte	$60
	.byte	$18
	.byte	$E0
	.byte	$E0
	.byte	$80
	.byte	$ED
	.byte	$ED
	.byte	$55
	.byte	$34
	.byte	$12
	.byte	$14
	.byte	$18
	.byte	$1F
	.byte	$1E
	.byte	$1F
	.byte	$1E
	.byte	$1D
	.byte	$1E
	.byte	$1F
	.byte	$18
	.byte	$55
	.byte	$34
	.byte	$13
	.byte	$10
	.byte	$E0
	.byte	$60
	.byte	$14
	.byte	$10
	.byte	$11
	.byte	$40
	.byte	$CD
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$11
	.byte	$80
	.byte	$1F
	.byte	$1B
	.byte	$1F
	.byte	$1E
	.byte	$1F
	.byte	$3B
	.byte	$E0
	.byte	$E0
	.byte	$80
	.byte	$01
	.byte	$02
	.byte	$60
	.byte	$8D
	.byte	$E0
	.byte	$40
	.byte	$1F
	.byte	$1B
	.byte	$1E
	.byte	$1B
	.byte	$1F
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$01
	.byte	$02
	.byte	$E0
	.byte	$01
	.byte	$02
	.byte	$E0
	.byte	$40
	.byte	$01
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$C0
	.byte	$01
	.byte	$02
	.byte	$60
	.byte	$01
	.byte	$02
	.byte	$00
_enems_strip_0:
	.byte	$74
	.byte	$72
	.byte	$01
	.byte	$71
	.byte	$92
	.byte	$11
	.byte	$6B
	.byte	$42
	.byte	$01
	.byte	$68
	.byte	$B2
	.byte	$11
	.byte	$62
	.byte	$02
	.byte	$02
	.byte	$5F
	.byte	$F2
	.byte	$12
	.byte	$59
	.byte	$82
	.byte	$12
	.byte	$4D
	.byte	$53
	.byte	$11
	.byte	$4D
	.byte	$A3
	.byte	$01
	.byte	$4C
	.byte	$93
	.byte	$01
	.byte	$4C
	.byte	$63
	.byte	$11
	.byte	$44
	.byte	$22
	.byte	$02
	.byte	$37
	.byte	$83
	.byte	$02
	.byte	$36
	.byte	$83
	.byte	$12
	.byte	$36
	.byte	$42
	.byte	$02
	.byte	$32
	.byte	$C2
	.byte	$12
	.byte	$2C
	.byte	$C2
	.byte	$12
	.byte	$29
	.byte	$32
	.byte	$02
	.byte	$23
	.byte	$82
	.byte	$11
	.byte	$1A
	.byte	$72
	.byte	$02
	.byte	$12
	.byte	$03
	.byte	$02
	.byte	$12
	.byte	$F3
	.byte	$12
	.byte	$11
	.byte	$13
	.byte	$02
	.byte	$11
	.byte	$E3
	.byte	$12
	.byte	$00
	.byte	$00
	.byte	$00
_map_1:
	.byte	$EE
	.byte	$EE
	.byte	$55
	.byte	$34
	.byte	$12
	.byte	$14
	.byte	$E6
	.byte	$06
	.byte	$15
	.byte	$0D
	.byte	$15
	.byte	$34
	.byte	$13
	.byte	$10
	.byte	$E0
	.byte	$20
	.byte	$18
	.byte	$00
	.byte	$14
	.byte	$10
	.byte	$11
	.byte	$C0
	.byte	$01
	.byte	$80
	.byte	$11
	.byte	$E0
	.byte	$80
	.byte	$0D
	.byte	$80
	.byte	$2D
	.byte	$80
	.byte	$0D
	.byte	$20
	.byte	$1A
	.byte	$00
	.byte	$01
	.byte	$40
	.byte	$1B
	.byte	$1A
	.byte	$80
	.byte	$18
	.byte	$E0
	.byte	$E0
	.byte	$20
	.byte	$0D
	.byte	$80
	.byte	$2D
	.byte	$20
	.byte	$01
	.byte	$20
	.byte	$0D
	.byte	$20
	.byte	$18
	.byte	$80
	.byte	$1B
	.byte	$18
	.byte	$80
	.byte	$1A
	.byte	$C0
	.byte	$01
	.byte	$E0
	.byte	$20
	.byte	$0D
	.byte	$80
	.byte	$2D
	.byte	$80
	.byte	$0D
	.byte	$20
	.byte	$18
	.byte	$80
	.byte	$1A
	.byte	$1B
	.byte	$40
	.byte	$01
	.byte	$00
	.byte	$1D
	.byte	$80
	.byte	$01
	.byte	$E0
	.byte	$40
	.byte	$EC
	.byte	$EC
	.byte	$18
	.byte	$19
	.byte	$18
	.byte	$1A
	.byte	$18
	.byte	$1B
	.byte	$18
	.byte	$3C
	.byte	$18
	.byte	$1B
	.byte	$18
	.byte	$1A
	.byte	$18
	.byte	$19
	.byte	$18
	.byte	$E0
	.byte	$E0
	.byte	$00
	.byte	$2E
	.byte	$E0
	.byte	$20
	.byte	$2E
	.byte	$20
	.byte	$19
	.byte	$18
	.byte	$60
	.byte	$01
	.byte	$80
	.byte	$18
	.byte	$19
	.byte	$E0
	.byte	$E0
	.byte	$01
	.byte	$80
	.byte	$2E
	.byte	$20
	.byte	$2E
	.byte	$C0
	.byte	$01
	.byte	$20
	.byte	$18
	.byte	$1A
	.byte	$20
	.byte	$1A
	.byte	$1C
	.byte	$E0
	.byte	$E0
	.byte	$A0
	.byte	$2E
	.byte	$E0
	.byte	$20
	.byte	$2E
	.byte	$20
	.byte	$1A
	.byte	$1B
	.byte	$60
	.byte	$01
	.byte	$80
	.byte	$1B
	.byte	$1A
	.byte	$E0
	.byte	$E0
	.byte	$A0
	.byte	$2E
	.byte	$20
	.byte	$2E
	.byte	$E0
	.byte	$20
	.byte	$1C
	.byte	$19
	.byte	$20
	.byte	$19
	.byte	$1D
	.byte	$20
	.byte	$01
	.byte	$E0
	.byte	$E0
	.byte	$40
	.byte	$01
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$A0
	.byte	$EF
	.byte	$EF
	.byte	$18
	.byte	$19
	.byte	$18
	.byte	$1A
	.byte	$1B
	.byte	$18
	.byte	$19
	.byte	$1A
	.byte	$1D
	.byte	$19
	.byte	$1C
	.byte	$1A
	.byte	$18
	.byte	$19
	.byte	$1A
	.byte	$18
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$A0
	.byte	$01
	.byte	$A0
	.byte	$01
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$20
	.byte	$4F
	.byte	$60
	.byte	$2F
	.byte	$60
	.byte	$4F
	.byte	$1E
	.byte	$1C
	.byte	$1A
	.byte	$60
	.byte	$39
	.byte	$60
	.byte	$1A
	.byte	$1C
	.byte	$1E
	.byte	$E0
	.byte	$E0
	.byte	$00
	.byte	$01
	.byte	$E0
	.byte	$01
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$20
	.byte	$01
	.byte	$E0
	.byte	$20
	.byte	$2F
	.byte	$80
	.byte	$2F
	.byte	$80
	.byte	$2F
	.byte	$1E
	.byte	$1D
	.byte	$80
	.byte	$39
	.byte	$80
	.byte	$1D
	.byte	$1E
	.byte	$E0
	.byte	$80
	.byte	$01
	.byte	$80
	.byte	$01
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$60
	.byte	$EC
	.byte	$EC
	.byte	$E4
	.byte	$E4
	.byte	$C0
	.byte	$01
	.byte	$A0
	.byte	$01
	.byte	$E0
	.byte	$E0
	.byte	$20
	.byte	$1E
	.byte	$E0
	.byte	$E0
	.byte	$40
	.byte	$01
	.byte	$E0
	.byte	$E0
	.byte	$60
	.byte	$01
	.byte	$E0
	.byte	$E0
	.byte	$40
	.byte	$1E
	.byte	$E0
	.byte	$E0
	.byte	$00
	.byte	$2E
	.byte	$60
	.byte	$6E
	.byte	$60
	.byte	$2E
	.byte	$19
	.byte	$1A
	.byte	$60
	.byte	$1C
	.byte	$19
	.byte	$1A
	.byte	$1B
	.byte	$60
	.byte	$1A
	.byte	$19
	.byte	$E0
	.byte	$60
	.byte	$01
	.byte	$80
	.byte	$6E
	.byte	$60
	.byte	$6E
	.byte	$60
	.byte	$18
	.byte	$1A
	.byte	$19
	.byte	$18
	.byte	$80
	.byte	$19
	.byte	$18
	.byte	$19
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$6E
	.byte	$40
	.byte	$01
	.byte	$80
	.byte	$01
	.byte	$20
	.byte	$1A
	.byte	$18
	.byte	$19
	.byte	$18
	.byte	$E0
	.byte	$E0
	.byte	$C0
	.byte	$01
	.byte	$20
	.byte	$2E
	.byte	$60
	.byte	$2E
	.byte	$20
	.byte	$01
	.byte	$80
	.byte	$18
	.byte	$1E
	.byte	$60
	.byte	$18
	.byte	$19
	.byte	$E0
	.byte	$E0
	.byte	$80
	.byte	$2E
	.byte	$E0
	.byte	$20
	.byte	$2E
	.byte	$20
	.byte	$18
	.byte	$19
	.byte	$60
	.byte	$01
	.byte	$40
	.byte	$01
	.byte	$00
	.byte	$1E
	.byte	$1A
	.byte	$E0
	.byte	$E0
	.byte	$60
	.byte	$0E
	.byte	$80
	.byte	$01
	.byte	$E0
	.byte	$00
	.byte	$19
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$00
	.byte	$01
	.byte	$A0
	.byte	$0E
	.byte	$E0
	.byte	$C0
	.byte	$1A
	.byte	$20
	.byte	$01
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$40
	.byte	$4E
	.byte	$60
	.byte	$4E
	.byte	$A0
	.byte	$1A
	.byte	$18
	.byte	$19
	.byte	$60
	.byte	$19
	.byte	$18
	.byte	$1A
	.byte	$E0
	.byte	$40
	.byte	$01
	.byte	$E0
	.byte	$E0
	.byte	$20
	.byte	$0E
	.byte	$E0
	.byte	$C0
	.byte	$1B
	.byte	$40
	.byte	$01
	.byte	$60
	.byte	$01
	.byte	$E0
	.byte	$E0
	.byte	$C0
	.byte	$0E
	.byte	$E0
	.byte	$C0
	.byte	$1C
	.byte	$C0
	.byte	$01
	.byte	$E0
	.byte	$E0
	.byte	$40
	.byte	$01
	.byte	$60
	.byte	$0E
	.byte	$40
	.byte	$01
	.byte	$E0
	.byte	$40
	.byte	$1D
	.byte	$E0
	.byte	$E0
	.byte	$A0
	.byte	$EE
	.byte	$E0
	.byte	$1A
	.byte	$1C
	.byte	$1A
	.byte	$1E
	.byte	$1D
	.byte	$1A
	.byte	$1C
	.byte	$1A
	.byte	$E0
	.byte	$E0
	.byte	$60
	.byte	$6E
	.byte	$E0
	.byte	$6E
	.byte	$19
	.byte	$18
	.byte	$19
	.byte	$18
	.byte	$60
	.byte	$01
	.byte	$40
	.byte	$1A
	.byte	$1B
	.byte	$1A
	.byte	$19
	.byte	$E0
	.byte	$E0
	.byte	$6E
	.byte	$E0
	.byte	$0E
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$18
	.byte	$19
	.byte	$18
	.byte	$19
	.byte	$40
	.byte	$01
	.byte	$60
	.byte	$1E
	.byte	$E0
	.byte	$E0
	.byte	$40
	.byte	$6E
	.byte	$E0
	.byte	$00
	.byte	$0E
	.byte	$20
	.byte	$19
	.byte	$18
	.byte	$19
	.byte	$18
	.byte	$E0
	.byte	$00
	.byte	$1D
	.byte	$E0
	.byte	$40
	.byte	$01
	.byte	$A0
	.byte	$6E
	.byte	$E0
	.byte	$20
	.byte	$0E
	.byte	$00
	.byte	$18
	.byte	$19
	.byte	$18
	.byte	$19
	.byte	$E0
	.byte	$20
	.byte	$1E
	.byte	$E0
	.byte	$80
	.byte	$01
	.byte	$40
	.byte	$6E
	.byte	$20
	.byte	$01
	.byte	$E0
	.byte	$0E
	.byte	$19
	.byte	$18
	.byte	$19
	.byte	$18
	.byte	$E0
	.byte	$40
	.byte	$1D
	.byte	$E0
	.byte	$E0
	.byte	$60
	.byte	$EE
	.byte	$E0
	.byte	$1A
	.byte	$19
	.byte	$18
	.byte	$3B
	.byte	$18
	.byte	$19
	.byte	$1A
	.byte	$80
	.byte	$2E
	.byte	$E0
	.byte	$20
	.byte	$2E
	.byte	$20
	.byte	$3E
	.byte	$E0
	.byte	$20
	.byte	$3E
	.byte	$00
	.byte	$EE
	.byte	$EE
	.byte	$55
	.byte	$34
	.byte	$12
	.byte	$14
	.byte	$E6
	.byte	$06
	.byte	$55
	.byte	$34
	.byte	$13
	.byte	$10
	.byte	$20
	.byte	$01
	.byte	$20
	.byte	$08
	.byte	$A0
	.byte	$14
	.byte	$10
	.byte	$11
	.byte	$E0
	.byte	$80
	.byte	$11
	.byte	$E0
	.byte	$80
	.byte	$01
	.byte	$40
	.byte	$AE
	.byte	$40
	.byte	$01
	.byte	$A0
	.byte	$1D
	.byte	$1E
	.byte	$26
	.byte	$1E
	.byte	$1D
	.byte	$E0
	.byte	$E0
	.byte	$A0
	.byte	$4E
	.byte	$E0
	.byte	$4E
	.byte	$20
	.byte	$1F
	.byte	$1E
	.byte	$1F
	.byte	$E0
	.byte	$1F
	.byte	$1E
	.byte	$1F
	.byte	$C0
	.byte	$01
	.byte	$E0
	.byte	$E0
	.byte	$40
	.byte	$01
	.byte	$E0
	.byte	$01
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$20
	.byte	$01
	.byte	$00
_enems_strip_1:
	.byte	$7A
	.byte	$C4
	.byte	$00
	.byte	$79
	.byte	$B4
	.byte	$00
	.byte	$75
	.byte	$44
	.byte	$00
	.byte	$72
	.byte	$C4
	.byte	$00
	.byte	$62
	.byte	$57
	.byte	$A5
	.byte	$5C
	.byte	$D7
	.byte	$2D
	.byte	$56
	.byte	$27
	.byte	$D2
	.byte	$50
	.byte	$D7
	.byte	$8D
	.byte	$4A
	.byte	$D7
	.byte	$7D
	.byte	$47
	.byte	$27
	.byte	$82
	.byte	$38
	.byte	$84
	.byte	$00
	.byte	$34
	.byte	$64
	.byte	$00
	.byte	$2A
	.byte	$84
	.byte	$00
	.byte	$27
	.byte	$64
	.byte	$00
	.byte	$1B
	.byte	$02
	.byte	$02
	.byte	$18
	.byte	$22
	.byte	$02
	.byte	$15
	.byte	$12
	.byte	$02
	.byte	$12
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
_map_2:
	.byte	$ED
	.byte	$ED
	.byte	$35
	.byte	$34
	.byte	$12
	.byte	$14
	.byte	$E3
	.byte	$23
	.byte	$35
	.byte	$34
	.byte	$13
	.byte	$10
	.byte	$E0
	.byte	$60
	.byte	$14
	.byte	$10
	.byte	$11
	.byte	$C0
	.byte	$6B
	.byte	$20
	.byte	$11
	.byte	$A0
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$18
	.byte	$19
	.byte	$18
	.byte	$1A
	.byte	$E0
	.byte	$E0
	.byte	$6B
	.byte	$40
	.byte	$2B
	.byte	$40
	.byte	$6B
	.byte	$18
	.byte	$19
	.byte	$18
	.byte	$60
	.byte	$1B
	.byte	$1C
	.byte	$40
	.byte	$1A
	.byte	$18
	.byte	$19
	.byte	$18
	.byte	$80
	.byte	$01
	.byte	$02
	.byte	$E0
	.byte	$00
	.byte	$6B
	.byte	$E0
	.byte	$60
	.byte	$1A
	.byte	$18
	.byte	$19
	.byte	$18
	.byte	$C0
	.byte	$01
	.byte	$02
	.byte	$E0
	.byte	$E0
	.byte	$40
	.byte	$6B
	.byte	$40
	.byte	$2B
	.byte	$40
	.byte	$6B
	.byte	$18
	.byte	$19
	.byte	$18
	.byte	$60
	.byte	$1C
	.byte	$1B
	.byte	$40
	.byte	$18
	.byte	$19
	.byte	$18
	.byte	$1A
	.byte	$E0
	.byte	$E0
	.byte	$40
	.byte	$EC
	.byte	$2C
	.byte	$A0
	.byte	$E4
	.byte	$24
	.byte	$40
	.byte	$01
	.byte	$02
	.byte	$E0
	.byte	$E0
	.byte	$00
	.byte	$0B
	.byte	$40
	.byte	$2B
	.byte	$40
	.byte	$0B
	.byte	$A0
	.byte	$1A
	.byte	$40
	.byte	$19
	.byte	$18
	.byte	$40
	.byte	$19
	.byte	$E0
	.byte	$E0
	.byte	$20
	.byte	$01
	.byte	$40
	.byte	$0B
	.byte	$40
	.byte	$2B
	.byte	$40
	.byte	$0B
	.byte	$A0
	.byte	$19
	.byte	$40
	.byte	$1E
	.byte	$19
	.byte	$40
	.byte	$1E
	.byte	$E0
	.byte	$E0
	.byte	$40
	.byte	$2B
	.byte	$20
	.byte	$01
	.byte	$02
	.byte	$E0
	.byte	$2B
	.byte	$18
	.byte	$1E
	.byte	$E0
	.byte	$01
	.byte	$02
	.byte	$20
	.byte	$18
	.byte	$1A
	.byte	$E0
	.byte	$E0
	.byte	$40
	.byte	$0B
	.byte	$40
	.byte	$2B
	.byte	$40
	.byte	$0B
	.byte	$A0
	.byte	$1A
	.byte	$40
	.byte	$19
	.byte	$18
	.byte	$40
	.byte	$19
	.byte	$60
	.byte	$01
	.byte	$02
	.byte	$E0
	.byte	$E0
	.byte	$0B
	.byte	$40
	.byte	$2B
	.byte	$40
	.byte	$0B
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$40
	.byte	$1E
	.byte	$40
	.byte	$18
	.byte	$19
	.byte	$40
	.byte	$1A
	.byte	$E0
	.byte	$E0
	.byte	$C0
	.byte	$4B
	.byte	$20
	.byte	$4B
	.byte	$E0
	.byte	$1C
	.byte	$19
	.byte	$18
	.byte	$20
	.byte	$18
	.byte	$19
	.byte	$1C
	.byte	$E0
	.byte	$E0
	.byte	$A0
	.byte	$01
	.byte	$02
	.byte	$40
	.byte	$2B
	.byte	$E0
	.byte	$A0
	.byte	$3D
	.byte	$E0
	.byte	$E0
	.byte	$80
	.byte	$01
	.byte	$02
	.byte	$60
	.byte	$4B
	.byte	$20
	.byte	$4B
	.byte	$E0
	.byte	$1D
	.byte	$19
	.byte	$18
	.byte	$20
	.byte	$18
	.byte	$19
	.byte	$1D
	.byte	$E0
	.byte	$E0
	.byte	$C0
	.byte	$08
	.byte	$E0
	.byte	$08
	.byte	$A0
	.byte	$1A
	.byte	$80
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$1D
	.byte	$E0
	.byte	$E0
	.byte	$80
	.byte	$08
	.byte	$E0
	.byte	$20
	.byte	$08
	.byte	$60
	.byte	$1D
	.byte	$20
	.byte	$01
	.byte	$02
	.byte	$A0
	.byte	$1A
	.byte	$E0
	.byte	$E0
	.byte	$80
	.byte	$EC
	.byte	$2C
	.byte	$A0
	.byte	$E4
	.byte	$24
	.byte	$E0
	.byte	$E0
	.byte	$A0
	.byte	$08
	.byte	$E0
	.byte	$08
	.byte	$A0
	.byte	$1D
	.byte	$40
	.byte	$01
	.byte	$02
	.byte	$40
	.byte	$1E
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$08
	.byte	$60
	.byte	$08
	.byte	$E0
	.byte	$20
	.byte	$1E
	.byte	$60
	.byte	$1D
	.byte	$E0
	.byte	$01
	.byte	$02
	.byte	$E0
	.byte	$E0
	.byte	$00
	.byte	$08
	.byte	$20
	.byte	$08
	.byte	$E0
	.byte	$60
	.byte	$1D
	.byte	$20
	.byte	$1F
	.byte	$60
	.byte	$01
	.byte	$02
	.byte	$E0
	.byte	$E0
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$60
	.byte	$2B
	.byte	$E0
	.byte	$A0
	.byte	$18
	.byte	$19
	.byte	$E0
	.byte	$20
	.byte	$2B
	.byte	$A0
	.byte	$2B
	.byte	$A0
	.byte	$19
	.byte	$18
	.byte	$A0
	.byte	$1A
	.byte	$18
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$00
	.byte	$6B
	.byte	$E0
	.byte	$60
	.byte	$1A
	.byte	$1B
	.byte	$1D
	.byte	$19
	.byte	$40
	.byte	$01
	.byte	$02
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$01
	.byte	$02
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$40
	.byte	$2B
	.byte	$60
	.byte	$2B
	.byte	$E0
	.byte	$1D
	.byte	$1E
	.byte	$60
	.byte	$1D
	.byte	$1B
	.byte	$E0
	.byte	$E0
	.byte	$A0
	.byte	$01
	.byte	$02
	.byte	$E0
	.byte	$E0
	.byte	$80
	.byte	$01
	.byte	$02
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$40
	.byte	$6B
	.byte	$E0
	.byte	$60
	.byte	$1B
	.byte	$1D
	.byte	$1B
	.byte	$1A
	.byte	$40
	.byte	$01
	.byte	$02
	.byte	$E0
	.byte	$E0
	.byte	$40
	.byte	$28
	.byte	$40
	.byte	$28
	.byte	$E0
	.byte	$00
	.byte	$19
	.byte	$1A
	.byte	$40
	.byte	$1E
	.byte	$1D
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$08
	.byte	$40
	.byte	$01
	.byte	$02
	.byte	$E0
	.byte	$20
	.byte	$1A
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$40
	.byte	$01
	.byte	$02
	.byte	$40
	.byte	$08
	.byte	$E0
	.byte	$C0
	.byte	$19
	.byte	$20
	.byte	$AC
	.byte	$E0
	.byte	$20
	.byte	$A4
	.byte	$E0
	.byte	$28
	.byte	$1F
	.byte	$A0
	.byte	$08
	.byte	$A0
	.byte	$18
	.byte	$08
	.byte	$1D
	.byte	$40
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$1B
	.byte	$C0
	.byte	$08
	.byte	$1E
	.byte	$E0
	.byte	$A0
	.byte	$08
	.byte	$1D
	.byte	$80
	.byte	$08
	.byte	$E0
	.byte	$18
	.byte	$20
	.byte	$01
	.byte	$02
	.byte	$20
	.byte	$18
	.byte	$60
	.byte	$01
	.byte	$02
	.byte	$E0
	.byte	$E0
	.byte	$80
	.byte	$2C
	.byte	$E0
	.byte	$A0
	.byte	$24
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$40
	.byte	$2B
	.byte	$60
	.byte	$2B
	.byte	$E0
	.byte	$18
	.byte	$1C
	.byte	$60
	.byte	$1C
	.byte	$1E
	.byte	$E0
	.byte	$E0
	.byte	$60
	.byte	$4B
	.byte	$E0
	.byte	$20
	.byte	$4B
	.byte	$1A
	.byte	$1D
	.byte	$19
	.byte	$80
	.byte	$01
	.byte	$02
	.byte	$40
	.byte	$1C
	.byte	$1E
	.byte	$1D
	.byte	$E0
	.byte	$E0
	.byte	$02
	.byte	$40
	.byte	$2B
	.byte	$60
	.byte	$2B
	.byte	$40
	.byte	$01
	.byte	$60
	.byte	$1C
	.byte	$1D
	.byte	$60
	.byte	$1E
	.byte	$1C
	.byte	$E0
	.byte	$E0
	.byte	$60
	.byte	$4B
	.byte	$20
	.byte	$01
	.byte	$02
	.byte	$A0
	.byte	$4B
	.byte	$1C
	.byte	$1E
	.byte	$E0
	.byte	$40
	.byte	$19
	.byte	$1B
	.byte	$1A
	.byte	$E0
	.byte	$01
	.byte	$02
	.byte	$E0
	.byte	$20
	.byte	$2B
	.byte	$60
	.byte	$2B
	.byte	$E0
	.byte	$1D
	.byte	$1E
	.byte	$60
	.byte	$1B
	.byte	$1D
	.byte	$A0
	.byte	$0B
	.byte	$E0
	.byte	$20
	.byte	$0B
	.byte	$60
	.byte	$1E
	.byte	$E0
	.byte	$20
	.byte	$1C
	.byte	$20
	.byte	$ED
	.byte	$ED
	.byte	$35
	.byte	$34
	.byte	$12
	.byte	$14
	.byte	$E3
	.byte	$23
	.byte	$35
	.byte	$34
	.byte	$13
	.byte	$10
	.byte	$E0
	.byte	$60
	.byte	$14
	.byte	$10
	.byte	$11
	.byte	$40
	.byte	$2B
	.byte	$80
	.byte	$01
	.byte	$20
	.byte	$11
	.byte	$80
	.byte	$1B
	.byte	$1D
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$80
	.byte	$01
	.byte	$02
	.byte	$20
	.byte	$2B
	.byte	$80
	.byte	$01
	.byte	$02
	.byte	$C0
	.byte	$1C
	.byte	$1D
	.byte	$E0
	.byte	$E0
	.byte	$40
	.byte	$2B
	.byte	$40
	.byte	$AB
	.byte	$40
	.byte	$2B
	.byte	$1F
	.byte	$1E
	.byte	$40
	.byte	$1F
	.byte	$1E
	.byte	$1D
	.byte	$1E
	.byte	$1D
	.byte	$1E
	.byte	$40
	.byte	$1E
	.byte	$1F
	.byte	$E0
	.byte	$E0
	.byte	$40
	.byte	$01
	.byte	$02
	.byte	$E0
	.byte	$E0
	.byte	$A0
	.byte	$01
	.byte	$02
	.byte	$40
_enems_strip_2:
	.byte	$77
	.byte	$A2
	.byte	$11
	.byte	$74
	.byte	$32
	.byte	$02
	.byte	$71
	.byte	$D2
	.byte	$11
	.byte	$6B
	.byte	$52
	.byte	$02
	.byte	$68
	.byte	$C2
	.byte	$12
	.byte	$65
	.byte	$42
	.byte	$02
	.byte	$62
	.byte	$B2
	.byte	$12
	.byte	$5F
	.byte	$52
	.byte	$02
	.byte	$5C
	.byte	$A2
	.byte	$12
	.byte	$55
	.byte	$52
	.byte	$02
	.byte	$52
	.byte	$92
	.byte	$14
	.byte	$44
	.byte	$93
	.byte	$12
	.byte	$44
	.byte	$63
	.byte	$02
	.byte	$3B
	.byte	$47
	.byte	$B4
	.byte	$35
	.byte	$B7
	.byte	$4B
	.byte	$27
	.byte	$02
	.byte	$02
	.byte	$21
	.byte	$53
	.byte	$12
	.byte	$21
	.byte	$B3
	.byte	$12
	.byte	$1B
	.byte	$82
	.byte	$12
	.byte	$18
	.byte	$42
	.byte	$02
	.byte	$15
	.byte	$C2
	.byte	$12
	.byte	$12
	.byte	$32
	.byte	$02
	.byte	$08
	.byte	$34
	.byte	$00
	.byte	$06
	.byte	$C4
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_map_3:
	.byte	$ED
	.byte	$ED
	.byte	$35
	.byte	$34
	.byte	$12
	.byte	$14
	.byte	$E5
	.byte	$25
	.byte	$35
	.byte	$34
	.byte	$13
	.byte	$10
	.byte	$C0
	.byte	$08
	.byte	$60
	.byte	$14
	.byte	$10
	.byte	$11
	.byte	$E0
	.byte	$80
	.byte	$11
	.byte	$A0
	.byte	$01
	.byte	$02
	.byte	$E0
	.byte	$E0
	.byte	$40
	.byte	$08
	.byte	$80
	.byte	$01
	.byte	$02
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$20
	.byte	$E9
	.byte	$E9
	.byte	$1C
	.byte	$1D
	.byte	$1C
	.byte	$1B
	.byte	$1C
	.byte	$1B
	.byte	$1A
	.byte	$1B
	.byte	$1A
	.byte	$19
	.byte	$1A
	.byte	$19
	.byte	$18
	.byte	$19
	.byte	$38
	.byte	$E0
	.byte	$60
	.byte	$01
	.byte	$02
	.byte	$20
	.byte	$E9
	.byte	$E9
	.byte	$18
	.byte	$19
	.byte	$18
	.byte	$19
	.byte	$1A
	.byte	$19
	.byte	$1A
	.byte	$1B
	.byte	$1A
	.byte	$1B
	.byte	$1C
	.byte	$1B
	.byte	$1C
	.byte	$1D
	.byte	$1C
	.byte	$1D
	.byte	$20
	.byte	$01
	.byte	$02
	.byte	$E0
	.byte	$60
	.byte	$E9
	.byte	$E9
	.byte	$1C
	.byte	$1D
	.byte	$1C
	.byte	$1B
	.byte	$1C
	.byte	$1B
	.byte	$1A
	.byte	$1B
	.byte	$1A
	.byte	$19
	.byte	$1A
	.byte	$19
	.byte	$18
	.byte	$19
	.byte	$38
	.byte	$E0
	.byte	$40
	.byte	$01
	.byte	$02
	.byte	$40
	.byte	$E9
	.byte	$E9
	.byte	$18
	.byte	$19
	.byte	$18
	.byte	$19
	.byte	$1A
	.byte	$19
	.byte	$1A
	.byte	$1B
	.byte	$1A
	.byte	$1B
	.byte	$1C
	.byte	$1B
	.byte	$1C
	.byte	$1D
	.byte	$1C
	.byte	$1D
	.byte	$E0
	.byte	$E0
	.byte	$08
	.byte	$4A
	.byte	$E0
	.byte	$20
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$18
	.byte	$19
	.byte	$1D
	.byte	$E0
	.byte	$E0
	.byte	$01
	.byte	$02
	.byte	$E0
	.byte	$20
	.byte	$08
	.byte	$4A
	.byte	$60
	.byte	$01
	.byte	$02
	.byte	$20
	.byte	$4A
	.byte	$08
	.byte	$00
	.byte	$19
	.byte	$18
	.byte	$1C
	.byte	$E0
	.byte	$1A
	.byte	$19
	.byte	$18
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$80
	.byte	$4A
	.byte	$08
	.byte	$40
	.byte	$01
	.byte	$02
	.byte	$C0
	.byte	$1B
	.byte	$18
	.byte	$1A
	.byte	$E0
	.byte	$E0
	.byte	$00
	.byte	$08
	.byte	$4A
	.byte	$E0
	.byte	$4A
	.byte	$08
	.byte	$00
	.byte	$1C
	.byte	$19
	.byte	$1B
	.byte	$60
	.byte	$01
	.byte	$02
	.byte	$20
	.byte	$1D
	.byte	$1B
	.byte	$19
	.byte	$E0
	.byte	$E0
	.byte	$00
	.byte	$E9
	.byte	$E9
	.byte	$1C
	.byte	$1D
	.byte	$1C
	.byte	$1B
	.byte	$1C
	.byte	$1B
	.byte	$1A
	.byte	$1B
	.byte	$1A
	.byte	$19
	.byte	$1A
	.byte	$19
	.byte	$18
	.byte	$19
	.byte	$38
	.byte	$E0
	.byte	$60
	.byte	$01
	.byte	$02
	.byte	$20
	.byte	$E9
	.byte	$E9
	.byte	$18
	.byte	$19
	.byte	$18
	.byte	$19
	.byte	$1A
	.byte	$19
	.byte	$1A
	.byte	$1B
	.byte	$1A
	.byte	$1B
	.byte	$1C
	.byte	$1B
	.byte	$1C
	.byte	$1D
	.byte	$1C
	.byte	$1D
	.byte	$20
	.byte	$01
	.byte	$02
	.byte	$E0
	.byte	$60
	.byte	$E9
	.byte	$E9
	.byte	$1C
	.byte	$1D
	.byte	$1C
	.byte	$1B
	.byte	$1C
	.byte	$1B
	.byte	$1A
	.byte	$1B
	.byte	$1A
	.byte	$19
	.byte	$1A
	.byte	$19
	.byte	$18
	.byte	$19
	.byte	$38
	.byte	$E0
	.byte	$40
	.byte	$01
	.byte	$02
	.byte	$40
	.byte	$E9
	.byte	$E9
	.byte	$18
	.byte	$19
	.byte	$18
	.byte	$19
	.byte	$1A
	.byte	$19
	.byte	$1A
	.byte	$1B
	.byte	$1A
	.byte	$1B
	.byte	$1C
	.byte	$1B
	.byte	$1C
	.byte	$1D
	.byte	$1C
	.byte	$1D
	.byte	$E0
	.byte	$E0
	.byte	$01
	.byte	$02
	.byte	$E0
	.byte	$60
	.byte	$08
	.byte	$E0
	.byte	$20
	.byte	$01
	.byte	$02
	.byte	$40
	.byte	$19
	.byte	$E0
	.byte	$E0
	.byte	$00
	.byte	$4A
	.byte	$E0
	.byte	$20
	.byte	$4A
	.byte	$1D
	.byte	$1B
	.byte	$1A
	.byte	$20
	.byte	$1E
	.byte	$40
	.byte	$1E
	.byte	$40
	.byte	$19
	.byte	$1C
	.byte	$1D
	.byte	$E0
	.byte	$60
	.byte	$01
	.byte	$02
	.byte	$20
	.byte	$4A
	.byte	$E0
	.byte	$80
	.byte	$1D
	.byte	$1B
	.byte	$1A
	.byte	$E0
	.byte	$E0
	.byte	$20
	.byte	$1E
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$E0
	.byte	$E0
	.byte	$00
	.byte	$1E
	.byte	$E0
	.byte	$E0
	.byte	$20
	.byte	$4A
	.byte	$E0
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$20
	.byte	$19
	.byte	$1C
	.byte	$1D
	.byte	$20
	.byte	$01
	.byte	$02
	.byte	$E0
	.byte	$60
	.byte	$4A
	.byte	$20
	.byte	$1E
	.byte	$60
	.byte	$1E
	.byte	$20
	.byte	$4A
	.byte	$19
	.byte	$1A
	.byte	$1B
	.byte	$E0
	.byte	$20
	.byte	$19
	.byte	$1C
	.byte	$1D
	.byte	$E0
	.byte	$E0
	.byte	$4A
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$C0
	.byte	$4A
	.byte	$18
	.byte	$19
	.byte	$1A
	.byte	$A0
	.byte	$01
	.byte	$02
	.byte	$20
	.byte	$1C
	.byte	$1B
	.byte	$1D
	.byte	$E0
	.byte	$E0
	.byte	$40
	.byte	$4A
	.byte	$E0
	.byte	$80
	.byte	$19
	.byte	$18
	.byte	$1A
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$01
	.byte	$02
	.byte	$A0
	.byte	$8A
	.byte	$A0
	.byte	$01
	.byte	$02
	.byte	$40
	.byte	$1A
	.byte	$19
	.byte	$18
	.byte	$19
	.byte	$1A
	.byte	$E0
	.byte	$E0
	.byte	$80
	.byte	$E9
	.byte	$E9
	.byte	$18
	.byte	$1A
	.byte	$19
	.byte	$18
	.byte	$1A
	.byte	$19
	.byte	$18
	.byte	$19
	.byte	$1A
	.byte	$18
	.byte	$19
	.byte	$1A
	.byte	$18
	.byte	$1A
	.byte	$19
	.byte	$18
	.byte	$E0
	.byte	$20
	.byte	$01
	.byte	$02
	.byte	$60
	.byte	$49
	.byte	$E0
	.byte	$20
	.byte	$49
	.byte	$1A
	.byte	$19
	.byte	$80
	.byte	$29
	.byte	$60
	.byte	$1A
	.byte	$19
	.byte	$1D
	.byte	$C0
	.byte	$18
	.byte	$1A
	.byte	$E0
	.byte	$20
	.byte	$29
	.byte	$20
	.byte	$01
	.byte	$02
	.byte	$20
	.byte	$29
	.byte	$A0
	.byte	$19
	.byte	$1A
	.byte	$A0
	.byte	$1A
	.byte	$18
	.byte	$60
	.byte	$01
	.byte	$02
	.byte	$E0
	.byte	$C0
	.byte	$08
	.byte	$40
	.byte	$69
	.byte	$40
	.byte	$08
	.byte	$60
	.byte	$1E
	.byte	$40
	.byte	$19
	.byte	$18
	.byte	$1A
	.byte	$19
	.byte	$40
	.byte	$1E
	.byte	$E0
	.byte	$E0
	.byte	$01
	.byte	$02
	.byte	$40
	.byte	$29
	.byte	$A0
	.byte	$29
	.byte	$A0
	.byte	$18
	.byte	$19
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$40
	.byte	$1A
	.byte	$18
	.byte	$E0
	.byte	$E0
	.byte	$40
	.byte	$29
	.byte	$60
	.byte	$69
	.byte	$60
	.byte	$29
	.byte	$1A
	.byte	$18
	.byte	$60
	.byte	$19
	.byte	$1A
	.byte	$19
	.byte	$18
	.byte	$60
	.byte	$1A
	.byte	$18
	.byte	$E0
	.byte	$01
	.byte	$02
	.byte	$E0
	.byte	$00
	.byte	$29
	.byte	$A0
	.byte	$29
	.byte	$A0
	.byte	$1E
	.byte	$1B
	.byte	$A0
	.byte	$1B
	.byte	$1E
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$60
	.byte	$01
	.byte	$02
	.byte	$A0
	.byte	$01
	.byte	$02
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$A0
	.byte	$0A
	.byte	$E0
	.byte	$60
	.byte	$0A
	.byte	$20
	.byte	$1C
	.byte	$40
	.byte	$01
	.byte	$02
	.byte	$C0
	.byte	$1C
	.byte	$E0
	.byte	$E0
	.byte	$00
	.byte	$E9
	.byte	$E9
	.byte	$1C
	.byte	$1D
	.byte	$1C
	.byte	$1B
	.byte	$1C
	.byte	$1B
	.byte	$1A
	.byte	$1B
	.byte	$1A
	.byte	$19
	.byte	$1A
	.byte	$19
	.byte	$18
	.byte	$19
	.byte	$38
	.byte	$E0
	.byte	$60
	.byte	$01
	.byte	$02
	.byte	$20
	.byte	$E9
	.byte	$E9
	.byte	$18
	.byte	$19
	.byte	$18
	.byte	$19
	.byte	$1A
	.byte	$19
	.byte	$1A
	.byte	$1B
	.byte	$1A
	.byte	$1B
	.byte	$1C
	.byte	$1B
	.byte	$1C
	.byte	$1D
	.byte	$1C
	.byte	$1D
	.byte	$20
	.byte	$01
	.byte	$02
	.byte	$E0
	.byte	$60
	.byte	$E9
	.byte	$E9
	.byte	$1C
	.byte	$1D
	.byte	$1C
	.byte	$1B
	.byte	$1C
	.byte	$1B
	.byte	$1A
	.byte	$1B
	.byte	$1A
	.byte	$19
	.byte	$1A
	.byte	$19
	.byte	$18
	.byte	$19
	.byte	$38
	.byte	$E0
	.byte	$40
	.byte	$01
	.byte	$02
	.byte	$40
	.byte	$E9
	.byte	$E9
	.byte	$18
	.byte	$19
	.byte	$18
	.byte	$19
	.byte	$1A
	.byte	$19
	.byte	$1A
	.byte	$1B
	.byte	$1A
	.byte	$1B
	.byte	$1C
	.byte	$1B
	.byte	$1C
	.byte	$1D
	.byte	$1C
	.byte	$1D
	.byte	$E0
	.byte	$E0
	.byte	$A0
	.byte	$6D
	.byte	$40
	.byte	$01
	.byte	$02
	.byte	$C0
	.byte	$18
	.byte	$1B
	.byte	$1C
	.byte	$1D
	.byte	$A0
	.byte	$4D
	.byte	$E0
	.byte	$20
	.byte	$4D
	.byte	$08
	.byte	$1E
	.byte	$1D
	.byte	$60
	.byte	$01
	.byte	$02
	.byte	$60
	.byte	$1D
	.byte	$1E
	.byte	$08
	.byte	$1E
	.byte	$E0
	.byte	$A0
	.byte	$1E
	.byte	$E0
	.byte	$E0
	.byte	$ED
	.byte	$ED
	.byte	$35
	.byte	$34
	.byte	$12
	.byte	$14
	.byte	$E5
	.byte	$25
	.byte	$35
	.byte	$34
	.byte	$13
	.byte	$10
	.byte	$E0
	.byte	$00
	.byte	$01
	.byte	$20
	.byte	$14
	.byte	$10
	.byte	$11
	.byte	$A0
	.byte	$09
	.byte	$A0
	.byte	$11
	.byte	$40
	.byte	$01
	.byte	$02
	.byte	$40
	.byte	$1D
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$80
	.byte	$C9
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$A0
	.byte	$1E
	.byte	$1F
	.byte	$1E
	.byte	$1D
	.byte	$1E
	.byte	$1F
	.byte	$1E
	.byte	$E0
	.byte	$E0
	.byte	$E9
	.byte	$E9
	.byte	$1F
	.byte	$1E
	.byte	$1F
	.byte	$1E
	.byte	$1F
	.byte	$1E
	.byte	$1D
	.byte	$1E
	.byte	$1D
	.byte	$1C
	.byte	$1D
	.byte	$1C
	.byte	$18
	.byte	$19
	.byte	$38
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$60
	.byte	$01
	.byte	$02
	.byte	$20
_enems_strip_3:
	.byte	$75
	.byte	$13
	.byte	$02
	.byte	$72
	.byte	$E3
	.byte	$12
	.byte	$6F
	.byte	$13
	.byte	$02
	.byte	$6C
	.byte	$E3
	.byte	$12
	.byte	$68
	.byte	$66
	.byte	$00
	.byte	$68
	.byte	$96
	.byte	$00
	.byte	$62
	.byte	$96
	.byte	$00
	.byte	$62
	.byte	$66
	.byte	$00
	.byte	$5D
	.byte	$23
	.byte	$02
	.byte	$5A
	.byte	$C3
	.byte	$12
	.byte	$57
	.byte	$33
	.byte	$02
	.byte	$54
	.byte	$C3
	.byte	$12
	.byte	$50
	.byte	$56
	.byte	$00
	.byte	$50
	.byte	$A6
	.byte	$00
	.byte	$4C
	.byte	$56
	.byte	$00
	.byte	$4B
	.byte	$A6
	.byte	$00
	.byte	$47
	.byte	$A6
	.byte	$00
	.byte	$47
	.byte	$56
	.byte	$00
	.byte	$33
	.byte	$83
	.byte	$12
	.byte	$32
	.byte	$73
	.byte	$02
	.byte	$30
	.byte	$33
	.byte	$02
	.byte	$30
	.byte	$C3
	.byte	$12
	.byte	$26
	.byte	$13
	.byte	$12
	.byte	$26
	.byte	$E3
	.byte	$02
	.byte	$25
	.byte	$37
	.byte	$C3
	.byte	$1D
	.byte	$13
	.byte	$02
	.byte	$1D
	.byte	$E3
	.byte	$12
	.byte	$1A
	.byte	$63
	.byte	$02
	.byte	$17
	.byte	$D3
	.byte	$12
	.byte	$17
	.byte	$13
	.byte	$02
	.byte	$0F
	.byte	$83
	.byte	$12
	.byte	$00
	.byte	$00
	.byte	$00
_map_4:
	.byte	$EA
	.byte	$EA
	.byte	$35
	.byte	$34
	.byte	$12
	.byte	$14
	.byte	$E5
	.byte	$25
	.byte	$35
	.byte	$34
	.byte	$13
	.byte	$10
	.byte	$00
	.byte	$01
	.byte	$C0
	.byte	$01
	.byte	$20
	.byte	$14
	.byte	$10
	.byte	$11
	.byte	$60
	.byte	$08
	.byte	$43
	.byte	$08
	.byte	$60
	.byte	$11
	.byte	$A0
	.byte	$1E
	.byte	$1D
	.byte	$1C
	.byte	$1D
	.byte	$1E
	.byte	$E0
	.byte	$E0
	.byte	$20
	.byte	$08
	.byte	$E3
	.byte	$A3
	.byte	$08
	.byte	$00
	.byte	$1A
	.byte	$19
	.byte	$18
	.byte	$1A
	.byte	$19
	.byte	$1A
	.byte	$18
	.byte	$1B
	.byte	$19
	.byte	$1A
	.byte	$18
	.byte	$19
	.byte	$1A
	.byte	$19
	.byte	$E0
	.byte	$60
	.byte	$01
	.byte	$60
	.byte	$23
	.byte	$08
	.byte	$E0
	.byte	$80
	.byte	$1A
	.byte	$19
	.byte	$00
	.byte	$08
	.byte	$63
	.byte	$08
	.byte	$80
	.byte	$01
	.byte	$80
	.byte	$19
	.byte	$1A
	.byte	$18
	.byte	$19
	.byte	$E0
	.byte	$A0
	.byte	$01
	.byte	$E0
	.byte	$E0
	.byte	$40
	.byte	$08
	.byte	$43
	.byte	$08
	.byte	$40
	.byte	$01
	.byte	$E0
	.byte	$18
	.byte	$19
	.byte	$1A
	.byte	$E0
	.byte	$E0
	.byte	$20
	.byte	$08
	.byte	$83
	.byte	$08
	.byte	$20
	.byte	$08
	.byte	$83
	.byte	$08
	.byte	$00
	.byte	$1D
	.byte	$1A
	.byte	$19
	.byte	$18
	.byte	$1B
	.byte	$60
	.byte	$18
	.byte	$19
	.byte	$1A
	.byte	$18
	.byte	$1A
	.byte	$E0
	.byte	$C0
	.byte	$01
	.byte	$20
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$E3
	.byte	$08
	.byte	$C0
	.byte	$18
	.byte	$1A
	.byte	$1B
	.byte	$1D
	.byte	$1E
	.byte	$1B
	.byte	$1A
	.byte	$18
	.byte	$E0
	.byte	$60
	.byte	$01
	.byte	$C0
	.byte	$08
	.byte	$83
	.byte	$08
	.byte	$20
	.byte	$08
	.byte	$83
	.byte	$08
	.byte	$00
	.byte	$18
	.byte	$19
	.byte	$1A
	.byte	$1B
	.byte	$1C
	.byte	$60
	.byte	$1C
	.byte	$1B
	.byte	$1A
	.byte	$19
	.byte	$18
	.byte	$E0
	.byte	$E0
	.byte	$80
	.byte	$08
	.byte	$A3
	.byte	$08
	.byte	$C0
	.byte	$08
	.byte	$00
	.byte	$1C
	.byte	$19
	.byte	$38
	.byte	$19
	.byte	$1C
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$0A
	.byte	$01
	.byte	$E0
	.byte	$80
	.byte	$0A
	.byte	$18
	.byte	$E0
	.byte	$A0
	.byte	$18
	.byte	$20
	.byte	$08
	.byte	$ED
	.byte	$2D
	.byte	$08
	.byte	$40
	.byte	$28
	.byte	$1B
	.byte	$1A
	.byte	$18
	.byte	$19
	.byte	$1E
	.byte	$1C
	.byte	$18
	.byte	$19
	.byte	$18
	.byte	$1D
	.byte	$28
	.byte	$01
	.byte	$00
	.byte	$18
	.byte	$08
	.byte	$E0
	.byte	$20
	.byte	$08
	.byte	$18
	.byte	$40
	.byte	$08
	.byte	$ED
	.byte	$2D
	.byte	$08
	.byte	$20
	.byte	$08
	.byte	$00
	.byte	$08
	.byte	$1D
	.byte	$18
	.byte	$1E
	.byte	$19
	.byte	$1A
	.byte	$18
	.byte	$19
	.byte	$1A
	.byte	$1E
	.byte	$1B
	.byte	$08
	.byte	$00
	.byte	$08
	.byte	$18
	.byte	$00
	.byte	$08
	.byte	$E0
	.byte	$20
	.byte	$08
	.byte	$00
	.byte	$18
	.byte	$20
	.byte	$18
	.byte	$08
	.byte	$E3
	.byte	$08
	.byte	$18
	.byte	$80
	.byte	$18
	.byte	$E0
	.byte	$18
	.byte	$E0
	.byte	$E0
	.byte	$60
	.byte	$01
	.byte	$40
	.byte	$08
	.byte	$63
	.byte	$08
	.byte	$20
	.byte	$01
	.byte	$E0
	.byte	$19
	.byte	$1A
	.byte	$19
	.byte	$1A
	.byte	$E0
	.byte	$E0
	.byte	$A0
	.byte	$08
	.byte	$43
	.byte	$08
	.byte	$A0
	.byte	$08
	.byte	$43
	.byte	$08
	.byte	$00
	.byte	$19
	.byte	$1C
	.byte	$19
	.byte	$60
	.byte	$01
	.byte	$40
	.byte	$19
	.byte	$1D
	.byte	$19
	.byte	$E0
	.byte	$E0
	.byte	$A0
	.byte	$08
	.byte	$63
	.byte	$08
	.byte	$E0
	.byte	$40
	.byte	$18
	.byte	$19
	.byte	$1A
	.byte	$18
	.byte	$E0
	.byte	$E0
	.byte	$A0
	.byte	$08
	.byte	$43
	.byte	$08
	.byte	$A0
	.byte	$08
	.byte	$43
	.byte	$08
	.byte	$00
	.byte	$19
	.byte	$1B
	.byte	$19
	.byte	$E0
	.byte	$19
	.byte	$1F
	.byte	$19
	.byte	$E0
	.byte	$01
	.byte	$E0
	.byte	$80
	.byte	$08
	.byte	$63
	.byte	$08
	.byte	$C0
	.byte	$01
	.byte	$40
	.byte	$18
	.byte	$1A
	.byte	$19
	.byte	$18
	.byte	$E0
	.byte	$E0
	.byte	$A0
	.byte	$08
	.byte	$43
	.byte	$08
	.byte	$A0
	.byte	$08
	.byte	$43
	.byte	$08
	.byte	$00
	.byte	$19
	.byte	$1D
	.byte	$19
	.byte	$80
	.byte	$01
	.byte	$20
	.byte	$19
	.byte	$1B
	.byte	$19
	.byte	$E0
	.byte	$E0
	.byte	$A0
	.byte	$08
	.byte	$6A
	.byte	$08
	.byte	$C0
	.byte	$01
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$60
	.byte	$01
	.byte	$E0
	.byte	$E0
	.byte	$60
	.byte	$01
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$08
	.byte	$63
	.byte	$08
	.byte	$E0
	.byte	$40
	.byte	$19
	.byte	$1A
	.byte	$19
	.byte	$1A
	.byte	$E0
	.byte	$E0
	.byte	$A0
	.byte	$08
	.byte	$43
	.byte	$08
	.byte	$A0
	.byte	$08
	.byte	$43
	.byte	$08
	.byte	$00
	.byte	$19
	.byte	$1F
	.byte	$19
	.byte	$E0
	.byte	$19
	.byte	$1D
	.byte	$19
	.byte	$E0
	.byte	$E0
	.byte	$40
	.byte	$01
	.byte	$20
	.byte	$08
	.byte	$63
	.byte	$08
	.byte	$E0
	.byte	$40
	.byte	$18
	.byte	$19
	.byte	$1A
	.byte	$18
	.byte	$E0
	.byte	$E0
	.byte	$A0
	.byte	$08
	.byte	$43
	.byte	$08
	.byte	$A0
	.byte	$08
	.byte	$43
	.byte	$08
	.byte	$00
	.byte	$19
	.byte	$1B
	.byte	$19
	.byte	$E0
	.byte	$19
	.byte	$18
	.byte	$19
	.byte	$E0
	.byte	$E0
	.byte	$20
	.byte	$01
	.byte	$40
	.byte	$08
	.byte	$63
	.byte	$08
	.byte	$00
	.byte	$01
	.byte	$E0
	.byte	$00
	.byte	$18
	.byte	$1A
	.byte	$19
	.byte	$18
	.byte	$E0
	.byte	$E0
	.byte	$A0
	.byte	$08
	.byte	$43
	.byte	$08
	.byte	$A0
	.byte	$08
	.byte	$43
	.byte	$28
	.byte	$19
	.byte	$1D
	.byte	$19
	.byte	$60
	.byte	$01
	.byte	$40
	.byte	$19
	.byte	$1B
	.byte	$19
	.byte	$28
	.byte	$E0
	.byte	$A0
	.byte	$28
	.byte	$E3
	.byte	$A3
	.byte	$28
	.byte	$E3
	.byte	$A3
	.byte	$28
	.byte	$E3
	.byte	$A3
	.byte	$28
	.byte	$1D
	.byte	$18
	.byte	$1E
	.byte	$19
	.byte	$1D
	.byte	$18
	.byte	$1E
	.byte	$19
	.byte	$1A
	.byte	$18
	.byte	$19
	.byte	$1A
	.byte	$1E
	.byte	$1B
	.byte	$08
	.byte	$40
	.byte	$01
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$40
	.byte	$01
	.byte	$20
	.byte	$08
	.byte	$E3
	.byte	$23
	.byte	$08
	.byte	$80
	.byte	$1D
	.byte	$18
	.byte	$1E
	.byte	$19
	.byte	$1A
	.byte	$18
	.byte	$19
	.byte	$1A
	.byte	$1E
	.byte	$1B
	.byte	$E0
	.byte	$E0
	.byte	$40
	.byte	$63
	.byte	$08
	.byte	$20
	.byte	$01
	.byte	$40
	.byte	$08
	.byte	$63
	.byte	$1A
	.byte	$19
	.byte	$1B
	.byte	$1A
	.byte	$E0
	.byte	$19
	.byte	$18
	.byte	$19
	.byte	$1B
	.byte	$E0
	.byte	$E0
	.byte	$40
	.byte	$08
	.byte	$E3
	.byte	$08
	.byte	$00
	.byte	$01
	.byte	$80
	.byte	$18
	.byte	$1B
	.byte	$19
	.byte	$1A
	.byte	$18
	.byte	$39
	.byte	$1C
	.byte	$E0
	.byte	$E0
	.byte	$60
	.byte	$23
	.byte	$08
	.byte	$20
	.byte	$01
	.byte	$C0
	.byte	$08
	.byte	$23
	.byte	$18
	.byte	$19
	.byte	$E0
	.byte	$60
	.byte	$19
	.byte	$18
	.byte	$E0
	.byte	$E0
	.byte	$08
	.byte	$E0
	.byte	$01
	.byte	$80
	.byte	$08
	.byte	$40
	.byte	$08
	.byte	$E0
	.byte	$08
	.byte	$A0
	.byte	$18
	.byte	$08
	.byte	$A0
	.byte	$08
	.byte	$18
	.byte	$C0
	.byte	$18
	.byte	$A0
	.byte	$18
	.byte	$80
	.byte	$01
	.byte	$E0
	.byte	$E0
	.byte	$40
	.byte	$08
	.byte	$63
	.byte	$08
	.byte	$E0
	.byte	$40
	.byte	$1D
	.byte	$19
	.byte	$1A
	.byte	$1D
	.byte	$60
	.byte	$01
	.byte	$E0
	.byte	$E0
	.byte	$00
	.byte	$A3
	.byte	$08
	.byte	$20
	.byte	$08
	.byte	$A3
	.byte	$1F
	.byte	$C0
	.byte	$01
	.byte	$A0
	.byte	$1F
	.byte	$E0
	.byte	$E0
	.byte	$00
	.byte	$01
	.byte	$40
	.byte	$AA
	.byte	$E0
	.byte	$20
	.byte	$1A
	.byte	$78
	.byte	$1A
	.byte	$E0
	.byte	$E0
	.byte	$80
	.byte	$E3
	.byte	$E3
	.byte	$E3
	.byte	$E3
	.byte	$EA
	.byte	$EA
	.byte	$35
	.byte	$34
	.byte	$12
	.byte	$14
	.byte	$E5
	.byte	$25
	.byte	$35
	.byte	$34
	.byte	$13
	.byte	$10
	.byte	$00
	.byte	$01
	.byte	$C0
	.byte	$01
	.byte	$20
	.byte	$14
	.byte	$10
	.byte	$11
	.byte	$E0
	.byte	$08
	.byte	$60
	.byte	$11
	.byte	$E0
	.byte	$20
	.byte	$1E
	.byte	$E0
	.byte	$60
	.byte	$01
	.byte	$20
	.byte	$1F
	.byte	$E0
	.byte	$A0
	.byte	$08
	.byte	$00
	.byte	$01
	.byte	$40
	.byte	$01
	.byte	$E0
	.byte	$00
	.byte	$1E
	.byte	$E0
	.byte	$C0
	.byte	$1F
	.byte	$C0
	.byte	$08
	.byte	$01
	.byte	$00
	.byte	$28
	.byte	$20
	.byte	$08
	.byte	$E0
	.byte	$1E
	.byte	$20
	.byte	$1E
	.byte	$1F
	.byte	$20
	.byte	$1E
	.byte	$E0
	.byte	$1F
	.byte	$20
	.byte	$1F
	.byte	$1E
	.byte	$20
	.byte	$1F
	.byte	$A0
	.byte	$01
	.byte	$20
	.byte	$3D
	.byte	$20
	.byte	$3D
	.byte	$20
	.byte	$01
	.byte	$E0
	.byte	$E0
	.byte	$20
_enems_strip_4:
	.byte	$70
	.byte	$64
	.byte	$00
	.byte	$6A
	.byte	$22
	.byte	$02
	.byte	$67
	.byte	$E2
	.byte	$11
	.byte	$60
	.byte	$33
	.byte	$01
	.byte	$5D
	.byte	$C3
	.byte	$11
	.byte	$48
	.byte	$02
	.byte	$02
	.byte	$44
	.byte	$17
	.byte	$E1
	.byte	$3C
	.byte	$F2
	.byte	$12
	.byte	$39
	.byte	$12
	.byte	$12
	.byte	$30
	.byte	$73
	.byte	$02
	.byte	$30
	.byte	$83
	.byte	$12
	.byte	$2A
	.byte	$13
	.byte	$00
	.byte	$2A
	.byte	$E3
	.byte	$12
	.byte	$24
	.byte	$02
	.byte	$02
	.byte	$20
	.byte	$43
	.byte	$02
	.byte	$20
	.byte	$B3
	.byte	$12
	.byte	$19
	.byte	$72
	.byte	$02
	.byte	$16
	.byte	$E2
	.byte	$12
	.byte	$12
	.byte	$24
	.byte	$00
	.byte	$12
	.byte	$D4
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_map_5:
	.byte	$E9
	.byte	$E9
	.byte	$35
	.byte	$34
	.byte	$12
	.byte	$14
	.byte	$E6
	.byte	$26
	.byte	$35
	.byte	$34
	.byte	$13
	.byte	$10
	.byte	$E0
	.byte	$60
	.byte	$14
	.byte	$10
	.byte	$11
	.byte	$60
	.byte	$09
	.byte	$60
	.byte	$09
	.byte	$40
	.byte	$11
	.byte	$20
	.byte	$01
	.byte	$40
	.byte	$1C
	.byte	$60
	.byte	$1D
	.byte	$E0
	.byte	$E0
	.byte	$20
	.byte	$01
	.byte	$C0
	.byte	$09
	.byte	$40
	.byte	$01
	.byte	$E0
	.byte	$40
	.byte	$1B
	.byte	$E0
	.byte	$E0
	.byte	$C0
	.byte	$0B
	.byte	$EC
	.byte	$6C
	.byte	$0B
	.byte	$20
	.byte	$1E
	.byte	$E4
	.byte	$64
	.byte	$1D
	.byte	$E0
	.byte	$40
	.byte	$01
	.byte	$A0
	.byte	$0B
	.byte	$80
	.byte	$2B
	.byte	$20
	.byte	$0B
	.byte	$20
	.byte	$0B
	.byte	$20
	.byte	$19
	.byte	$80
	.byte	$1A
	.byte	$19
	.byte	$20
	.byte	$18
	.byte	$20
	.byte	$19
	.byte	$E0
	.byte	$E0
	.byte	$20
	.byte	$0B
	.byte	$20
	.byte	$01
	.byte	$E0
	.byte	$00
	.byte	$0B
	.byte	$20
	.byte	$18
	.byte	$E0
	.byte	$60
	.byte	$18
	.byte	$E0
	.byte	$E0
	.byte	$80
	.byte	$0B
	.byte	$40
	.byte	$01
	.byte	$20
	.byte	$0B
	.byte	$E0
	.byte	$18
	.byte	$A0
	.byte	$1A
	.byte	$E0
	.byte	$E0
	.byte	$80
	.byte	$0B
	.byte	$20
	.byte	$0B
	.byte	$20
	.byte	$2B
	.byte	$20
	.byte	$0B
	.byte	$80
	.byte	$18
	.byte	$20
	.byte	$1A
	.byte	$20
	.byte	$28
	.byte	$20
	.byte	$1A
	.byte	$20
	.byte	$01
	.byte	$E0
	.byte	$28
	.byte	$E0
	.byte	$0B
	.byte	$80
	.byte	$28
	.byte	$20
	.byte	$0B
	.byte	$80
	.byte	$1A
	.byte	$80
	.byte	$28
	.byte	$20
	.byte	$19
	.byte	$E0
	.byte	$40
	.byte	$28
	.byte	$E0
	.byte	$0B
	.byte	$20
	.byte	$01
	.byte	$20
	.byte	$2B
	.byte	$20
	.byte	$0B
	.byte	$20
	.byte	$0B
	.byte	$20
	.byte	$1B
	.byte	$80
	.byte	$1A
	.byte	$18
	.byte	$20
	.byte	$18
	.byte	$20
	.byte	$19
	.byte	$E0
	.byte	$E0
	.byte	$20
	.byte	$0B
	.byte	$20
	.byte	$0B
	.byte	$20
	.byte	$2B
	.byte	$80
	.byte	$0B
	.byte	$20
	.byte	$1B
	.byte	$20
	.byte	$08
	.byte	$20
	.byte	$1B
	.byte	$1A
	.byte	$80
	.byte	$1B
	.byte	$80
	.byte	$08
	.byte	$E0
	.byte	$60
	.byte	$0B
	.byte	$20
	.byte	$0B
	.byte	$20
	.byte	$2B
	.byte	$20
	.byte	$0B
	.byte	$20
	.byte	$0B
	.byte	$20
	.byte	$19
	.byte	$20
	.byte	$19
	.byte	$20
	.byte	$1D
	.byte	$1A
	.byte	$20
	.byte	$18
	.byte	$20
	.byte	$08
	.byte	$E0
	.byte	$E0
	.byte	$20
	.byte	$0B
	.byte	$40
	.byte	$01
	.byte	$00
	.byte	$2B
	.byte	$20
	.byte	$0B
	.byte	$20
	.byte	$0B
	.byte	$20
	.byte	$08
	.byte	$80
	.byte	$19
	.byte	$1C
	.byte	$20
	.byte	$08
	.byte	$20
	.byte	$18
	.byte	$20
	.byte	$08
	.byte	$E0
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$01
	.byte	$40
	.byte	$0B
	.byte	$20
	.byte	$0B
	.byte	$20
	.byte	$2B
	.byte	$20
	.byte	$0B
	.byte	$20
	.byte	$0B
	.byte	$20
	.byte	$1C
	.byte	$20
	.byte	$1A
	.byte	$20
	.byte	$18
	.byte	$1A
	.byte	$20
	.byte	$18
	.byte	$20
	.byte	$1D
	.byte	$E0
	.byte	$E0
	.byte	$80
	.byte	$0B
	.byte	$20
	.byte	$2B
	.byte	$80
	.byte	$0B
	.byte	$20
	.byte	$01
	.byte	$20
	.byte	$18
	.byte	$20
	.byte	$28
	.byte	$20
	.byte	$01
	.byte	$20
	.byte	$08
	.byte	$E0
	.byte	$28
	.byte	$E0
	.byte	$0B
	.byte	$20
	.byte	$0B
	.byte	$20
	.byte	$0B
	.byte	$0D
	.byte	$20
	.byte	$0D
	.byte	$20
	.byte	$0B
	.byte	$20
	.byte	$18
	.byte	$20
	.byte	$08
	.byte	$20
	.byte	$19
	.byte	$1A
	.byte	$20
	.byte	$1C
	.byte	$20
	.byte	$19
	.byte	$80
	.byte	$08
	.byte	$00
	.byte	$01
	.byte	$E0
	.byte	$20
	.byte	$0B
	.byte	$20
	.byte	$0B
	.byte	$20
	.byte	$2B
	.byte	$20
	.byte	$0B
	.byte	$20
	.byte	$0B
	.byte	$20
	.byte	$1A
	.byte	$20
	.byte	$1C
	.byte	$20
	.byte	$18
	.byte	$1D
	.byte	$20
	.byte	$19
	.byte	$20
	.byte	$08
	.byte	$60
	.byte	$01
	.byte	$E0
	.byte	$20
	.byte	$08
	.byte	$20
	.byte	$0B
	.byte	$20
	.byte	$0B
	.byte	$20
	.byte	$2B
	.byte	$20
	.byte	$0B
	.byte	$20
	.byte	$0B
	.byte	$20
	.byte	$08
	.byte	$20
	.byte	$1D
	.byte	$20
	.byte	$19
	.byte	$1A
	.byte	$20
	.byte	$18
	.byte	$20
	.byte	$1A
	.byte	$20
	.byte	$08
	.byte	$E0
	.byte	$C0
	.byte	$0B
	.byte	$20
	.byte	$0B
	.byte	$20
	.byte	$0D
	.byte	$0B
	.byte	$20
	.byte	$08
	.byte	$20
	.byte	$0B
	.byte	$20
	.byte	$19
	.byte	$20
	.byte	$1C
	.byte	$20
	.byte	$28
	.byte	$20
	.byte	$18
	.byte	$20
	.byte	$19
	.byte	$A0
	.byte	$01
	.byte	$00
	.byte	$28
	.byte	$60
	.byte	$01
	.byte	$40
	.byte	$0B
	.byte	$80
	.byte	$2B
	.byte	$20
	.byte	$0B
	.byte	$20
	.byte	$0D
	.byte	$20
	.byte	$18
	.byte	$00
	.byte	$01
	.byte	$40
	.byte	$1D
	.byte	$19
	.byte	$20
	.byte	$08
	.byte	$20
	.byte	$1E
	.byte	$E0
	.byte	$60
	.byte	$08
	.byte	$80
	.byte	$0B
	.byte	$20
	.byte	$0B
	.byte	$20
	.byte	$2B
	.byte	$20
	.byte	$0B
	.byte	$20
	.byte	$0B
	.byte	$20
	.byte	$1F
	.byte	$20
	.byte	$08
	.byte	$20
	.byte	$1A
	.byte	$19
	.byte	$20
	.byte	$1D
	.byte	$20
	.byte	$1B
	.byte	$80
	.byte	$08
	.byte	$E0
	.byte	$60
	.byte	$0B
	.byte	$20
	.byte	$0B
	.byte	$20
	.byte	$2B
	.byte	$40
	.byte	$01
	.byte	$00
	.byte	$0B
	.byte	$20
	.byte	$1E
	.byte	$20
	.byte	$19
	.byte	$20
	.byte	$19
	.byte	$1A
	.byte	$80
	.byte	$1E
	.byte	$E0
	.byte	$E0
	.byte	$60
	.byte	$EE
	.byte	$2E
	.byte	$A0
	.byte	$E6
	.byte	$26
	.byte	$E0
	.byte	$40
	.byte	$01
	.byte	$E0
	.byte	$00
	.byte	$2E
	.byte	$E0
	.byte	$2E
	.byte	$60
	.byte	$1E
	.byte	$1D
	.byte	$E0
	.byte	$1E
	.byte	$1D
	.byte	$00
	.byte	$21
	.byte	$E0
	.byte	$E0
	.byte	$00
	.byte	$2E
	.byte	$20
	.byte	$01
	.byte	$80
	.byte	$2E
	.byte	$60
	.byte	$1C
	.byte	$1E
	.byte	$E0
	.byte	$1A
	.byte	$18
	.byte	$E0
	.byte	$60
	.byte	$01
	.byte	$A0
	.byte	$0B
	.byte	$80
	.byte	$2B
	.byte	$20
	.byte	$0B
	.byte	$20
	.byte	$0B
	.byte	$20
	.byte	$19
	.byte	$80
	.byte	$1A
	.byte	$19
	.byte	$20
	.byte	$18
	.byte	$20
	.byte	$19
	.byte	$E0
	.byte	$E0
	.byte	$20
	.byte	$0B
	.byte	$20
	.byte	$01
	.byte	$E0
	.byte	$00
	.byte	$0B
	.byte	$20
	.byte	$18
	.byte	$E0
	.byte	$60
	.byte	$18
	.byte	$E0
	.byte	$E0
	.byte	$80
	.byte	$0B
	.byte	$40
	.byte	$01
	.byte	$20
	.byte	$0B
	.byte	$E0
	.byte	$18
	.byte	$A0
	.byte	$08
	.byte	$E0
	.byte	$C0
	.byte	$08
	.byte	$80
	.byte	$0B
	.byte	$20
	.byte	$0B
	.byte	$20
	.byte	$2B
	.byte	$20
	.byte	$0B
	.byte	$80
	.byte	$08
	.byte	$20
	.byte	$1A
	.byte	$20
	.byte	$19
	.byte	$18
	.byte	$20
	.byte	$1A
	.byte	$20
	.byte	$01
	.byte	$20
	.byte	$08
	.byte	$E0
	.byte	$C0
	.byte	$0B
	.byte	$E0
	.byte	$00
	.byte	$0B
	.byte	$80
	.byte	$1A
	.byte	$80
	.byte	$01
	.byte	$40
	.byte	$19
	.byte	$E0
	.byte	$E0
	.byte	$80
	.byte	$0B
	.byte	$20
	.byte	$01
	.byte	$20
	.byte	$2B
	.byte	$20
	.byte	$0B
	.byte	$20
	.byte	$0B
	.byte	$20
	.byte	$1B
	.byte	$80
	.byte	$1F
	.byte	$08
	.byte	$20
	.byte	$18
	.byte	$20
	.byte	$19
	.byte	$E0
	.byte	$00
	.byte	$08
	.byte	$E0
	.byte	$0B
	.byte	$20
	.byte	$0B
	.byte	$20
	.byte	$2B
	.byte	$80
	.byte	$0B
	.byte	$20
	.byte	$1B
	.byte	$20
	.byte	$08
	.byte	$20
	.byte	$1B
	.byte	$1A
	.byte	$80
	.byte	$1B
	.byte	$80
	.byte	$08
	.byte	$E0
	.byte	$60
	.byte	$0B
	.byte	$20
	.byte	$0B
	.byte	$20
	.byte	$2B
	.byte	$20
	.byte	$0B
	.byte	$20
	.byte	$0B
	.byte	$20
	.byte	$19
	.byte	$20
	.byte	$19
	.byte	$20
	.byte	$1D
	.byte	$1A
	.byte	$20
	.byte	$18
	.byte	$20
	.byte	$08
	.byte	$E0
	.byte	$E0
	.byte	$20
	.byte	$0B
	.byte	$40
	.byte	$01
	.byte	$00
	.byte	$2B
	.byte	$20
	.byte	$0B
	.byte	$20
	.byte	$0B
	.byte	$20
	.byte	$08
	.byte	$80
	.byte	$19
	.byte	$1C
	.byte	$20
	.byte	$08
	.byte	$20
	.byte	$18
	.byte	$20
	.byte	$08
	.byte	$E0
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$01
	.byte	$40
	.byte	$EE
	.byte	$AE
	.byte	$20
	.byte	$1C
	.byte	$1A
	.byte	$18
	.byte	$1D
	.byte	$1B
	.byte	$19
	.byte	$18
	.byte	$1A
	.byte	$19
	.byte	$18
	.byte	$1A
	.byte	$1B
	.byte	$19
	.byte	$1D
	.byte	$E0
	.byte	$80
	.byte	$01
	.byte	$60
	.byte	$EE
	.byte	$AE
	.byte	$20
	.byte	$18
	.byte	$19
	.byte	$1E
	.byte	$1A
	.byte	$18
	.byte	$1A
	.byte	$18
	.byte	$19
	.byte	$18
	.byte	$1A
	.byte	$1D
	.byte	$1C
	.byte	$1A
	.byte	$18
	.byte	$C0
	.byte	$01
	.byte	$E0
	.byte	$20
	.byte	$EE
	.byte	$AE
	.byte	$20
	.byte	$1A
	.byte	$19
	.byte	$1A
	.byte	$1B
	.byte	$1D
	.byte	$19
	.byte	$1A
	.byte	$18
	.byte	$19
	.byte	$1E
	.byte	$1A
	.byte	$19
	.byte	$18
	.byte	$1F
	.byte	$E0
	.byte	$C0
	.byte	$01
	.byte	$40
	.byte	$01
	.byte	$60
	.byte	$29
	.byte	$E0
	.byte	$A0
	.byte	$26
	.byte	$E0
	.byte	$E0
	.byte	$C0
	.byte	$E9
	.byte	$E9
	.byte	$35
	.byte	$34
	.byte	$12
	.byte	$14
	.byte	$E6
	.byte	$26
	.byte	$35
	.byte	$34
	.byte	$13
	.byte	$10
	.byte	$80
	.byte	$01
	.byte	$A0
	.byte	$14
	.byte	$10
	.byte	$11
	.byte	$20
	.byte	$08
	.byte	$AC
	.byte	$08
	.byte	$40
	.byte	$11
	.byte	$20
	.byte	$01
	.byte	$20
	.byte	$1B
	.byte	$1A
	.byte	$1B
	.byte	$1A
	.byte	$19
	.byte	$1A
	.byte	$E0
	.byte	$E0
	.byte	$40
	.byte	$01
	.byte	$80
	.byte	$08
	.byte	$AC
	.byte	$08
	.byte	$E0
	.byte	$00
	.byte	$1D
	.byte	$1C
	.byte	$1D
	.byte	$1C
	.byte	$1B
	.byte	$1C
	.byte	$E0
	.byte	$E0
	.byte	$A0
	.byte	$01
	.byte	$20
	.byte	$08
	.byte	$AC
	.byte	$08
	.byte	$E0
	.byte	$00
	.byte	$1F
	.byte	$1E
	.byte	$1F
	.byte	$1E
	.byte	$1D
	.byte	$1E
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$40
	.byte	$01
	.byte	$E0
	.byte	$00
	.byte	$01
	.byte	$60
_enems_strip_5:
	.byte	$79
	.byte	$44
	.byte	$00
	.byte	$68
	.byte	$43
	.byte	$02
	.byte	$65
	.byte	$B3
	.byte	$12
	.byte	$62
	.byte	$13
	.byte	$02
	.byte	$60
	.byte	$B3
	.byte	$12
	.byte	$5C
	.byte	$B3
	.byte	$12
	.byte	$56
	.byte	$43
	.byte	$02
	.byte	$56
	.byte	$13
	.byte	$02
	.byte	$53
	.byte	$E3
	.byte	$12
	.byte	$50
	.byte	$73
	.byte	$12
	.byte	$50
	.byte	$83
	.byte	$02
	.byte	$4A
	.byte	$43
	.byte	$02
	.byte	$47
	.byte	$E3
	.byte	$12
	.byte	$44
	.byte	$83
	.byte	$12
	.byte	$41
	.byte	$13
	.byte	$02
	.byte	$41
	.byte	$E3
	.byte	$12
	.byte	$41
	.byte	$B3
	.byte	$12
	.byte	$3E
	.byte	$B3
	.byte	$12
	.byte	$3B
	.byte	$72
	.byte	$11
	.byte	$2C
	.byte	$43
	.byte	$02
	.byte	$29
	.byte	$B3
	.byte	$12
	.byte	$26
	.byte	$43
	.byte	$02
	.byte	$23
	.byte	$E3
	.byte	$12
	.byte	$23
	.byte	$B3
	.byte	$12
	.byte	$20
	.byte	$13
	.byte	$02
	.byte	$20
	.byte	$73
	.byte	$02
	.byte	$20
	.byte	$83
	.byte	$12
	.byte	$1D
	.byte	$43
	.byte	$02
	.byte	$1A
	.byte	$73
	.byte	$02
	.byte	$1A
	.byte	$E3
	.byte	$12
	.byte	$17
	.byte	$12
	.byte	$02
	.byte	$14
	.byte	$E2
	.byte	$12
	.byte	$14
	.byte	$24
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_map_6:
	.byte	$EC
	.byte	$EC
	.byte	$35
	.byte	$34
	.byte	$12
	.byte	$14
	.byte	$E6
	.byte	$26
	.byte	$35
	.byte	$34
	.byte	$13
	.byte	$10
	.byte	$E0
	.byte	$60
	.byte	$14
	.byte	$10
	.byte	$11
	.byte	$20
	.byte	$EC
	.byte	$40
	.byte	$11
	.byte	$20
	.byte	$05
	.byte	$00
	.byte	$18
	.byte	$19
	.byte	$38
	.byte	$19
	.byte	$18
	.byte	$1A
	.byte	$19
	.byte	$00
	.byte	$05
	.byte	$40
	.byte	$05
	.byte	$E0
	.byte	$40
	.byte	$A3
	.byte	$00
	.byte	$EC
	.byte	$00
	.byte	$A2
	.byte	$00
	.byte	$3A
	.byte	$19
	.byte	$18
	.byte	$39
	.byte	$18
	.byte	$1A
	.byte	$00
	.byte	$A2
	.byte	$E0
	.byte	$20
	.byte	$A2
	.byte	$20
	.byte	$05
	.byte	$40
	.byte	$08
	.byte	$2C
	.byte	$00
	.byte	$62
	.byte	$01
	.byte	$02
	.byte	$43
	.byte	$00
	.byte	$05
	.byte	$00
	.byte	$08
	.byte	$38
	.byte	$00
	.byte	$E2
	.byte	$02
	.byte	$A0
	.byte	$03
	.byte	$E2
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$2C
	.byte	$20
	.byte	$22
	.byte	$01
	.byte	$C2
	.byte	$00
	.byte	$19
	.byte	$1A
	.byte	$19
	.byte	$20
	.byte	$A2
	.byte	$66
	.byte	$80
	.byte	$05
	.byte	$A2
	.byte	$60
	.byte	$2C
	.byte	$08
	.byte	$00
	.byte	$05
	.byte	$00
	.byte	$A2
	.byte	$05
	.byte	$40
	.byte	$1B
	.byte	$1A
	.byte	$1B
	.byte	$00
	.byte	$23
	.byte	$A2
	.byte	$E0
	.byte	$A2
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$05
	.byte	$2C
	.byte	$08
	.byte	$20
	.byte	$03
	.byte	$E2
	.byte	$20
	.byte	$18
	.byte	$1D
	.byte	$08
	.byte	$20
	.byte	$E2
	.byte	$02
	.byte	$C0
	.byte	$E2
	.byte	$02
	.byte	$2C
	.byte	$28
	.byte	$2C
	.byte	$00
	.byte	$42
	.byte	$01
	.byte	$82
	.byte	$18
	.byte	$1E
	.byte	$28
	.byte	$1E
	.byte	$1A
	.byte	$00
	.byte	$66
	.byte	$82
	.byte	$E0
	.byte	$40
	.byte	$42
	.byte	$2C
	.byte	$08
	.byte	$40
	.byte	$05
	.byte	$08
	.byte	$2C
	.byte	$40
	.byte	$42
	.byte	$3A
	.byte	$08
	.byte	$20
	.byte	$05
	.byte	$00
	.byte	$08
	.byte	$3A
	.byte	$40
	.byte	$42
	.byte	$E0
	.byte	$80
	.byte	$02
	.byte	$2C
	.byte	$00
	.byte	$05
	.byte	$20
	.byte	$2C
	.byte	$60
	.byte	$2C
	.byte	$00
	.byte	$02
	.byte	$1D
	.byte	$1C
	.byte	$60
	.byte	$1B
	.byte	$1A
	.byte	$60
	.byte	$38
	.byte	$00
	.byte	$02
	.byte	$23
	.byte	$E0
	.byte	$80
	.byte	$42
	.byte	$40
	.byte	$05
	.byte	$60
	.byte	$2C
	.byte	$40
	.byte	$42
	.byte	$23
	.byte	$05
	.byte	$03
	.byte	$60
	.byte	$38
	.byte	$40
	.byte	$82
	.byte	$23
	.byte	$E0
	.byte	$00
	.byte	$C2
	.byte	$20
	.byte	$2C
	.byte	$08
	.byte	$23
	.byte	$05
	.byte	$00
	.byte	$22
	.byte	$01
	.byte	$62
	.byte	$20
	.byte	$3A
	.byte	$08
	.byte	$22
	.byte	$23
	.byte	$C2
	.byte	$60
	.byte	$1B
	.byte	$E2
	.byte	$42
	.byte	$2C
	.byte	$40
	.byte	$E2
	.byte	$42
	.byte	$39
	.byte	$40
	.byte	$02
	.byte	$01
	.byte	$E2
	.byte	$02
	.byte	$40
	.byte	$05
	.byte	$00
	.byte	$E2
	.byte	$02
	.byte	$2C
	.byte	$08
	.byte	$00
	.byte	$2C
	.byte	$08
	.byte	$E2
	.byte	$02
	.byte	$19
	.byte	$08
	.byte	$18
	.byte	$00
	.byte	$3A
	.byte	$03
	.byte	$E2
	.byte	$02
	.byte	$00
	.byte	$1D
	.byte	$60
	.byte	$82
	.byte	$46
	.byte	$2C
	.byte	$A0
	.byte	$2C
	.byte	$46
	.byte	$40
	.byte	$18
	.byte	$1A
	.byte	$A0
	.byte	$18
	.byte	$19
	.byte	$E0
	.byte	$20
	.byte	$05
	.byte	$E0
	.byte	$A3
	.byte	$00
	.byte	$2C
	.byte	$08
	.byte	$40
	.byte	$2C
	.byte	$00
	.byte	$42
	.byte	$01
	.byte	$22
	.byte	$00
	.byte	$1A
	.byte	$1D
	.byte	$08
	.byte	$60
	.byte	$18
	.byte	$00
	.byte	$A2
	.byte	$E0
	.byte	$20
	.byte	$A2
	.byte	$43
	.byte	$00
	.byte	$08
	.byte	$2C
	.byte	$00
	.byte	$05
	.byte	$00
	.byte	$E2
	.byte	$02
	.byte	$20
	.byte	$1A
	.byte	$19
	.byte	$40
	.byte	$E2
	.byte	$02
	.byte	$C0
	.byte	$02
	.byte	$01
	.byte	$42
	.byte	$2C
	.byte	$26
	.byte	$2C
	.byte	$80
	.byte	$82
	.byte	$19
	.byte	$18
	.byte	$20
	.byte	$1A
	.byte	$19
	.byte	$80
	.byte	$82
	.byte	$20
	.byte	$05
	.byte	$E0
	.byte	$82
	.byte	$20
	.byte	$2C
	.byte	$08
	.byte	$A0
	.byte	$62
	.byte	$01
	.byte	$20
	.byte	$19
	.byte	$18
	.byte	$1A
	.byte	$A0
	.byte	$82
	.byte	$E0
	.byte	$40
	.byte	$EB
	.byte	$EB
	.byte	$1D
	.byte	$19
	.byte	$1A
	.byte	$1D
	.byte	$19
	.byte	$1A
	.byte	$1D
	.byte	$19
	.byte	$1A
	.byte	$1D
	.byte	$19
	.byte	$1A
	.byte	$1D
	.byte	$19
	.byte	$1A
	.byte	$1D
	.byte	$60
	.byte	$05
	.byte	$80
	.byte	$05
	.byte	$80
	.byte	$03
	.byte	$28
	.byte	$E3
	.byte	$23
	.byte	$28
	.byte	$03
	.byte	$02
	.byte	$18
	.byte	$E0
	.byte	$60
	.byte	$18
	.byte	$22
	.byte	$18
	.byte	$E0
	.byte	$60
	.byte	$18
	.byte	$22
	.byte	$08
	.byte	$E0
	.byte	$60
	.byte	$08
	.byte	$22
	.byte	$18
	.byte	$E0
	.byte	$60
	.byte	$18
	.byte	$22
	.byte	$18
	.byte	$E0
	.byte	$60
	.byte	$18
	.byte	$22
	.byte	$00
	.byte	$08
	.byte	$E0
	.byte	$20
	.byte	$08
	.byte	$00
	.byte	$22
	.byte	$00
	.byte	$18
	.byte	$E0
	.byte	$20
	.byte	$18
	.byte	$00
	.byte	$22
	.byte	$00
	.byte	$18
	.byte	$E0
	.byte	$20
	.byte	$18
	.byte	$00
	.byte	$22
	.byte	$20
	.byte	$EB
	.byte	$2B
	.byte	$20
	.byte	$22
	.byte	$20
	.byte	$18
	.byte	$1A
	.byte	$1B
	.byte	$19
	.byte	$1D
	.byte	$1A
	.byte	$1B
	.byte	$1A
	.byte	$1B
	.byte	$1C
	.byte	$20
	.byte	$22
	.byte	$E0
	.byte	$A0
	.byte	$02
	.byte	$2D
	.byte	$08
	.byte	$00
	.byte	$05
	.byte	$E0
	.byte	$08
	.byte	$2D
	.byte	$18
	.byte	$19
	.byte	$18
	.byte	$40
	.byte	$61
	.byte	$00
	.byte	$05
	.byte	$00
	.byte	$19
	.byte	$1A
	.byte	$18
	.byte	$C0
	.byte	$21
	.byte	$C0
	.byte	$2D
	.byte	$08
	.byte	$80
	.byte	$05
	.byte	$60
	.byte	$08
	.byte	$2D
	.byte	$18
	.byte	$1A
	.byte	$19
	.byte	$E0
	.byte	$20
	.byte	$1D
	.byte	$18
	.byte	$19
	.byte	$A0
	.byte	$01
	.byte	$20
	.byte	$01
	.byte	$A0
	.byte	$2D
	.byte	$08
	.byte	$20
	.byte	$01
	.byte	$60
	.byte	$01
	.byte	$20
	.byte	$08
	.byte	$2D
	.byte	$1E
	.byte	$1A
	.byte	$1B
	.byte	$E0
	.byte	$20
	.byte	$1E
	.byte	$19
	.byte	$18
	.byte	$C0
	.byte	$05
	.byte	$E0
	.byte	$00
	.byte	$08
	.byte	$2D
	.byte	$08
	.byte	$00
	.byte	$63
	.byte	$00
	.byte	$08
	.byte	$2D
	.byte	$08
	.byte	$20
	.byte	$1B
	.byte	$1A
	.byte	$18
	.byte	$20
	.byte	$62
	.byte	$05
	.byte	$00
	.byte	$1A
	.byte	$18
	.byte	$1F
	.byte	$00
	.byte	$A3
	.byte	$62
	.byte	$A3
	.byte	$42
	.byte	$08
	.byte	$EC
	.byte	$08
	.byte	$A2
	.byte	$08
	.byte	$18
	.byte	$1A
	.byte	$1D
	.byte	$19
	.byte	$1D
	.byte	$19
	.byte	$1A
	.byte	$19
	.byte	$08
	.byte	$A2
	.byte	$08
	.byte	$E0
	.byte	$08
	.byte	$62
	.byte	$01
	.byte	$02
	.byte	$08
	.byte	$EC
	.byte	$08
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$46
	.byte	$1A
	.byte	$18
	.byte	$1E
	.byte	$78
	.byte	$1D
	.byte	$18
	.byte	$1A
	.byte	$46
	.byte	$E0
	.byte	$E0
	.byte	$20
	.byte	$2D
	.byte	$08
	.byte	$40
	.byte	$05
	.byte	$20
	.byte	$08
	.byte	$2D
	.byte	$60
	.byte	$1A
	.byte	$1B
	.byte	$08
	.byte	$20
	.byte	$05
	.byte	$40
	.byte	$08
	.byte	$1B
	.byte	$1A
	.byte	$E0
	.byte	$E0
	.byte	$20
	.byte	$2D
	.byte	$20
	.byte	$01
	.byte	$20
	.byte	$2D
	.byte	$20
	.byte	$01
	.byte	$20
	.byte	$2D
	.byte	$1C
	.byte	$1D
	.byte	$80
	.byte	$1A
	.byte	$19
	.byte	$80
	.byte	$1D
	.byte	$1C
	.byte	$E0
	.byte	$E0
	.byte	$40
	.byte	$08
	.byte	$2D
	.byte	$60
	.byte	$2D
	.byte	$08
	.byte	$A0
	.byte	$08
	.byte	$1E
	.byte	$1A
	.byte	$60
	.byte	$1A
	.byte	$1E
	.byte	$08
	.byte	$00
	.byte	$05
	.byte	$20
	.byte	$05
	.byte	$00
	.byte	$1A
	.byte	$E0
	.byte	$60
	.byte	$43
	.byte	$E0
	.byte	$20
	.byte	$43
	.byte	$42
	.byte	$20
	.byte	$08
	.byte	$6C
	.byte	$08
	.byte	$20
	.byte	$A2
	.byte	$00
	.byte	$05
	.byte	$1A
	.byte	$19
	.byte	$38
	.byte	$19
	.byte	$1A
	.byte	$20
	.byte	$A2
	.byte	$05
	.byte	$E0
	.byte	$00
	.byte	$A2
	.byte	$A0
	.byte	$05
	.byte	$40
	.byte	$A2
	.byte	$1E
	.byte	$20
	.byte	$1E
	.byte	$20
	.byte	$1E
	.byte	$20
	.byte	$1E
	.byte	$A2
	.byte	$A0
	.byte	$05
	.byte	$40
	.byte	$A2
	.byte	$C0
	.byte	$05
	.byte	$20
	.byte	$A2
	.byte	$1E
	.byte	$20
	.byte	$1E
	.byte	$20
	.byte	$1E
	.byte	$20
	.byte	$1E
	.byte	$A2
	.byte	$20
	.byte	$05
	.byte	$C0
	.byte	$42
	.byte	$08
	.byte	$EC
	.byte	$AC
	.byte	$48
	.byte	$19
	.byte	$38
	.byte	$1A
	.byte	$1B
	.byte	$1D
	.byte	$1B
	.byte	$1D
	.byte	$1A
	.byte	$38
	.byte	$19
	.byte	$48
	.byte	$05
	.byte	$E3
	.byte	$63
	.byte	$05
	.byte	$08
	.byte	$1D
	.byte	$03
	.byte	$E2
	.byte	$62
	.byte	$03
	.byte	$1D
	.byte	$03
	.byte	$E2
	.byte	$A2
	.byte	$03
	.byte	$EC
	.byte	$EC
	.byte	$35
	.byte	$34
	.byte	$12
	.byte	$14
	.byte	$E0
	.byte	$20
	.byte	$35
	.byte	$34
	.byte	$13
	.byte	$10
	.byte	$E0
	.byte	$60
	.byte	$14
	.byte	$10
	.byte	$11
	.byte	$00
	.byte	$05
	.byte	$00
	.byte	$48
	.byte	$2D
	.byte	$28
	.byte	$00
	.byte	$05
	.byte	$00
	.byte	$11
	.byte	$80
	.byte	$1C
	.byte	$1B
	.byte	$1E
	.byte	$1B
	.byte	$1E
	.byte	$1B
	.byte	$1F
	.byte	$E0
	.byte	$E0
	.byte	$60
	.byte	$05
	.byte	$20
	.byte	$05
	.byte	$00
	.byte	$08
	.byte	$2D
	.byte	$68
	.byte	$E0
	.byte	$00
	.byte	$1E
	.byte	$1D
	.byte	$1C
	.byte	$1D
	.byte	$1C
	.byte	$1D
	.byte	$1C
	.byte	$E0
	.byte	$E0
	.byte	$80
	.byte	$05
	.byte	$40
	.byte	$CB
	.byte	$E0
	.byte	$00
	.byte	$1F
	.byte	$1E
	.byte	$1F
	.byte	$1E
	.byte	$1F
	.byte	$1E
	.byte	$1D
	.byte	$40
	.byte	$1F
	.byte	$40
	.byte	$1F
	.byte	$E0
	.byte	$60
	.byte	$1F
	.byte	$00
	.byte	$1F
	.byte	$40
	.byte	$E3
	.byte	$E3
	.byte	$C2
_enems_strip_6:
	.byte	$70
	.byte	$24
	.byte	$01
	.byte	$70
	.byte	$34
	.byte	$01
	.byte	$61
	.byte	$24
	.byte	$04
	.byte	$60
	.byte	$D3
	.byte	$12
	.byte	$60
	.byte	$E3
	.byte	$12
	.byte	$53
	.byte	$33
	.byte	$02
	.byte	$51
	.byte	$E3
	.byte	$12
	.byte	$4A
	.byte	$83
	.byte	$02
	.byte	$41
	.byte	$54
	.byte	$00
	.byte	$41
	.byte	$A4
	.byte	$00
	.byte	$35
	.byte	$42
	.byte	$02
	.byte	$32
	.byte	$B2
	.byte	$12
	.byte	$23
	.byte	$33
	.byte	$12
	.byte	$23
	.byte	$C3
	.byte	$02
	.byte	$1D
	.byte	$74
	.byte	$00
	.byte	$18
	.byte	$37
	.byte	$C3
	.byte	$15
	.byte	$C7
	.byte	$3C
	.byte	$10
	.byte	$94
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_map_8:
	.byte	$EA
	.byte	$EA
	.byte	$35
	.byte	$34
	.byte	$12
	.byte	$14
	.byte	$E0
	.byte	$20
	.byte	$35
	.byte	$34
	.byte	$13
	.byte	$10
	.byte	$E0
	.byte	$60
	.byte	$14
	.byte	$10
	.byte	$11
	.byte	$20
	.byte	$0B
	.byte	$ED
	.byte	$20
	.byte	$11
	.byte	$80
	.byte	$1A
	.byte	$19
	.byte	$7A
	.byte	$19
	.byte	$1A
	.byte	$80
	.byte	$01
	.byte	$02
	.byte	$E0
	.byte	$E0
	.byte	$0B
	.byte	$ED
	.byte	$E0
	.byte	$19
	.byte	$1B
	.byte	$79
	.byte	$1B
	.byte	$19
	.byte	$E0
	.byte	$E0
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$60
	.byte	$0B
	.byte	$ED
	.byte	$E0
	.byte	$F8
	.byte	$E0
	.byte	$E0
	.byte	$E3
	.byte	$C3
	.byte	$0B
	.byte	$1B
	.byte	$FA
	.byte	$BA
	.byte	$1B
	.byte	$E0
	.byte	$E0
	.byte	$AD
	.byte	$43
	.byte	$40
	.byte	$01
	.byte	$02
	.byte	$20
	.byte	$18
	.byte	$1A
	.byte	$19
	.byte	$1D
	.byte	$18
	.byte	$1B
	.byte	$1A
	.byte	$19
	.byte	$18
	.byte	$E0
	.byte	$E0
	.byte	$C0
	.byte	$0B
	.byte	$E3
	.byte	$C3
	.byte	$1B
	.byte	$F9
	.byte	$B9
	.byte	$1B
	.byte	$E0
	.byte	$E0
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$60
	.byte	$A3
	.byte	$4D
	.byte	$C0
	.byte	$1C
	.byte	$1B
	.byte	$19
	.byte	$1A
	.byte	$19
	.byte	$1A
	.byte	$1B
	.byte	$19
	.byte	$1A
	.byte	$E0
	.byte	$E0
	.byte	$E3
	.byte	$C3
	.byte	$0B
	.byte	$1B
	.byte	$FA
	.byte	$BA
	.byte	$1B
	.byte	$E0
	.byte	$80
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$E3
	.byte	$03
	.byte	$C0
	.byte	$18
	.byte	$1A
	.byte	$19
	.byte	$1D
	.byte	$18
	.byte	$1B
	.byte	$1A
	.byte	$19
	.byte	$18
	.byte	$E0
	.byte	$E0
	.byte	$C0
	.byte	$0B
	.byte	$E3
	.byte	$C3
	.byte	$1B
	.byte	$F9
	.byte	$B9
	.byte	$1B
	.byte	$E0
	.byte	$E0
	.byte	$C0
	.byte	$E3
	.byte	$03
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$60
	.byte	$18
	.byte	$19
	.byte	$1A
	.byte	$1C
	.byte	$19
	.byte	$18
	.byte	$1B
	.byte	$1A
	.byte	$19
	.byte	$E0
	.byte	$E0
	.byte	$E3
	.byte	$C3
	.byte	$0B
	.byte	$1B
	.byte	$E0
	.byte	$A0
	.byte	$1B
	.byte	$E0
	.byte	$E0
	.byte	$E3
	.byte	$03
	.byte	$40
	.byte	$01
	.byte	$02
	.byte	$20
	.byte	$1C
	.byte	$1B
	.byte	$19
	.byte	$1A
	.byte	$19
	.byte	$1A
	.byte	$1B
	.byte	$19
	.byte	$1A
	.byte	$E0
	.byte	$E0
	.byte	$C0
	.byte	$E3
	.byte	$E3
	.byte	$F8
	.byte	$F8
	.byte	$D8
	.byte	$1E
	.byte	$F8
	.byte	$18
	.byte	$2B
	.byte	$98
	.byte	$1E
	.byte	$78
	.byte	$2B
	.byte	$F8
	.byte	$F8
	.byte	$B8
	.byte	$AB
	.byte	$38
	.byte	$1E
	.byte	$58
	.byte	$1E
	.byte	$F8
	.byte	$F8
	.byte	$F8
	.byte	$D8
	.byte	$2B
	.byte	$78
	.byte	$1E
	.byte	$98
	.byte	$2B
	.byte	$38
	.byte	$1D
	.byte	$F8
	.byte	$78
	.byte	$1D
	.byte	$F8
	.byte	$F8
	.byte	$18
	.byte	$E3
	.byte	$E3
	.byte	$39
	.byte	$3A
	.byte	$39
	.byte	$3A
	.byte	$39
	.byte	$3A
	.byte	$39
	.byte	$3A
	.byte	$E0
	.byte	$E0
	.byte	$0B
	.byte	$0D
	.byte	$60
	.byte	$01
	.byte	$02
	.byte	$E0
	.byte	$3D
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$20
	.byte	$01
	.byte	$02
	.byte	$20
	.byte	$E3
	.byte	$E3
	.byte	$3A
	.byte	$39
	.byte	$3A
	.byte	$39
	.byte	$3A
	.byte	$39
	.byte	$3A
	.byte	$19
	.byte	$08
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$20
	.byte	$01
	.byte	$02
	.byte	$E0
	.byte	$E0
	.byte	$20
	.byte	$0B
	.byte	$0D
	.byte	$E0
	.byte	$A0
	.byte	$3D
	.byte	$40
	.byte	$01
	.byte	$02
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$40
	.byte	$E3
	.byte	$E3
	.byte	$E0
	.byte	$E0
	.byte	$20
	.byte	$03
	.byte	$E0
	.byte	$20
	.byte	$03
	.byte	$60
	.byte	$03
	.byte	$C0
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$03
	.byte	$60
	.byte	$1D
	.byte	$E0
	.byte	$20
	.byte	$1D
	.byte	$C0
	.byte	$03
	.byte	$60
	.byte	$03
	.byte	$E0
	.byte	$20
	.byte	$03
	.byte	$60
	.byte	$03
	.byte	$E0
	.byte	$20
	.byte	$1D
	.byte	$60
	.byte	$1D
	.byte	$C0
	.byte	$03
	.byte	$E0
	.byte	$20
	.byte	$03
	.byte	$60
	.byte	$03
	.byte	$20
	.byte	$01
	.byte	$02
	.byte	$A0
	.byte	$03
	.byte	$60
	.byte	$1D
	.byte	$E0
	.byte	$20
	.byte	$1D
	.byte	$C0
	.byte	$03
	.byte	$60
	.byte	$03
	.byte	$E0
	.byte	$20
	.byte	$03
	.byte	$60
	.byte	$03
	.byte	$E0
	.byte	$20
	.byte	$1D
	.byte	$60
	.byte	$1D
	.byte	$E0
	.byte	$E0
	.byte	$C0
	.byte	$03
	.byte	$E0
	.byte	$20
	.byte	$03
	.byte	$60
	.byte	$03
	.byte	$80
	.byte	$01
	.byte	$02
	.byte	$40
	.byte	$03
	.byte	$60
	.byte	$1D
	.byte	$E0
	.byte	$20
	.byte	$1D
	.byte	$20
	.byte	$EB
	.byte	$EB
	.byte	$19
	.byte	$23
	.byte	$18
	.byte	$1A
	.byte	$19
	.byte	$1A
	.byte	$18
	.byte	$19
	.byte	$1A
	.byte	$38
	.byte	$19
	.byte	$1A
	.byte	$38
	.byte	$00
	.byte	$23
	.byte	$E0
	.byte	$A0
	.byte	$23
	.byte	$E0
	.byte	$01
	.byte	$02
	.byte	$60
	.byte	$23
	.byte	$20
	.byte	$01
	.byte	$02
	.byte	$E0
	.byte	$20
	.byte	$23
	.byte	$E0
	.byte	$A0
	.byte	$E3
	.byte	$A3
	.byte	$40
	.byte	$1D
	.byte	$1C
	.byte	$1B
	.byte	$1D
	.byte	$1C
	.byte	$1B
	.byte	$1D
	.byte	$1C
	.byte	$1B
	.byte	$1D
	.byte	$1C
	.byte	$23
	.byte	$E0
	.byte	$A0
	.byte	$23
	.byte	$20
	.byte	$01
	.byte	$02
	.byte	$E0
	.byte	$20
	.byte	$23
	.byte	$E0
	.byte	$A0
	.byte	$23
	.byte	$E0
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$40
	.byte	$23
	.byte	$E0
	.byte	$A0
	.byte	$23
	.byte	$00
	.byte	$EB
	.byte	$EB
	.byte	$18
	.byte	$1B
	.byte	$1A
	.byte	$18
	.byte	$1B
	.byte	$18
	.byte	$1A
	.byte	$18
	.byte	$1A
	.byte	$1B
	.byte	$58
	.byte	$1A
	.byte	$18
	.byte	$1B
	.byte	$E0
	.byte	$E0
	.byte	$20
	.byte	$2B
	.byte	$E0
	.byte	$2B
	.byte	$60
	.byte	$1C
	.byte	$1A
	.byte	$80
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$1D
	.byte	$1A
	.byte	$E0
	.byte	$E0
	.byte	$60
	.byte	$2B
	.byte	$E0
	.byte	$2B
	.byte	$60
	.byte	$1A
	.byte	$1E
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$80
	.byte	$1B
	.byte	$1C
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$00
	.byte	$2B
	.byte	$E0
	.byte	$A0
	.byte	$1A
	.byte	$1B
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$00
	.byte	$2B
	.byte	$E0
	.byte	$2B
	.byte	$60
	.byte	$1B
	.byte	$1D
	.byte	$E0
	.byte	$1A
	.byte	$1B
	.byte	$20
	.byte	$0B
	.byte	$C0
	.byte	$01
	.byte	$02
	.byte	$80
	.byte	$0B
	.byte	$1E
	.byte	$E0
	.byte	$A0
	.byte	$1E
	.byte	$EA
	.byte	$EA
	.byte	$35
	.byte	$34
	.byte	$12
	.byte	$14
	.byte	$E0
	.byte	$28
	.byte	$35
	.byte	$34
	.byte	$13
	.byte	$10
	.byte	$E0
	.byte	$00
	.byte	$08
	.byte	$20
	.byte	$14
	.byte	$10
	.byte	$11
	.byte	$E0
	.byte	$80
	.byte	$11
	.byte	$60
	.byte	$A8
	.byte	$E0
	.byte	$20
	.byte	$08
	.byte	$1F
	.byte	$1E
	.byte	$1F
	.byte	$1E
	.byte	$08
	.byte	$0D
	.byte	$0B
	.byte	$0D
	.byte	$01
	.byte	$02
	.byte	$80
	.byte	$08
	.byte	$63
	.byte	$08
	.byte	$18
	.byte	$19
	.byte	$1A
	.byte	$C0
	.byte	$08
	.byte	$63
	.byte	$08
	.byte	$E0
	.byte	$20
	.byte	$08
	.byte	$63
	.byte	$08
	.byte	$0D
	.byte	$0B
	.byte	$0D
	.byte	$80
	.byte	$01
	.byte	$02
	.byte	$19
	.byte	$1C
	.byte	$19
	.byte	$18
	.byte	$1B
	.byte	$19
	.byte	$1B
	.byte	$1C
	.byte	$1B
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$60
	.byte	$01
	.byte	$02
	.byte	$E0
	.byte	$E0
	.byte	$60
	.byte	$01
	.byte	$02
	.byte	$E0
	.byte	$60
_enems_strip_8:
	.byte	$38
	.byte	$42
	.byte	$01
	.byte	$35
	.byte	$E2
	.byte	$11
	.byte	$32
	.byte	$62
	.byte	$01
	.byte	$10
	.byte	$33
	.byte	$02
	.byte	$10
	.byte	$C3
	.byte	$12
	.byte	$00
	.byte	$00
	.byte	$00
_map_9:
	.byte	$ED
	.byte	$ED
	.byte	$08
	.byte	$15
	.byte	$34
	.byte	$12
	.byte	$14
	.byte	$E3
	.byte	$23
	.byte	$35
	.byte	$34
	.byte	$13
	.byte	$10
	.byte	$E0
	.byte	$60
	.byte	$14
	.byte	$10
	.byte	$11
	.byte	$E0
	.byte	$40
	.byte	$08
	.byte	$00
	.byte	$11
	.byte	$20
	.byte	$E8
	.byte	$48
	.byte	$E0
	.byte	$E7
	.byte	$E0
	.byte	$E0
	.byte	$E8
	.byte	$48
	.byte	$60
	.byte	$08
	.byte	$A0
	.byte	$67
	.byte	$E0
	.byte	$E0
	.byte	$A0
	.byte	$08
	.byte	$6C
	.byte	$08
	.byte	$60
	.byte	$08
	.byte	$6C
	.byte	$08
	.byte	$00
	.byte	$78
	.byte	$1D
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$20
	.byte	$78
	.byte	$E0
	.byte	$E0
	.byte	$00
	.byte	$08
	.byte	$60
	.byte	$08
	.byte	$EC
	.byte	$2C
	.byte	$80
	.byte	$08
	.byte	$E7
	.byte	$27
	.byte	$80
	.byte	$08
	.byte	$E0
	.byte	$20
	.byte	$08
	.byte	$60
	.byte	$08
	.byte	$60
	.byte	$08
	.byte	$60
	.byte	$08
	.byte	$80
	.byte	$18
	.byte	$60
	.byte	$18
	.byte	$60
	.byte	$1F
	.byte	$E0
	.byte	$E0
	.byte	$A8
	.byte	$60
	.byte	$08
	.byte	$60
	.byte	$08
	.byte	$87
	.byte	$80
	.byte	$18
	.byte	$60
	.byte	$1D
	.byte	$E0
	.byte	$E0
	.byte	$08
	.byte	$60
	.byte	$08
	.byte	$60
	.byte	$AC
	.byte	$1F
	.byte	$E0
	.byte	$20
	.byte	$87
	.byte	$E0
	.byte	$E0
	.byte	$AC
	.byte	$60
	.byte	$08
	.byte	$60
	.byte	$08
	.byte	$B8
	.byte	$60
	.byte	$1D
	.byte	$60
	.byte	$18
	.byte	$E0
	.byte	$80
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$A8
	.byte	$60
	.byte	$08
	.byte	$60
	.byte	$08
	.byte	$B8
	.byte	$60
	.byte	$18
	.byte	$60
	.byte	$18
	.byte	$E0
	.byte	$E0
	.byte	$28
	.byte	$80
	.byte	$28
	.byte	$80
	.byte	$28
	.byte	$1A
	.byte	$19
	.byte	$80
	.byte	$27
	.byte	$80
	.byte	$19
	.byte	$1A
	.byte	$E0
	.byte	$E0
	.byte	$40
	.byte	$48
	.byte	$60
	.byte	$48
	.byte	$A0
	.byte	$1C
	.byte	$1D
	.byte	$19
	.byte	$60
	.byte	$19
	.byte	$1D
	.byte	$1A
	.byte	$E0
	.byte	$E0
	.byte	$40
	.byte	$28
	.byte	$80
	.byte	$28
	.byte	$80
	.byte	$28
	.byte	$1D
	.byte	$A0
	.byte	$19
	.byte	$1A
	.byte	$80
	.byte	$27
	.byte	$E0
	.byte	$E0
	.byte	$40
	.byte	$48
	.byte	$60
	.byte	$48
	.byte	$A0
	.byte	$47
	.byte	$60
	.byte	$1D
	.byte	$1C
	.byte	$19
	.byte	$E0
	.byte	$E0
	.byte	$40
	.byte	$28
	.byte	$80
	.byte	$28
	.byte	$80
	.byte	$28
	.byte	$1E
	.byte	$1F
	.byte	$80
	.byte	$27
	.byte	$80
	.byte	$1D
	.byte	$1E
	.byte	$E0
	.byte	$E0
	.byte	$40
	.byte	$48
	.byte	$60
	.byte	$48
	.byte	$A0
	.byte	$1A
	.byte	$18
	.byte	$19
	.byte	$60
	.byte	$19
	.byte	$1C
	.byte	$19
	.byte	$E0
	.byte	$E0
	.byte	$40
	.byte	$28
	.byte	$80
	.byte	$28
	.byte	$80
	.byte	$28
	.byte	$27
	.byte	$80
	.byte	$1D
	.byte	$1C
	.byte	$80
	.byte	$27
	.byte	$E0
	.byte	$E0
	.byte	$40
	.byte	$48
	.byte	$60
	.byte	$48
	.byte	$A0
	.byte	$1E
	.byte	$18
	.byte	$1A
	.byte	$60
	.byte	$1A
	.byte	$18
	.byte	$1D
	.byte	$E0
	.byte	$E0
	.byte	$60
	.byte	$01
	.byte	$02
	.byte	$60
	.byte	$2D
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$80
	.byte	$01
	.byte	$02
	.byte	$C0
	.byte	$23
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$40
	.byte	$23
	.byte	$40
	.byte	$0D
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$20
	.byte	$23
	.byte	$60
	.byte	$01
	.byte	$02
	.byte	$E0
	.byte	$E0
	.byte	$60
	.byte	$0D
	.byte	$E0
	.byte	$E0
	.byte	$40
	.byte	$23
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$C0
	.byte	$ED
	.byte	$ED
	.byte	$A7
	.byte	$60
	.byte	$A7
	.byte	$E0
	.byte	$E0
	.byte	$C0
	.byte	$23
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$E0
	.byte	$E0
	.byte	$40
	.byte	$23
	.byte	$40
	.byte	$01
	.byte	$02
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$20
	.byte	$ED
	.byte	$ED
	.byte	$A7
	.byte	$60
	.byte	$A7
	.byte	$E0
	.byte	$E0
	.byte	$29
	.byte	$E0
	.byte	$60
	.byte	$29
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$20
	.byte	$E9
	.byte	$69
	.byte	$A0
	.byte	$E7
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$29
	.byte	$60
	.byte	$29
	.byte	$E0
	.byte	$1A
	.byte	$18
	.byte	$60
	.byte	$18
	.byte	$19
	.byte	$80
	.byte	$01
	.byte	$02
	.byte	$E0
	.byte	$E0
	.byte	$40
	.byte	$69
	.byte	$E0
	.byte	$60
	.byte	$1A
	.byte	$18
	.byte	$19
	.byte	$1B
	.byte	$40
	.byte	$01
	.byte	$02
	.byte	$E0
	.byte	$E0
	.byte	$80
	.byte	$29
	.byte	$60
	.byte	$29
	.byte	$E0
	.byte	$19
	.byte	$1A
	.byte	$60
	.byte	$19
	.byte	$18
	.byte	$E0
	.byte	$E0
	.byte	$80
	.byte	$E9
	.byte	$A9
	.byte	$20
	.byte	$87
	.byte	$00
	.byte	$39
	.byte	$00
	.byte	$87
	.byte	$E0
	.byte	$E0
	.byte	$20
	.byte	$09
	.byte	$20
	.byte	$01
	.byte	$02
	.byte	$E0
	.byte	$09
	.byte	$20
	.byte	$1E
	.byte	$E0
	.byte	$60
	.byte	$1E
	.byte	$E0
	.byte	$20
	.byte	$01
	.byte	$02
	.byte	$C0
	.byte	$09
	.byte	$E0
	.byte	$20
	.byte	$09
	.byte	$60
	.byte	$1E
	.byte	$E0
	.byte	$20
	.byte	$1E
	.byte	$E0
	.byte	$E0
	.byte	$80
	.byte	$09
	.byte	$E0
	.byte	$09
	.byte	$A0
	.byte	$1E
	.byte	$40
	.byte	$01
	.byte	$02
	.byte	$40
	.byte	$1E
	.byte	$E0
	.byte	$E0
	.byte	$C0
	.byte	$09
	.byte	$A0
	.byte	$09
	.byte	$E0
	.byte	$1E
	.byte	$A0
	.byte	$1E
	.byte	$E0
	.byte	$40
	.byte	$29
	.byte	$E0
	.byte	$A0
	.byte	$3A
	.byte	$E0
	.byte	$E0
	.byte	$C0
	.byte	$ED
	.byte	$ED
	.byte	$35
	.byte	$34
	.byte	$12
	.byte	$14
	.byte	$A3
	.byte	$08
	.byte	$43
	.byte	$35
	.byte	$34
	.byte	$13
	.byte	$10
	.byte	$E0
	.byte	$60
	.byte	$14
	.byte	$10
	.byte	$11
	.byte	$E0
	.byte	$80
	.byte	$11
	.byte	$E0
	.byte	$00
	.byte	$08
	.byte	$E0
	.byte	$E0
	.byte	$C0
	.byte	$EC
	.byte	$E0
	.byte	$E4
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$80
	.byte	$01
	.byte	$02
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$20
	.byte	$01
	.byte	$02
	.byte	$00
_enems_strip_9:
	.byte	$45
	.byte	$77
	.byte	$B7
	.byte	$42
	.byte	$87
	.byte	$48
	.byte	$3F
	.byte	$47
	.byte	$B4
	.byte	$3C
	.byte	$27
	.byte	$D2
	.byte	$36
	.byte	$87
	.byte	$C8
	.byte	$33
	.byte	$87
	.byte	$48
	.byte	$19
	.byte	$62
	.byte	$02
	.byte	$16
	.byte	$A2
	.byte	$12
	.byte	$06
	.byte	$71
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_palcuts0:
	.byte	$0F
	.byte	$01
	.byte	$12
	.byte	$30
	.byte	$0F
	.byte	$05
	.byte	$25
	.byte	$34
	.byte	$0F
	.byte	$0B
	.byte	$29
	.byte	$39
	.byte	$0F
	.byte	$05
	.byte	$16
	.byte	$34
_palcuts1:
	.byte	$0F
	.byte	$07
	.byte	$18
	.byte	$27
	.byte	$0F
	.byte	$05
	.byte	$25
	.byte	$34
	.byte	$0F
	.byte	$0B
	.byte	$29
	.byte	$39
	.byte	$0F
	.byte	$05
	.byte	$16
	.byte	$34
_palss0:
	.byte	$0C
	.byte	$0F
	.byte	$25
	.byte	$34
	.byte	$0C
	.byte	$0F
	.byte	$16
	.byte	$27
	.byte	$0C
	.byte	$0F
	.byte	$19
	.byte	$29
	.byte	$0C
	.byte	$0F
	.byte	$23
	.byte	$38
_paltitle:
	.byte	$02
	.byte	$0F
	.byte	$27
	.byte	$39
	.byte	$02
	.byte	$04
	.byte	$14
	.byte	$24
	.byte	$02
	.byte	$2D
	.byte	$10
	.byte	$20
	.byte	$02
	.byte	$16
	.byte	$28
	.byte	$37
_palts0:
	.byte	$0C
	.byte	$07
	.byte	$28
	.byte	$37
	.byte	$0C
	.byte	$0B
	.byte	$19
	.byte	$26
	.byte	$0C
	.byte	$16
	.byte	$29
	.byte	$37
	.byte	$0C
	.byte	$1C
	.byte	$21
	.byte	$37
_palts1:
	.byte	$0F
	.byte	$07
	.byte	$17
	.byte	$28
	.byte	$0F
	.byte	$0B
	.byte	$1A
	.byte	$27
	.byte	$0F
	.byte	$16
	.byte	$29
	.byte	$37
	.byte	$0F
	.byte	$16
	.byte	$28
	.byte	$39
_palts2:
	.byte	$01
	.byte	$04
	.byte	$10
	.byte	$31
	.byte	$01
	.byte	$0B
	.byte	$1B
	.byte	$24
	.byte	$01
	.byte	$16
	.byte	$29
	.byte	$37
	.byte	$01
	.byte	$11
	.byte	$21
	.byte	$30
_palts3:
	.byte	$03
	.byte	$07
	.byte	$17
	.byte	$38
	.byte	$03
	.byte	$08
	.byte	$19
	.byte	$23
	.byte	$03
	.byte	$16
	.byte	$29
	.byte	$37
	.byte	$03
	.byte	$0C
	.byte	$23
	.byte	$37
_palts4:
	.byte	$08
	.byte	$1D
	.byte	$18
	.byte	$39
	.byte	$08
	.byte	$17
	.byte	$18
	.byte	$27
	.byte	$08
	.byte	$16
	.byte	$29
	.byte	$37
	.byte	$08
	.byte	$1D
	.byte	$19
	.byte	$00
_palts5:
	.byte	$0F
	.byte	$0C
	.byte	$00
	.byte	$10
	.byte	$0F
	.byte	$0B
	.byte	$1A
	.byte	$28
	.byte	$0F
	.byte	$16
	.byte	$29
	.byte	$37
	.byte	$0F
	.byte	$16
	.byte	$27
	.byte	$39
_palts6:
	.byte	$0F
	.byte	$02
	.byte	$1B
	.byte	$21
	.byte	$0F
	.byte	$0C
	.byte	$1C
	.byte	$2C
	.byte	$0F
	.byte	$16
	.byte	$29
	.byte	$37
	.byte	$0F
	.byte	$12
	.byte	$26
	.byte	$38
_palts7:
	.byte	$0C
	.byte	$1D
	.byte	$23
	.byte	$34
	.byte	$0C
	.byte	$1D
	.byte	$1A
	.byte	$00
	.byte	$0C
	.byte	$16
	.byte	$29
	.byte	$37
	.byte	$0C
	.byte	$1C
	.byte	$21
	.byte	$37
_palts8:
	.byte	$00
	.byte	$07
	.byte	$26
	.byte	$38
	.byte	$00
	.byte	$17
	.byte	$18
	.byte	$27
	.byte	$00
	.byte	$16
	.byte	$29
	.byte	$30
	.byte	$00
	.byte	$1D
	.byte	$1B
	.byte	$32
_palts9:
	.byte	$05
	.byte	$1D
	.byte	$25
	.byte	$37
	.byte	$05
	.byte	$1D
	.byte	$18
	.byte	$36
	.byte	$05
	.byte	$16
	.byte	$29
	.byte	$37
	.byte	$05
	.byte	$15
	.byte	$25
	.byte	$34
_ts0_tmaps_0:
	.byte	$00
	.byte	$40
	.byte	$44
	.byte	$00
	.byte	$00
	.byte	$4C
	.byte	$00
	.byte	$00
	.byte	$4D
	.byte	$51
	.byte	$55
	.byte	$55
	.byte	$5B
	.byte	$5C
	.byte	$00
	.byte	$00
	.byte	$5F
	.byte	$00
	.byte	$62
	.byte	$61
	.byte	$61
	.byte	$68
	.byte	$00
	.byte	$00
	.byte	$69
	.byte	$6D
	.byte	$71
	.byte	$75
	.byte	$79
	.byte	$7D
	.byte	$81
	.byte	$85
_ts0_tmaps_1:
	.byte	$00
	.byte	$41
	.byte	$45
	.byte	$48
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$4E
	.byte	$52
	.byte	$56
	.byte	$56
	.byte	$5B
	.byte	$5C
	.byte	$00
	.byte	$00
	.byte	$60
	.byte	$00
	.byte	$63
	.byte	$61
	.byte	$61
	.byte	$68
	.byte	$00
	.byte	$00
	.byte	$6A
	.byte	$6E
	.byte	$72
	.byte	$76
	.byte	$7A
	.byte	$7E
	.byte	$82
	.byte	$86
_ts0_tmaps_2:
	.byte	$00
	.byte	$42
	.byte	$46
	.byte	$49
	.byte	$4B
	.byte	$4C
	.byte	$00
	.byte	$00
	.byte	$4F
	.byte	$53
	.byte	$57
	.byte	$59
	.byte	$00
	.byte	$5D
	.byte	$00
	.byte	$00
	.byte	$61
	.byte	$5F
	.byte	$64
	.byte	$66
	.byte	$61
	.byte	$68
	.byte	$00
	.byte	$00
	.byte	$6B
	.byte	$6F
	.byte	$73
	.byte	$77
	.byte	$7B
	.byte	$7F
	.byte	$83
	.byte	$87
_ts0_tmaps_3:
	.byte	$00
	.byte	$43
	.byte	$47
	.byte	$4A
	.byte	$4B
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$50
	.byte	$54
	.byte	$58
	.byte	$5A
	.byte	$00
	.byte	$5E
	.byte	$00
	.byte	$00
	.byte	$61
	.byte	$60
	.byte	$65
	.byte	$67
	.byte	$61
	.byte	$68
	.byte	$00
	.byte	$00
	.byte	$6C
	.byte	$70
	.byte	$74
	.byte	$78
	.byte	$7C
	.byte	$80
	.byte	$84
	.byte	$88
_ts0_pals_0:
	.byte	$00
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
_ts0_pals_1:
	.byte	$00
	.byte	$0C
	.byte	$0C
	.byte	$0C
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$0C
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$08
_ts0_pals_2:
	.byte	$00
	.byte	$30
	.byte	$30
	.byte	$30
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$30
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$20
	.byte	$20
_ts0_pals_3:
	.byte	$00
	.byte	$C0
	.byte	$C0
	.byte	$C0
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$C0
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$80
	.byte	$80
	.byte	$80
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$80
	.byte	$80
_ts1_tmaps_0:
	.byte	$00
	.byte	$89
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$4D
	.byte	$51
	.byte	$00
	.byte	$8E
	.byte	$5B
	.byte	$91
	.byte	$92
	.byte	$94
	.byte	$5F
	.byte	$00
	.byte	$62
	.byte	$61
	.byte	$61
	.byte	$68
	.byte	$00
	.byte	$00
	.byte	$69
	.byte	$6D
	.byte	$71
	.byte	$75
	.byte	$79
	.byte	$7D
	.byte	$81
	.byte	$85
_ts1_tmaps_1:
	.byte	$00
	.byte	$8A
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$4E
	.byte	$52
	.byte	$00
	.byte	$8F
	.byte	$5B
	.byte	$91
	.byte	$92
	.byte	$95
	.byte	$60
	.byte	$00
	.byte	$63
	.byte	$61
	.byte	$61
	.byte	$68
	.byte	$00
	.byte	$00
	.byte	$6A
	.byte	$6E
	.byte	$72
	.byte	$76
	.byte	$7A
	.byte	$7E
	.byte	$82
	.byte	$86
_ts1_tmaps_2:
	.byte	$00
	.byte	$8B
	.byte	$00
	.byte	$00
	.byte	$4B
	.byte	$00
	.byte	$8D
	.byte	$00
	.byte	$4F
	.byte	$53
	.byte	$00
	.byte	$90
	.byte	$00
	.byte	$90
	.byte	$93
	.byte	$00
	.byte	$61
	.byte	$5F
	.byte	$64
	.byte	$66
	.byte	$61
	.byte	$68
	.byte	$00
	.byte	$00
	.byte	$6B
	.byte	$6F
	.byte	$73
	.byte	$77
	.byte	$7B
	.byte	$7F
	.byte	$83
	.byte	$87
_ts1_tmaps_3:
	.byte	$00
	.byte	$8C
	.byte	$00
	.byte	$00
	.byte	$4B
	.byte	$00
	.byte	$8D
	.byte	$00
	.byte	$50
	.byte	$54
	.byte	$00
	.byte	$90
	.byte	$00
	.byte	$90
	.byte	$93
	.byte	$00
	.byte	$61
	.byte	$60
	.byte	$65
	.byte	$67
	.byte	$61
	.byte	$68
	.byte	$00
	.byte	$00
	.byte	$6C
	.byte	$70
	.byte	$74
	.byte	$78
	.byte	$7C
	.byte	$80
	.byte	$84
	.byte	$88
_ts1_pals_0:
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$02
	.byte	$02
_ts1_pals_1:
	.byte	$00
	.byte	$0C
	.byte	$00
	.byte	$00
	.byte	$0C
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$04
	.byte	$04
	.byte	$00
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$0C
	.byte	$0C
	.byte	$0C
	.byte	$08
	.byte	$08
_ts1_pals_2:
	.byte	$00
	.byte	$30
	.byte	$00
	.byte	$00
	.byte	$30
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$30
	.byte	$30
	.byte	$30
	.byte	$20
	.byte	$20
_ts1_pals_3:
	.byte	$00
	.byte	$C0
	.byte	$00
	.byte	$00
	.byte	$C0
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$40
	.byte	$40
	.byte	$00
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$80
	.byte	$80
	.byte	$80
	.byte	$C0
	.byte	$C0
	.byte	$C0
	.byte	$80
	.byte	$80
_ts3_tmaps_0:
	.byte	$00
	.byte	$40
	.byte	$44
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$4D
	.byte	$96
	.byte	$98
	.byte	$55
	.byte	$00
	.byte	$5C
	.byte	$00
	.byte	$00
	.byte	$5F
	.byte	$00
	.byte	$62
	.byte	$61
	.byte	$61
	.byte	$68
	.byte	$00
	.byte	$00
	.byte	$69
	.byte	$6D
	.byte	$71
	.byte	$75
	.byte	$79
	.byte	$7D
	.byte	$81
	.byte	$85
_ts3_tmaps_1:
	.byte	$00
	.byte	$41
	.byte	$45
	.byte	$00
	.byte	$00
	.byte	$48
	.byte	$00
	.byte	$00
	.byte	$4E
	.byte	$96
	.byte	$98
	.byte	$56
	.byte	$00
	.byte	$5C
	.byte	$00
	.byte	$00
	.byte	$60
	.byte	$00
	.byte	$63
	.byte	$61
	.byte	$61
	.byte	$68
	.byte	$00
	.byte	$00
	.byte	$6A
	.byte	$6E
	.byte	$72
	.byte	$76
	.byte	$7A
	.byte	$7E
	.byte	$82
	.byte	$86
_ts3_tmaps_2:
	.byte	$00
	.byte	$42
	.byte	$46
	.byte	$00
	.byte	$00
	.byte	$49
	.byte	$00
	.byte	$00
	.byte	$4F
	.byte	$97
	.byte	$99
	.byte	$59
	.byte	$00
	.byte	$5D
	.byte	$00
	.byte	$00
	.byte	$61
	.byte	$5F
	.byte	$64
	.byte	$66
	.byte	$61
	.byte	$68
	.byte	$00
	.byte	$00
	.byte	$6B
	.byte	$6F
	.byte	$73
	.byte	$77
	.byte	$7B
	.byte	$7F
	.byte	$83
	.byte	$87
_ts3_tmaps_3:
	.byte	$00
	.byte	$43
	.byte	$47
	.byte	$00
	.byte	$00
	.byte	$4A
	.byte	$00
	.byte	$00
	.byte	$50
	.byte	$97
	.byte	$99
	.byte	$5A
	.byte	$00
	.byte	$5E
	.byte	$00
	.byte	$00
	.byte	$61
	.byte	$60
	.byte	$65
	.byte	$67
	.byte	$61
	.byte	$68
	.byte	$00
	.byte	$00
	.byte	$6C
	.byte	$70
	.byte	$74
	.byte	$78
	.byte	$7C
	.byte	$80
	.byte	$84
	.byte	$88
_ts3_pals_0:
	.byte	$00
	.byte	$03
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
_ts3_pals_1:
	.byte	$00
	.byte	$0C
	.byte	$0C
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$0C
	.byte	$00
	.byte	$0C
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$08
_ts3_pals_2:
	.byte	$00
	.byte	$30
	.byte	$30
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$30
	.byte	$00
	.byte	$30
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$20
	.byte	$20
_ts3_pals_3:
	.byte	$00
	.byte	$C0
	.byte	$C0
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$C0
	.byte	$00
	.byte	$C0
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$80
	.byte	$80
	.byte	$80
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$80
	.byte	$80
_ts4_tmaps_0:
	.byte	$00
	.byte	$89
	.byte	$00
	.byte	$9A
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$4D
	.byte	$00
	.byte	$98
	.byte	$00
	.byte	$00
	.byte	$5C
	.byte	$00
	.byte	$00
	.byte	$5F
	.byte	$00
	.byte	$62
	.byte	$61
	.byte	$61
	.byte	$68
	.byte	$00
	.byte	$00
	.byte	$69
	.byte	$6D
	.byte	$71
	.byte	$75
	.byte	$79
	.byte	$7D
	.byte	$81
	.byte	$85
_ts4_tmaps_1:
	.byte	$00
	.byte	$8A
	.byte	$00
	.byte	$9A
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$4E
	.byte	$00
	.byte	$98
	.byte	$00
	.byte	$00
	.byte	$5C
	.byte	$00
	.byte	$00
	.byte	$60
	.byte	$00
	.byte	$63
	.byte	$61
	.byte	$61
	.byte	$68
	.byte	$00
	.byte	$00
	.byte	$6A
	.byte	$6E
	.byte	$72
	.byte	$76
	.byte	$7A
	.byte	$7E
	.byte	$82
	.byte	$86
_ts4_tmaps_2:
	.byte	$00
	.byte	$8B
	.byte	$00
	.byte	$9B
	.byte	$00
	.byte	$8D
	.byte	$00
	.byte	$00
	.byte	$4F
	.byte	$00
	.byte	$99
	.byte	$00
	.byte	$00
	.byte	$5D
	.byte	$00
	.byte	$00
	.byte	$61
	.byte	$5F
	.byte	$64
	.byte	$66
	.byte	$61
	.byte	$68
	.byte	$00
	.byte	$00
	.byte	$6B
	.byte	$6F
	.byte	$73
	.byte	$77
	.byte	$7B
	.byte	$7F
	.byte	$83
	.byte	$87
_ts4_tmaps_3:
	.byte	$00
	.byte	$8C
	.byte	$00
	.byte	$9B
	.byte	$00
	.byte	$8D
	.byte	$00
	.byte	$00
	.byte	$50
	.byte	$00
	.byte	$99
	.byte	$00
	.byte	$00
	.byte	$5E
	.byte	$00
	.byte	$00
	.byte	$61
	.byte	$60
	.byte	$65
	.byte	$67
	.byte	$61
	.byte	$68
	.byte	$00
	.byte	$00
	.byte	$6C
	.byte	$70
	.byte	$74
	.byte	$78
	.byte	$7C
	.byte	$80
	.byte	$84
	.byte	$88
_ts4_pals_0:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
_ts4_pals_1:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$0C
	.byte	$00
	.byte	$00
	.byte	$0C
	.byte	$0C
	.byte	$0C
	.byte	$0C
	.byte	$0C
	.byte	$0C
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$08
_ts4_pals_2:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$30
	.byte	$00
	.byte	$00
	.byte	$30
	.byte	$30
	.byte	$30
	.byte	$30
	.byte	$30
	.byte	$30
	.byte	$00
	.byte	$00
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$20
	.byte	$20
_ts4_pals_3:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$C0
	.byte	$00
	.byte	$00
	.byte	$C0
	.byte	$C0
	.byte	$C0
	.byte	$C0
	.byte	$C0
	.byte	$C0
	.byte	$00
	.byte	$00
	.byte	$80
	.byte	$80
	.byte	$80
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$80
	.byte	$80
_ts6_tmaps_0:
	.byte	$00
	.byte	$89
	.byte	$9C
	.byte	$A0
	.byte	$00
	.byte	$A2
	.byte	$A1
	.byte	$00
	.byte	$4D
	.byte	$00
	.byte	$00
	.byte	$8E
	.byte	$A4
	.byte	$91
	.byte	$00
	.byte	$00
	.byte	$5F
	.byte	$00
	.byte	$62
	.byte	$61
	.byte	$61
	.byte	$68
	.byte	$00
	.byte	$00
	.byte	$69
	.byte	$6D
	.byte	$71
	.byte	$75
	.byte	$79
	.byte	$7D
	.byte	$81
	.byte	$85
_ts6_tmaps_1:
	.byte	$00
	.byte	$8A
	.byte	$9D
	.byte	$A0
	.byte	$00
	.byte	$A1
	.byte	$A1
	.byte	$00
	.byte	$4E
	.byte	$00
	.byte	$00
	.byte	$8F
	.byte	$A4
	.byte	$91
	.byte	$00
	.byte	$00
	.byte	$60
	.byte	$00
	.byte	$63
	.byte	$61
	.byte	$61
	.byte	$68
	.byte	$00
	.byte	$00
	.byte	$6A
	.byte	$6E
	.byte	$72
	.byte	$76
	.byte	$7A
	.byte	$7E
	.byte	$82
	.byte	$86
_ts6_tmaps_2:
	.byte	$00
	.byte	$8B
	.byte	$9E
	.byte	$A1
	.byte	$4B
	.byte	$A1
	.byte	$A3
	.byte	$00
	.byte	$4F
	.byte	$00
	.byte	$00
	.byte	$90
	.byte	$A5
	.byte	$90
	.byte	$00
	.byte	$00
	.byte	$61
	.byte	$5F
	.byte	$64
	.byte	$66
	.byte	$61
	.byte	$68
	.byte	$00
	.byte	$00
	.byte	$6B
	.byte	$6F
	.byte	$73
	.byte	$77
	.byte	$7B
	.byte	$7F
	.byte	$83
	.byte	$87
_ts6_tmaps_3:
	.byte	$00
	.byte	$8C
	.byte	$9F
	.byte	$00
	.byte	$4B
	.byte	$00
	.byte	$A3
	.byte	$00
	.byte	$50
	.byte	$00
	.byte	$00
	.byte	$90
	.byte	$A5
	.byte	$90
	.byte	$00
	.byte	$00
	.byte	$61
	.byte	$60
	.byte	$65
	.byte	$67
	.byte	$61
	.byte	$68
	.byte	$00
	.byte	$00
	.byte	$6C
	.byte	$70
	.byte	$74
	.byte	$78
	.byte	$7C
	.byte	$80
	.byte	$84
	.byte	$88
_ts6_pals_0:
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$02
	.byte	$02
_ts6_pals_1:
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$0C
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$0C
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$0C
	.byte	$0C
	.byte	$0C
	.byte	$08
	.byte	$08
_ts6_pals_2:
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$30
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$30
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$30
	.byte	$30
	.byte	$30
	.byte	$20
	.byte	$20
_ts6_pals_3:
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$C0
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$C0
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$80
	.byte	$80
	.byte	$80
	.byte	$C0
	.byte	$C0
	.byte	$C0
	.byte	$80
	.byte	$80
_ts7_tmaps_0:
	.byte	$00
	.byte	$89
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$4D
	.byte	$51
	.byte	$00
	.byte	$55
	.byte	$5B
	.byte	$91
	.byte	$92
	.byte	$94
	.byte	$5F
	.byte	$00
	.byte	$62
	.byte	$61
	.byte	$61
	.byte	$68
	.byte	$00
	.byte	$00
	.byte	$69
	.byte	$6D
	.byte	$71
	.byte	$75
	.byte	$79
	.byte	$7D
	.byte	$81
	.byte	$85
_ts7_tmaps_1:
	.byte	$00
	.byte	$8A
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$4E
	.byte	$52
	.byte	$00
	.byte	$56
	.byte	$5B
	.byte	$91
	.byte	$92
	.byte	$95
	.byte	$60
	.byte	$00
	.byte	$63
	.byte	$61
	.byte	$61
	.byte	$68
	.byte	$00
	.byte	$00
	.byte	$6A
	.byte	$6E
	.byte	$72
	.byte	$76
	.byte	$7A
	.byte	$7E
	.byte	$82
	.byte	$86
_ts7_tmaps_2:
	.byte	$00
	.byte	$8B
	.byte	$00
	.byte	$00
	.byte	$4B
	.byte	$00
	.byte	$8D
	.byte	$00
	.byte	$4F
	.byte	$53
	.byte	$00
	.byte	$59
	.byte	$00
	.byte	$90
	.byte	$93
	.byte	$00
	.byte	$61
	.byte	$5F
	.byte	$64
	.byte	$66
	.byte	$61
	.byte	$68
	.byte	$00
	.byte	$00
	.byte	$6B
	.byte	$6F
	.byte	$73
	.byte	$77
	.byte	$7B
	.byte	$7F
	.byte	$83
	.byte	$87
_ts7_tmaps_3:
	.byte	$00
	.byte	$8C
	.byte	$00
	.byte	$00
	.byte	$4B
	.byte	$00
	.byte	$8D
	.byte	$00
	.byte	$50
	.byte	$54
	.byte	$00
	.byte	$5A
	.byte	$00
	.byte	$90
	.byte	$93
	.byte	$00
	.byte	$61
	.byte	$60
	.byte	$65
	.byte	$67
	.byte	$61
	.byte	$68
	.byte	$00
	.byte	$00
	.byte	$6C
	.byte	$70
	.byte	$74
	.byte	$78
	.byte	$7C
	.byte	$80
	.byte	$84
	.byte	$88
_ts7_pals_0:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
_ts7_pals_1:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$0C
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$0C
	.byte	$00
	.byte	$04
	.byte	$0C
	.byte	$00
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$08
_ts7_pals_2:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$30
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$30
	.byte	$00
	.byte	$10
	.byte	$30
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$20
	.byte	$20
_ts7_pals_3:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$C0
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$C0
	.byte	$00
	.byte	$40
	.byte	$C0
	.byte	$00
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$80
	.byte	$80
	.byte	$80
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$80
	.byte	$80
_ts8_tmaps_0:
	.byte	$00
	.byte	$A6
	.byte	$AA
	.byte	$9A
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$4D
	.byte	$00
	.byte	$98
	.byte	$8E
	.byte	$00
	.byte	$91
	.byte	$00
	.byte	$00
	.byte	$5F
	.byte	$00
	.byte	$62
	.byte	$61
	.byte	$61
	.byte	$68
	.byte	$00
	.byte	$00
	.byte	$69
	.byte	$6D
	.byte	$71
	.byte	$75
	.byte	$79
	.byte	$7D
	.byte	$81
	.byte	$85
_ts8_tmaps_1:
	.byte	$00
	.byte	$A7
	.byte	$AB
	.byte	$9A
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$4E
	.byte	$00
	.byte	$98
	.byte	$8F
	.byte	$00
	.byte	$91
	.byte	$00
	.byte	$00
	.byte	$60
	.byte	$00
	.byte	$63
	.byte	$61
	.byte	$61
	.byte	$68
	.byte	$00
	.byte	$00
	.byte	$6A
	.byte	$6E
	.byte	$72
	.byte	$76
	.byte	$7A
	.byte	$7E
	.byte	$82
	.byte	$86
_ts8_tmaps_2:
	.byte	$00
	.byte	$A8
	.byte	$AC
	.byte	$9B
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$4F
	.byte	$00
	.byte	$99
	.byte	$90
	.byte	$00
	.byte	$90
	.byte	$00
	.byte	$00
	.byte	$61
	.byte	$5F
	.byte	$64
	.byte	$66
	.byte	$61
	.byte	$68
	.byte	$00
	.byte	$00
	.byte	$6B
	.byte	$6F
	.byte	$73
	.byte	$77
	.byte	$7B
	.byte	$7F
	.byte	$83
	.byte	$87
_ts8_tmaps_3:
	.byte	$00
	.byte	$A9
	.byte	$AD
	.byte	$9B
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$50
	.byte	$00
	.byte	$99
	.byte	$90
	.byte	$00
	.byte	$90
	.byte	$00
	.byte	$00
	.byte	$61
	.byte	$60
	.byte	$65
	.byte	$67
	.byte	$61
	.byte	$68
	.byte	$00
	.byte	$00
	.byte	$6C
	.byte	$70
	.byte	$74
	.byte	$78
	.byte	$7C
	.byte	$80
	.byte	$84
	.byte	$88
_ts8_pals_0:
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
_ts8_pals_1:
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$0C
	.byte	$00
	.byte	$0C
	.byte	$00
	.byte	$00
	.byte	$0C
	.byte	$0C
	.byte	$0C
	.byte	$0C
	.byte	$0C
	.byte	$0C
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$08
_ts8_pals_2:
	.byte	$00
	.byte	$20
	.byte	$20
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$30
	.byte	$00
	.byte	$30
	.byte	$00
	.byte	$00
	.byte	$30
	.byte	$30
	.byte	$30
	.byte	$30
	.byte	$30
	.byte	$30
	.byte	$00
	.byte	$00
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$20
	.byte	$20
_ts8_pals_3:
	.byte	$00
	.byte	$80
	.byte	$80
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$C0
	.byte	$00
	.byte	$C0
	.byte	$00
	.byte	$00
	.byte	$C0
	.byte	$C0
	.byte	$C0
	.byte	$C0
	.byte	$C0
	.byte	$C0
	.byte	$00
	.byte	$00
	.byte	$80
	.byte	$80
	.byte	$80
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$80
	.byte	$80
_ts9_tmaps_0:
	.byte	$00
	.byte	$40
	.byte	$44
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$AE
	.byte	$4D
	.byte	$51
	.byte	$55
	.byte	$00
	.byte	$5B
	.byte	$5C
	.byte	$00
	.byte	$00
	.byte	$5F
	.byte	$00
	.byte	$62
	.byte	$61
	.byte	$61
	.byte	$68
	.byte	$00
	.byte	$00
	.byte	$69
	.byte	$6D
	.byte	$71
	.byte	$75
	.byte	$79
	.byte	$7D
	.byte	$81
	.byte	$85
_ts9_tmaps_1:
	.byte	$00
	.byte	$41
	.byte	$45
	.byte	$48
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$AE
	.byte	$4E
	.byte	$52
	.byte	$56
	.byte	$00
	.byte	$5B
	.byte	$5C
	.byte	$00
	.byte	$00
	.byte	$60
	.byte	$00
	.byte	$63
	.byte	$61
	.byte	$61
	.byte	$68
	.byte	$00
	.byte	$00
	.byte	$6A
	.byte	$6E
	.byte	$72
	.byte	$76
	.byte	$7A
	.byte	$7E
	.byte	$82
	.byte	$86
_ts9_tmaps_2:
	.byte	$00
	.byte	$42
	.byte	$46
	.byte	$49
	.byte	$4B
	.byte	$00
	.byte	$00
	.byte	$AF
	.byte	$4F
	.byte	$53
	.byte	$57
	.byte	$00
	.byte	$00
	.byte	$5D
	.byte	$00
	.byte	$00
	.byte	$61
	.byte	$5F
	.byte	$64
	.byte	$66
	.byte	$61
	.byte	$68
	.byte	$00
	.byte	$00
	.byte	$6B
	.byte	$6F
	.byte	$73
	.byte	$77
	.byte	$7B
	.byte	$7F
	.byte	$83
	.byte	$87
_ts9_tmaps_3:
	.byte	$00
	.byte	$43
	.byte	$47
	.byte	$4A
	.byte	$4B
	.byte	$00
	.byte	$00
	.byte	$AF
	.byte	$50
	.byte	$54
	.byte	$58
	.byte	$00
	.byte	$00
	.byte	$5E
	.byte	$00
	.byte	$00
	.byte	$61
	.byte	$60
	.byte	$65
	.byte	$67
	.byte	$61
	.byte	$68
	.byte	$00
	.byte	$00
	.byte	$6C
	.byte	$70
	.byte	$74
	.byte	$78
	.byte	$7C
	.byte	$80
	.byte	$84
	.byte	$88
_ts9_pals_0:
	.byte	$00
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
_ts9_pals_1:
	.byte	$00
	.byte	$0C
	.byte	$0C
	.byte	$0C
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$0C
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$08
_ts9_pals_2:
	.byte	$00
	.byte	$30
	.byte	$30
	.byte	$30
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$30
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$20
	.byte	$20
_ts9_pals_3:
	.byte	$00
	.byte	$C0
	.byte	$C0
	.byte	$C0
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$C0
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$80
	.byte	$80
	.byte	$80
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$80
	.byte	$80
_sspl_00_a:
	.byte	$FC
	.byte	$F8
	.byte	$12
	.byte	$00
	.byte	$04
	.byte	$F8
	.byte	$13
	.byte	$00
	.byte	$FC
	.byte	$00
	.byte	$14
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$15
	.byte	$00
	.byte	$FC
	.byte	$08
	.byte	$16
	.byte	$00
	.byte	$04
	.byte	$08
	.byte	$17
	.byte	$00
	.byte	$80
_sspl_00_b:
	.byte	$FC
	.byte	$F8
	.byte	$13
	.byte	$40
	.byte	$04
	.byte	$F8
	.byte	$12
	.byte	$40
	.byte	$FC
	.byte	$00
	.byte	$15
	.byte	$40
	.byte	$04
	.byte	$00
	.byte	$14
	.byte	$40
	.byte	$FC
	.byte	$08
	.byte	$17
	.byte	$40
	.byte	$04
	.byte	$08
	.byte	$16
	.byte	$40
	.byte	$80
_sspl_01_a:
	.byte	$FC
	.byte	$F8
	.byte	$18
	.byte	$00
	.byte	$04
	.byte	$F8
	.byte	$19
	.byte	$00
	.byte	$FC
	.byte	$00
	.byte	$1A
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$1B
	.byte	$00
	.byte	$FC
	.byte	$08
	.byte	$1C
	.byte	$00
	.byte	$04
	.byte	$08
	.byte	$1D
	.byte	$00
	.byte	$80
_sspl_01_b:
	.byte	$FC
	.byte	$F8
	.byte	$19
	.byte	$40
	.byte	$04
	.byte	$F8
	.byte	$18
	.byte	$40
	.byte	$FC
	.byte	$00
	.byte	$1B
	.byte	$40
	.byte	$04
	.byte	$00
	.byte	$1A
	.byte	$40
	.byte	$FC
	.byte	$08
	.byte	$1D
	.byte	$40
	.byte	$04
	.byte	$08
	.byte	$1C
	.byte	$40
	.byte	$80
_sspl_02_a:
	.byte	$FC
	.byte	$F8
	.byte	$1E
	.byte	$00
	.byte	$04
	.byte	$F8
	.byte	$1F
	.byte	$00
	.byte	$FC
	.byte	$00
	.byte	$20
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$21
	.byte	$00
	.byte	$FC
	.byte	$08
	.byte	$22
	.byte	$00
	.byte	$04
	.byte	$08
	.byte	$23
	.byte	$00
	.byte	$80
_sspl_02_b:
	.byte	$FC
	.byte	$F8
	.byte	$1F
	.byte	$40
	.byte	$04
	.byte	$F8
	.byte	$1E
	.byte	$40
	.byte	$FC
	.byte	$00
	.byte	$21
	.byte	$40
	.byte	$04
	.byte	$00
	.byte	$20
	.byte	$40
	.byte	$FC
	.byte	$08
	.byte	$23
	.byte	$40
	.byte	$04
	.byte	$08
	.byte	$22
	.byte	$40
	.byte	$80
_sspl_03_a:
	.byte	$FC
	.byte	$F8
	.byte	$24
	.byte	$00
	.byte	$04
	.byte	$F8
	.byte	$25
	.byte	$00
	.byte	$FC
	.byte	$00
	.byte	$26
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$27
	.byte	$00
	.byte	$FC
	.byte	$08
	.byte	$28
	.byte	$00
	.byte	$04
	.byte	$08
	.byte	$29
	.byte	$00
	.byte	$80
_sspl_03_b:
	.byte	$FC
	.byte	$F8
	.byte	$25
	.byte	$40
	.byte	$04
	.byte	$F8
	.byte	$24
	.byte	$40
	.byte	$FC
	.byte	$00
	.byte	$27
	.byte	$40
	.byte	$04
	.byte	$00
	.byte	$26
	.byte	$40
	.byte	$FC
	.byte	$08
	.byte	$29
	.byte	$40
	.byte	$04
	.byte	$08
	.byte	$28
	.byte	$40
	.byte	$80
_sspl_04_a:
	.byte	$FC
	.byte	$F8
	.byte	$2A
	.byte	$03
	.byte	$04
	.byte	$F8
	.byte	$2B
	.byte	$03
	.byte	$FC
	.byte	$00
	.byte	$2C
	.byte	$01
	.byte	$04
	.byte	$00
	.byte	$2D
	.byte	$01
	.byte	$FC
	.byte	$08
	.byte	$2E
	.byte	$03
	.byte	$04
	.byte	$08
	.byte	$2F
	.byte	$03
	.byte	$80
_sspl_04_b:
	.byte	$FC
	.byte	$F8
	.byte	$2B
	.byte	$43
	.byte	$04
	.byte	$F8
	.byte	$2A
	.byte	$43
	.byte	$FC
	.byte	$00
	.byte	$2D
	.byte	$41
	.byte	$04
	.byte	$00
	.byte	$2C
	.byte	$41
	.byte	$FC
	.byte	$08
	.byte	$2F
	.byte	$43
	.byte	$04
	.byte	$08
	.byte	$2E
	.byte	$43
	.byte	$80
_sspl_05_a:
	.byte	$FC
	.byte	$F8
	.byte	$2A
	.byte	$03
	.byte	$04
	.byte	$F8
	.byte	$30
	.byte	$03
	.byte	$FC
	.byte	$00
	.byte	$31
	.byte	$01
	.byte	$04
	.byte	$00
	.byte	$32
	.byte	$01
	.byte	$FC
	.byte	$08
	.byte	$33
	.byte	$03
	.byte	$04
	.byte	$08
	.byte	$34
	.byte	$03
	.byte	$80
_sspl_05_b:
	.byte	$FC
	.byte	$F8
	.byte	$30
	.byte	$43
	.byte	$04
	.byte	$F8
	.byte	$2A
	.byte	$43
	.byte	$FC
	.byte	$00
	.byte	$32
	.byte	$41
	.byte	$04
	.byte	$00
	.byte	$31
	.byte	$41
	.byte	$FC
	.byte	$08
	.byte	$34
	.byte	$43
	.byte	$04
	.byte	$08
	.byte	$33
	.byte	$43
	.byte	$80
_sspl_06_a:
	.byte	$FC
	.byte	$F9
	.byte	$2A
	.byte	$03
	.byte	$04
	.byte	$F9
	.byte	$30
	.byte	$03
	.byte	$FC
	.byte	$01
	.byte	$31
	.byte	$01
	.byte	$04
	.byte	$01
	.byte	$32
	.byte	$01
	.byte	$FC
	.byte	$09
	.byte	$35
	.byte	$03
	.byte	$04
	.byte	$09
	.byte	$36
	.byte	$03
	.byte	$80
_sspl_06_b:
	.byte	$FC
	.byte	$F9
	.byte	$30
	.byte	$43
	.byte	$04
	.byte	$F9
	.byte	$2A
	.byte	$43
	.byte	$FC
	.byte	$01
	.byte	$32
	.byte	$41
	.byte	$04
	.byte	$01
	.byte	$31
	.byte	$41
	.byte	$FC
	.byte	$09
	.byte	$36
	.byte	$43
	.byte	$04
	.byte	$09
	.byte	$35
	.byte	$43
	.byte	$80
_sspl_07_a:
	.byte	$FC
	.byte	$F8
	.byte	$2A
	.byte	$03
	.byte	$04
	.byte	$F8
	.byte	$30
	.byte	$03
	.byte	$FC
	.byte	$00
	.byte	$37
	.byte	$01
	.byte	$04
	.byte	$00
	.byte	$38
	.byte	$01
	.byte	$FC
	.byte	$08
	.byte	$39
	.byte	$03
	.byte	$04
	.byte	$08
	.byte	$3A
	.byte	$03
	.byte	$80
_sspl_07_b:
	.byte	$FC
	.byte	$F8
	.byte	$30
	.byte	$43
	.byte	$04
	.byte	$F8
	.byte	$2A
	.byte	$43
	.byte	$FC
	.byte	$00
	.byte	$38
	.byte	$41
	.byte	$04
	.byte	$00
	.byte	$37
	.byte	$41
	.byte	$FC
	.byte	$08
	.byte	$3A
	.byte	$43
	.byte	$04
	.byte	$08
	.byte	$39
	.byte	$43
	.byte	$80
_ssena_00_a:
	.byte	$FC
	.byte	$F8
	.byte	$3B
	.byte	$01
	.byte	$04
	.byte	$F8
	.byte	$3C
	.byte	$01
	.byte	$FC
	.byte	$00
	.byte	$3D
	.byte	$01
	.byte	$04
	.byte	$00
	.byte	$3E
	.byte	$01
	.byte	$FC
	.byte	$08
	.byte	$3F
	.byte	$01
	.byte	$04
	.byte	$08
	.byte	$40
	.byte	$01
	.byte	$80
_ssena_00_b:
	.byte	$FC
	.byte	$F8
	.byte	$3C
	.byte	$41
	.byte	$04
	.byte	$F8
	.byte	$3B
	.byte	$41
	.byte	$FC
	.byte	$00
	.byte	$3E
	.byte	$41
	.byte	$04
	.byte	$00
	.byte	$3D
	.byte	$41
	.byte	$FC
	.byte	$08
	.byte	$40
	.byte	$41
	.byte	$04
	.byte	$08
	.byte	$3F
	.byte	$41
	.byte	$80
_ssena_01_a:
	.byte	$FC
	.byte	$F8
	.byte	$41
	.byte	$01
	.byte	$04
	.byte	$F8
	.byte	$42
	.byte	$01
	.byte	$FC
	.byte	$00
	.byte	$43
	.byte	$01
	.byte	$04
	.byte	$00
	.byte	$44
	.byte	$01
	.byte	$FC
	.byte	$08
	.byte	$45
	.byte	$01
	.byte	$04
	.byte	$08
	.byte	$46
	.byte	$01
	.byte	$80
_ssena_01_b:
	.byte	$FC
	.byte	$F8
	.byte	$42
	.byte	$41
	.byte	$04
	.byte	$F8
	.byte	$41
	.byte	$41
	.byte	$FC
	.byte	$00
	.byte	$44
	.byte	$41
	.byte	$04
	.byte	$00
	.byte	$43
	.byte	$41
	.byte	$FC
	.byte	$08
	.byte	$46
	.byte	$41
	.byte	$04
	.byte	$08
	.byte	$45
	.byte	$41
	.byte	$80
_ssenb_00_a:
	.byte	$F8
	.byte	$00
	.byte	$47
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$48
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$49
	.byte	$02
	.byte	$F8
	.byte	$08
	.byte	$4A
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$4B
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$4C
	.byte	$02
	.byte	$80
_ssenb_00_b:
	.byte	$F8
	.byte	$00
	.byte	$49
	.byte	$42
	.byte	$00
	.byte	$00
	.byte	$48
	.byte	$42
	.byte	$08
	.byte	$00
	.byte	$47
	.byte	$42
	.byte	$F8
	.byte	$08
	.byte	$4C
	.byte	$42
	.byte	$00
	.byte	$08
	.byte	$4B
	.byte	$42
	.byte	$08
	.byte	$08
	.byte	$4A
	.byte	$42
	.byte	$80
_ssenb_01_a:
	.byte	$F8
	.byte	$00
	.byte	$4D
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$4E
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$4F
	.byte	$02
	.byte	$F8
	.byte	$08
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$51
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$52
	.byte	$02
	.byte	$80
_ssenb_01_b:
	.byte	$F8
	.byte	$00
	.byte	$4F
	.byte	$42
	.byte	$00
	.byte	$00
	.byte	$4E
	.byte	$42
	.byte	$08
	.byte	$00
	.byte	$4D
	.byte	$42
	.byte	$F8
	.byte	$08
	.byte	$52
	.byte	$42
	.byte	$00
	.byte	$08
	.byte	$51
	.byte	$42
	.byte	$08
	.byte	$08
	.byte	$50
	.byte	$42
	.byte	$80
_ssenc:
	.byte	$F4
	.byte	$00
	.byte	$53
	.byte	$01
	.byte	$FC
	.byte	$00
	.byte	$54
	.byte	$01
	.byte	$04
	.byte	$00
	.byte	$54
	.byte	$01
	.byte	$0C
	.byte	$00
	.byte	$55
	.byte	$01
	.byte	$80
_ssend_00_a:
	.byte	$FC
	.byte	$F8
	.byte	$56
	.byte	$03
	.byte	$04
	.byte	$F8
	.byte	$57
	.byte	$03
	.byte	$FC
	.byte	$00
	.byte	$58
	.byte	$03
	.byte	$04
	.byte	$00
	.byte	$59
	.byte	$03
	.byte	$FC
	.byte	$08
	.byte	$5A
	.byte	$03
	.byte	$04
	.byte	$08
	.byte	$5B
	.byte	$03
	.byte	$80
_ssend_00_b:
	.byte	$FC
	.byte	$F8
	.byte	$57
	.byte	$43
	.byte	$04
	.byte	$F8
	.byte	$56
	.byte	$43
	.byte	$FC
	.byte	$00
	.byte	$59
	.byte	$43
	.byte	$04
	.byte	$00
	.byte	$58
	.byte	$43
	.byte	$FC
	.byte	$08
	.byte	$5B
	.byte	$43
	.byte	$04
	.byte	$08
	.byte	$5A
	.byte	$43
	.byte	$80
_ssend_01_a:
	.byte	$FC
	.byte	$F8
	.byte	$5C
	.byte	$03
	.byte	$04
	.byte	$F8
	.byte	$5D
	.byte	$03
	.byte	$FC
	.byte	$00
	.byte	$5E
	.byte	$03
	.byte	$04
	.byte	$00
	.byte	$5F
	.byte	$03
	.byte	$FC
	.byte	$08
	.byte	$60
	.byte	$03
	.byte	$04
	.byte	$08
	.byte	$60
	.byte	$43
	.byte	$80
_ssend_01_b:
	.byte	$FC
	.byte	$F8
	.byte	$5D
	.byte	$43
	.byte	$04
	.byte	$F8
	.byte	$5C
	.byte	$43
	.byte	$FC
	.byte	$00
	.byte	$5F
	.byte	$43
	.byte	$04
	.byte	$00
	.byte	$5E
	.byte	$43
	.byte	$FC
	.byte	$08
	.byte	$60
	.byte	$03
	.byte	$04
	.byte	$08
	.byte	$60
	.byte	$43
	.byte	$80
_ssend_02_a:
	.byte	$FC
	.byte	$F8
	.byte	$61
	.byte	$03
	.byte	$04
	.byte	$F8
	.byte	$62
	.byte	$03
	.byte	$FC
	.byte	$00
	.byte	$63
	.byte	$03
	.byte	$04
	.byte	$00
	.byte	$64
	.byte	$03
	.byte	$FC
	.byte	$08
	.byte	$65
	.byte	$03
	.byte	$04
	.byte	$08
	.byte	$66
	.byte	$03
	.byte	$80
_ssend_02_b:
	.byte	$FC
	.byte	$F8
	.byte	$62
	.byte	$43
	.byte	$04
	.byte	$F8
	.byte	$61
	.byte	$43
	.byte	$FC
	.byte	$00
	.byte	$64
	.byte	$43
	.byte	$04
	.byte	$00
	.byte	$63
	.byte	$43
	.byte	$FC
	.byte	$08
	.byte	$66
	.byte	$43
	.byte	$04
	.byte	$08
	.byte	$65
	.byte	$43
	.byte	$80
_ssene:
	.byte	$FC
	.byte	$00
	.byte	$67
	.byte	$02
	.byte	$04
	.byte	$00
	.byte	$68
	.byte	$02
	.byte	$FC
	.byte	$08
	.byte	$69
	.byte	$02
	.byte	$04
	.byte	$08
	.byte	$6A
	.byte	$02
	.byte	$80
_ssenf_00_a:
	.byte	$FC
	.byte	$00
	.byte	$6B
	.byte	$01
	.byte	$04
	.byte	$00
	.byte	$6C
	.byte	$01
	.byte	$FC
	.byte	$08
	.byte	$6D
	.byte	$01
	.byte	$04
	.byte	$08
	.byte	$6E
	.byte	$01
	.byte	$80
_ssenf_00_b:
	.byte	$FC
	.byte	$00
	.byte	$6C
	.byte	$41
	.byte	$04
	.byte	$00
	.byte	$6B
	.byte	$41
	.byte	$FC
	.byte	$08
	.byte	$6E
	.byte	$41
	.byte	$04
	.byte	$08
	.byte	$6D
	.byte	$41
	.byte	$80
_ssenf_01_a:
	.byte	$FC
	.byte	$00
	.byte	$6F
	.byte	$01
	.byte	$04
	.byte	$00
	.byte	$70
	.byte	$01
	.byte	$FC
	.byte	$08
	.byte	$71
	.byte	$01
	.byte	$04
	.byte	$08
	.byte	$72
	.byte	$01
	.byte	$80
_ssenf_01_b:
	.byte	$FC
	.byte	$00
	.byte	$70
	.byte	$41
	.byte	$04
	.byte	$00
	.byte	$6F
	.byte	$41
	.byte	$FC
	.byte	$08
	.byte	$72
	.byte	$41
	.byte	$04
	.byte	$08
	.byte	$71
	.byte	$41
	.byte	$80
_ssenf_02_a:
	.byte	$FC
	.byte	$00
	.byte	$73
	.byte	$03
	.byte	$04
	.byte	$00
	.byte	$74
	.byte	$03
	.byte	$FC
	.byte	$08
	.byte	$75
	.byte	$03
	.byte	$04
	.byte	$08
	.byte	$76
	.byte	$03
	.byte	$80
_ssenf_02_b:
	.byte	$FC
	.byte	$00
	.byte	$74
	.byte	$43
	.byte	$04
	.byte	$00
	.byte	$73
	.byte	$43
	.byte	$FC
	.byte	$08
	.byte	$76
	.byte	$43
	.byte	$04
	.byte	$08
	.byte	$75
	.byte	$43
	.byte	$80
_ssenf_03_a:
	.byte	$FC
	.byte	$00
	.byte	$77
	.byte	$03
	.byte	$04
	.byte	$00
	.byte	$78
	.byte	$03
	.byte	$FC
	.byte	$08
	.byte	$79
	.byte	$03
	.byte	$04
	.byte	$08
	.byte	$7A
	.byte	$03
	.byte	$80
_ssenf_03_b:
	.byte	$FC
	.byte	$00
	.byte	$78
	.byte	$43
	.byte	$04
	.byte	$00
	.byte	$77
	.byte	$43
	.byte	$FC
	.byte	$08
	.byte	$7A
	.byte	$43
	.byte	$04
	.byte	$08
	.byte	$79
	.byte	$43
	.byte	$80
_ssenf_04_a:
	.byte	$FC
	.byte	$00
	.byte	$7B
	.byte	$01
	.byte	$04
	.byte	$00
	.byte	$7C
	.byte	$01
	.byte	$FC
	.byte	$08
	.byte	$7D
	.byte	$01
	.byte	$04
	.byte	$08
	.byte	$7E
	.byte	$01
	.byte	$80
_ssenf_04_b:
	.byte	$FC
	.byte	$00
	.byte	$7C
	.byte	$41
	.byte	$04
	.byte	$00
	.byte	$7B
	.byte	$41
	.byte	$FC
	.byte	$08
	.byte	$7E
	.byte	$41
	.byte	$04
	.byte	$08
	.byte	$7D
	.byte	$41
	.byte	$80
_ssana_a:
	.byte	$FC
	.byte	$F0
	.byte	$7F
	.byte	$03
	.byte	$04
	.byte	$F0
	.byte	$80
	.byte	$03
	.byte	$FC
	.byte	$F8
	.byte	$81
	.byte	$03
	.byte	$04
	.byte	$F8
	.byte	$82
	.byte	$03
	.byte	$FC
	.byte	$00
	.byte	$83
	.byte	$03
	.byte	$04
	.byte	$00
	.byte	$84
	.byte	$03
	.byte	$FC
	.byte	$08
	.byte	$85
	.byte	$03
	.byte	$04
	.byte	$08
	.byte	$86
	.byte	$03
	.byte	$80
_ssana_b:
	.byte	$FC
	.byte	$F0
	.byte	$80
	.byte	$43
	.byte	$04
	.byte	$F0
	.byte	$7F
	.byte	$43
	.byte	$FC
	.byte	$F8
	.byte	$82
	.byte	$43
	.byte	$04
	.byte	$F8
	.byte	$81
	.byte	$43
	.byte	$FC
	.byte	$00
	.byte	$84
	.byte	$43
	.byte	$04
	.byte	$00
	.byte	$83
	.byte	$43
	.byte	$FC
	.byte	$08
	.byte	$86
	.byte	$43
	.byte	$04
	.byte	$08
	.byte	$85
	.byte	$43
	.byte	$80
_ssexpl:
	.byte	$FC
	.byte	$00
	.byte	$87
	.byte	$01
	.byte	$04
	.byte	$00
	.byte	$87
	.byte	$41
	.byte	$FC
	.byte	$08
	.byte	$87
	.byte	$81
	.byte	$04
	.byte	$08
	.byte	$87
	.byte	$C1
	.byte	$80
_sspointsa_00:
	.byte	$04
	.byte	$00
	.byte	$88
	.byte	$03
	.byte	$80
_sspointsa_01:
	.byte	$04
	.byte	$00
	.byte	$89
	.byte	$03
	.byte	$80
_sspointsa_02:
	.byte	$04
	.byte	$00
	.byte	$8A
	.byte	$03
	.byte	$80
_sspointsa_03:
	.byte	$04
	.byte	$00
	.byte	$8B
	.byte	$03
	.byte	$80
_sspointsa_04:
	.byte	$04
	.byte	$00
	.byte	$8C
	.byte	$03
	.byte	$80
_sspointsb_00:
	.byte	$00
	.byte	$00
	.byte	$8D
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$8E
	.byte	$03
	.byte	$80
_sspointsb_01:
	.byte	$00
	.byte	$00
	.byte	$8F
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$8E
	.byte	$03
	.byte	$80
_sspointsb_02:
	.byte	$00
	.byte	$00
	.byte	$90
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$8E
	.byte	$03
	.byte	$80
_spr_player0:
	.addr	_sspl_01_a
	.addr	_sspl_01_a
	.addr	_sspl_02_a
	.addr	_sspl_01_a
	.addr	_sspl_00_a
	.addr	_sspl_00_a
	.addr	_sspl_02_a
	.addr	_sspl_03_a
	.addr	_sspl_01_b
	.addr	_sspl_01_b
	.addr	_sspl_02_b
	.addr	_sspl_01_b
	.addr	_sspl_00_b
	.addr	_sspl_00_b
	.addr	_sspl_02_b
	.addr	_sspl_03_b
_spr_player1:
	.addr	_sspl_05_a
	.addr	_sspl_05_a
	.addr	_sspl_06_a
	.addr	_sspl_05_a
	.addr	_sspl_04_a
	.addr	_sspl_04_a
	.addr	_sspl_06_a
	.addr	_sspl_07_a
	.addr	_sspl_05_b
	.addr	_sspl_05_b
	.addr	_sspl_06_b
	.addr	_sspl_05_b
	.addr	_sspl_04_b
	.addr	_sspl_04_b
	.addr	_sspl_06_b
	.addr	_sspl_07_b
_spr_player:
	.addr	_spr_player0
	.addr	_spr_player1
_spr_enems0:
	.word	$0000
	.addr	_ssenb_00_a
	.addr	_ssenb_01_a
	.word	$0000
	.word	$0000
	.addr	_ssenb_00_b
	.addr	_ssenb_01_b
	.word	$0000
	.word	$0000
	.addr	_ssena_00_a
	.addr	_ssena_01_a
	.word	$0000
	.word	$0000
	.addr	_ssena_00_b
	.addr	_ssena_01_b
	.word	$0000
	.word	$0000
	.addr	_ssend_00_a
	.addr	_ssend_01_a
	.addr	_ssend_02_a
	.word	$0000
	.addr	_ssend_00_b
	.addr	_ssend_01_b
	.addr	_ssend_02_b
	.word	$0000
	.addr	_ssexpl
	.addr	_ssenc
	.addr	_ssene
	.addr	_ssana_a
	.word	$0000
	.word	$0000
	.word	$0000
	.addr	_ssana_b
	.word	$0000
	.word	$0000
	.word	$0000
_spr_enems1:
	.word	$0000
	.addr	_ssenb_00_a
	.addr	_ssenb_01_a
	.word	$0000
	.word	$0000
	.addr	_ssenb_00_b
	.addr	_ssenb_01_b
	.word	$0000
	.word	$0000
	.addr	_ssenf_00_a
	.addr	_ssenf_01_a
	.word	$0000
	.word	$0000
	.addr	_ssenf_00_b
	.addr	_ssenf_01_b
	.word	$0000
	.word	$0000
	.addr	_ssenf_02_a
	.addr	_ssenf_03_a
	.addr	_ssenf_04_a
	.word	$0000
	.addr	_ssenf_02_b
	.addr	_ssenf_03_b
	.addr	_ssenf_04_b
	.word	$0000
	.addr	_ssexpl
	.addr	_ssenc
	.addr	_ssene
	.addr	_ssana_a
	.word	$0000
	.word	$0000
	.word	$0000
	.addr	_ssana_b
	.word	$0000
	.word	$0000
	.word	$0000
_spr_base0:
	.byte	$19
	.byte	$1C
	.byte	$01
	.byte	$09
	.byte	$11
	.byte	$00
	.byte	$1B
	.byte	$1A
_spr_points:
	.addr	_sspointsa_00
	.addr	_sspointsa_01
	.addr	_sspointsa_02
	.addr	_sspointsa_03
	.addr	_sspointsa_04
	.addr	_sspointsb_00
	.addr	_sspointsb_01
	.addr	_sspointsb_02
_spr_hud:
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$05
	.byte	$03
	.byte	$10
	.byte	$00
	.byte	$05
	.byte	$03
	.byte	$18
	.byte	$00
	.byte	$05
	.byte	$03
	.byte	$20
	.byte	$00
	.byte	$05
	.byte	$03
	.byte	$28
	.byte	$00
	.byte	$05
	.byte	$03
	.byte	$00
	.byte	$08
	.byte	$03
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$04
	.byte	$03
	.byte	$10
	.byte	$08
	.byte	$05
	.byte	$03
	.byte	$18
	.byte	$08
	.byte	$10
	.byte	$01
	.byte	$20
	.byte	$08
	.byte	$10
	.byte	$01
	.byte	$28
	.byte	$08
	.byte	$10
	.byte	$01
	.byte	$80
_attrs_adds:
	.byte	$C0
	.byte	$C8
	.byte	$D0
	.byte	$D8
	.byte	$E0
	.byte	$E8
	.byte	$F0
	.byte	$F8
_attr_buff_adds:
	.byte	$00
	.byte	$08
	.byte	$10
	.byte	$18
	.byte	$20
	.byte	$28
	.byte	$30
	.byte	$38
_wp_addr_lo:
	.byte	$00
	.byte	$20
	.byte	$40
	.byte	$60
	.byte	$80
	.byte	$A0
	.byte	$C0
	.byte	$E0
	.byte	$00
	.byte	$20
	.byte	$40
	.byte	$60
	.byte	$80
	.byte	$A0
	.byte	$C0
	.byte	$E0
	.byte	$00
	.byte	$20
	.byte	$40
	.byte	$60
	.byte	$80
	.byte	$A0
	.byte	$C0
	.byte	$E0
	.byte	$00
	.byte	$20
	.byte	$40
	.byte	$60
	.byte	$80
	.byte	$A0
_wp_addr_hi:
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$21
	.byte	$21
	.byte	$21
	.byte	$21
	.byte	$21
	.byte	$21
	.byte	$21
	.byte	$21
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$23
	.byte	$23
	.byte	$23
	.byte	$23
	.byte	$23
	.byte	$23
_shr2:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$06
	.byte	$06
	.byte	$06
	.byte	$06
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$07
_enems_lut_falling:
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$05
	.byte	$05
	.byte	$06
_enems_lut_acceleration:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
_drop_fixed_times:
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$0B
_pow2:
	.byte	$01
	.byte	$02
	.byte	$04
	.byte	$08
	.byte	$10
	.byte	$20
	.byte	$40
	.byte	$80
_pc_scores_a:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$05
_pc_scores_b:
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$04
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$00
_sfx_item:
	.byte	$12
	.byte	$05
	.byte	$08
	.byte	$11
	.byte	$10
	.byte	$13
	.byte	$14
	.byte	$02
_bg_anim:
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$02
_score_offsets:
	.byte	$00
	.byte	$05
_behs0:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$08
	.byte	$04
	.byte	$04
	.byte	$14
	.byte	$04
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$0A
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
_behs1:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$04
	.byte	$00
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$0A
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
_behs3:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$04
	.byte	$04
	.byte	$14
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$0A
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
_behs4:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$20
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$0A
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
_behs6:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$0A
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
_behs7:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$04
	.byte	$00
	.byte	$14
	.byte	$04
	.byte	$04
	.byte	$14
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$0A
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
_level_map:
	.addr	_map_0
	.addr	_map_1
	.addr	_map_2
	.addr	_map_3
	.addr	_map_4
	.addr	_map_5
	.addr	_map_6
	.addr	_map_5
	.addr	_map_8
	.addr	_map_9
_level_ts_tmaps_0:
	.addr	_ts0_tmaps_0
	.addr	_ts1_tmaps_0
	.addr	_ts0_tmaps_0
	.addr	_ts3_tmaps_0
	.addr	_ts4_tmaps_0
	.addr	_ts1_tmaps_0
	.addr	_ts6_tmaps_0
	.addr	_ts7_tmaps_0
	.addr	_ts8_tmaps_0
	.addr	_ts9_tmaps_0
_level_ts_tmaps_1:
	.addr	_ts0_tmaps_1
	.addr	_ts1_tmaps_1
	.addr	_ts0_tmaps_1
	.addr	_ts3_tmaps_1
	.addr	_ts4_tmaps_1
	.addr	_ts1_tmaps_1
	.addr	_ts6_tmaps_1
	.addr	_ts7_tmaps_1
	.addr	_ts8_tmaps_1
	.addr	_ts9_tmaps_1
_level_ts_tmaps_2:
	.addr	_ts0_tmaps_2
	.addr	_ts1_tmaps_2
	.addr	_ts0_tmaps_2
	.addr	_ts3_tmaps_2
	.addr	_ts4_tmaps_2
	.addr	_ts1_tmaps_2
	.addr	_ts6_tmaps_2
	.addr	_ts7_tmaps_2
	.addr	_ts8_tmaps_2
	.addr	_ts9_tmaps_2
_level_ts_tmaps_3:
	.addr	_ts0_tmaps_3
	.addr	_ts1_tmaps_3
	.addr	_ts0_tmaps_3
	.addr	_ts3_tmaps_3
	.addr	_ts4_tmaps_3
	.addr	_ts1_tmaps_3
	.addr	_ts6_tmaps_3
	.addr	_ts7_tmaps_3
	.addr	_ts8_tmaps_3
	.addr	_ts9_tmaps_3
_level_ts_pals_0:
	.addr	_ts0_pals_0
	.addr	_ts1_pals_0
	.addr	_ts0_pals_0
	.addr	_ts3_pals_0
	.addr	_ts4_pals_0
	.addr	_ts1_pals_0
	.addr	_ts6_pals_0
	.addr	_ts7_pals_0
	.addr	_ts8_pals_0
	.addr	_ts9_pals_0
_level_ts_pals_1:
	.addr	_ts0_pals_1
	.addr	_ts1_pals_1
	.addr	_ts0_pals_1
	.addr	_ts3_pals_1
	.addr	_ts4_pals_1
	.addr	_ts1_pals_1
	.addr	_ts6_pals_1
	.addr	_ts7_pals_1
	.addr	_ts8_pals_1
	.addr	_ts9_pals_1
_level_ts_pals_2:
	.addr	_ts0_pals_2
	.addr	_ts1_pals_2
	.addr	_ts0_pals_2
	.addr	_ts3_pals_2
	.addr	_ts4_pals_2
	.addr	_ts1_pals_2
	.addr	_ts6_pals_2
	.addr	_ts7_pals_2
	.addr	_ts8_pals_2
	.addr	_ts9_pals_2
_level_ts_pals_3:
	.addr	_ts0_pals_3
	.addr	_ts1_pals_3
	.addr	_ts0_pals_3
	.addr	_ts3_pals_3
	.addr	_ts4_pals_3
	.addr	_ts1_pals_3
	.addr	_ts6_pals_3
	.addr	_ts7_pals_3
	.addr	_ts8_pals_3
	.addr	_ts9_pals_3
_level_pal_bg:
	.addr	_palts0
	.addr	_palts1
	.addr	_palts2
	.addr	_palts3
	.addr	_palts4
	.addr	_palts5
	.addr	_palts6
	.addr	_palts7
	.addr	_palts8
	.addr	_palts9
_level_behs:
	.addr	_behs0
	.addr	_behs1
	.addr	_behs0
	.addr	_behs3
	.addr	_behs4
	.addr	_behs1
	.addr	_behs6
	.addr	_behs7
	.addr	_behs4
	.addr	_behs0
_level_strips:
	.addr	_enems_strip_0
	.addr	_enems_strip_1
	.addr	_enems_strip_2
	.addr	_enems_strip_3
	.addr	_enems_strip_4
	.addr	_enems_strip_5
	.addr	_enems_strip_6
	.addr	_enems_strip_5
	.addr	_enems_strip_8
	.addr	_enems_strip_9
_level_spr_enems:
	.addr	_spr_enems0
	.addr	_spr_enems0
	.addr	_spr_enems1
	.addr	_spr_enems0
	.addr	_spr_enems0
	.addr	_spr_enems1
	.addr	_spr_enems0
	.addr	_spr_enems0
	.addr	_spr_enems1
	.addr	_spr_enems0
_level_killable_enems:
	.byte	$0C
	.byte	$0C
	.byte	$0C
	.byte	$0C
	.byte	$0C
	.byte	$0C
	.byte	$0C
	.byte	$0C
	.byte	$0C
_level_spr_base:
	.addr	_spr_base0
	.addr	_spr_base0
	.addr	_spr_base0
	.addr	_spr_base0
	.addr	_spr_base0
	.addr	_spr_base0
	.addr	_spr_base0
	.addr	_spr_base0
	.addr	_spr_base0
	.addr	_spr_base0
_level_names:
	.byte	$21
	.byte	$2C
	.byte	$00
	.byte	$33
	.byte	$2F
	.byte	$2C
	.byte	$29
	.byte	$34
	.byte	$2F
	.byte	$00
	.byte	$2E
	.byte	$2F
	.byte	$23
	.byte	$34
	.byte	$35
	.byte	$32
	.byte	$2E
	.byte	$2F
	.byte	$00
	.byte	$00
	.byte	$25
	.byte	$2C
	.byte	$00
	.byte	$22
	.byte	$2F
	.byte	$23
	.byte	$21
	.byte	$34
	.byte	$21
	.byte	$00
	.byte	$23
	.byte	$2F
	.byte	$2E
	.byte	$27
	.byte	$25
	.byte	$2C
	.byte	$21
	.byte	$24
	.byte	$2F
	.byte	$33
	.byte	$2D
	.byte	$2F
	.byte	$36
	.byte	$25
	.byte	$24
	.byte	$29
	.byte	$3A
	.byte	$21
	.byte	$33
	.byte	$00
	.byte	$23
	.byte	$21
	.byte	$2C
	.byte	$2C
	.byte	$25
	.byte	$00
	.byte	$23
	.byte	$21
	.byte	$23
	.byte	$21
	.byte	$2C
	.byte	$2C
	.byte	$35
	.byte	$36
	.byte	$29
	.byte	$2F
	.byte	$33
	.byte	$2F
	.byte	$00
	.byte	$00
	.byte	$26
	.byte	$32
	.byte	$29
	.byte	$2F
	.byte	$00
	.byte	$32
	.byte	$2F
	.byte	$23
	.byte	$21
	.byte	$00
	.byte	$23
	.byte	$21
	.byte	$2C
	.byte	$2F
	.byte	$32
	.byte	$21
	.byte	$23
	.byte	$2F
	.byte	$33
	.byte	$00
	.byte	$30
	.byte	$25
	.byte	$33
	.byte	$21
	.byte	$24
	.byte	$29
	.byte	$2C
	.byte	$2C
	.byte	$21
	.byte	$00
_title_png_rle:
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$FE
	.byte	$00
	.byte	$01
	.byte	$25
	.byte	$AB
	.byte	$AC
	.byte	$01
	.byte	$13
	.byte	$AD
	.byte	$00
	.byte	$01
	.byte	$09
	.byte	$AE
	.byte	$00
	.byte	$AF
	.byte	$B1
	.byte	$AF
	.byte	$B1
	.byte	$B0
	.byte	$B3
	.byte	$B4
	.byte	$B1
	.byte	$B0
	.byte	$B1
	.byte	$AF
	.byte	$B1
	.byte	$B0
	.byte	$B3
	.byte	$AF
	.byte	$B1
	.byte	$B0
	.byte	$B3
	.byte	$00
	.byte	$B6
	.byte	$00
	.byte	$01
	.byte	$09
	.byte	$AE
	.byte	$00
	.byte	$B0
	.byte	$AE
	.byte	$B2
	.byte	$B3
	.byte	$B0
	.byte	$B5
	.byte	$B4
	.byte	$00
	.byte	$B0
	.byte	$00
	.byte	$B0
	.byte	$AE
	.byte	$B4
	.byte	$B4
	.byte	$B0
	.byte	$AE
	.byte	$B4
	.byte	$B4
	.byte	$00
	.byte	$B6
	.byte	$00
	.byte	$01
	.byte	$09
	.byte	$AE
	.byte	$00
	.byte	$B2
	.byte	$B8
	.byte	$B8
	.byte	$B5
	.byte	$B4
	.byte	$00
	.byte	$B4
	.byte	$00
	.byte	$B0
	.byte	$00
	.byte	$B2
	.byte	$B8
	.byte	$B4
	.byte	$B4
	.byte	$B2
	.byte	$B8
	.byte	$B4
	.byte	$B4
	.byte	$00
	.byte	$B6
	.byte	$00
	.byte	$01
	.byte	$09
	.byte	$AE
	.byte	$00
	.byte	$B7
	.byte	$01
	.byte	$11
	.byte	$00
	.byte	$B6
	.byte	$00
	.byte	$01
	.byte	$09
	.byte	$B9
	.byte	$BA
	.byte	$BB
	.byte	$BD
	.byte	$BE
	.byte	$C1
	.byte	$BA
	.byte	$C2
	.byte	$C3
	.byte	$C6
	.byte	$C7
	.byte	$C9
	.byte	$CA
	.byte	$CC
	.byte	$CD
	.byte	$CA
	.byte	$D0
	.byte	$BD
	.byte	$C3
	.byte	$BD
	.byte	$D1
	.byte	$D2
	.byte	$00
	.byte	$01
	.byte	$0B
	.byte	$BC
	.byte	$BF
	.byte	$C0
	.byte	$00
	.byte	$00
	.byte	$C4
	.byte	$C5
	.byte	$C8
	.byte	$C8
	.byte	$00
	.byte	$CB
	.byte	$CE
	.byte	$CF
	.byte	$CB
	.byte	$BC
	.byte	$BF
	.byte	$C5
	.byte	$BF
	.byte	$00
	.byte	$01
	.byte	$FE
	.byte	$00
	.byte	$01
	.byte	$D8
	.byte	$6A
	.byte	$5A
	.byte	$01
	.byte	$03
	.byte	$9A
	.byte	$00
	.byte	$00
	.byte	$A6
	.byte	$A5
	.byte	$01
	.byte	$03
	.byte	$A9
	.byte	$00
	.byte	$01
	.byte	$20
	.byte	$01
	.byte	$00
_cuts0_png_rle:
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$C9
	.byte	$41
	.byte	$42
	.byte	$45
	.byte	$46
	.byte	$00
	.byte	$01
	.byte	$05
	.byte	$4A
	.byte	$4B
	.byte	$4E
	.byte	$00
	.byte	$01
	.byte	$11
	.byte	$40
	.byte	$43
	.byte	$44
	.byte	$47
	.byte	$48
	.byte	$49
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$4C
	.byte	$4D
	.byte	$4F
	.byte	$00
	.byte	$01
	.byte	$11
	.byte	$50
	.byte	$52
	.byte	$53
	.byte	$56
	.byte	$57
	.byte	$5A
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$5C
	.byte	$5E
	.byte	$5F
	.byte	$62
	.byte	$00
	.byte	$01
	.byte	$11
	.byte	$51
	.byte	$54
	.byte	$55
	.byte	$58
	.byte	$59
	.byte	$5B
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$5D
	.byte	$60
	.byte	$61
	.byte	$63
	.byte	$00
	.byte	$01
	.byte	$11
	.byte	$64
	.byte	$66
	.byte	$67
	.byte	$6A
	.byte	$6B
	.byte	$6D
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$6F
	.byte	$70
	.byte	$00
	.byte	$01
	.byte	$12
	.byte	$65
	.byte	$68
	.byte	$69
	.byte	$69
	.byte	$6C
	.byte	$6E
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$71
	.byte	$72
	.byte	$00
	.byte	$01
	.byte	$12
	.byte	$73
	.byte	$76
	.byte	$69
	.byte	$79
	.byte	$7A
	.byte	$00
	.byte	$73
	.byte	$00
	.byte	$73
	.byte	$00
	.byte	$00
	.byte	$7C
	.byte	$7D
	.byte	$00
	.byte	$73
	.byte	$00
	.byte	$01
	.byte	$0F
	.byte	$74
	.byte	$75
	.byte	$77
	.byte	$78
	.byte	$7B
	.byte	$00
	.byte	$74
	.byte	$75
	.byte	$74
	.byte	$75
	.byte	$74
	.byte	$00
	.byte	$7E
	.byte	$7F
	.byte	$74
	.byte	$75
	.byte	$00
	.byte	$01
	.byte	$FE
	.byte	$00
	.byte	$01
	.byte	$FE
	.byte	$00
	.byte	$01
	.byte	$13
	.byte	$50
	.byte	$50
	.byte	$00
	.byte	$50
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$55
	.byte	$55
	.byte	$04
	.byte	$07
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$06
	.byte	$09
	.byte	$0A
	.byte	$08
	.byte	$00
	.byte	$01
	.byte	$21
	.byte	$01
	.byte	$00
_cuts1_png_rle:
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$CB
	.byte	$82
	.byte	$83
	.byte	$00
	.byte	$01
	.byte	$05
	.byte	$4A
	.byte	$4B
	.byte	$4E
	.byte	$00
	.byte	$01
	.byte	$12
	.byte	$80
	.byte	$81
	.byte	$84
	.byte	$85
	.byte	$86
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$4C
	.byte	$4D
	.byte	$4F
	.byte	$00
	.byte	$01
	.byte	$12
	.byte	$87
	.byte	$88
	.byte	$8B
	.byte	$8C
	.byte	$8F
	.byte	$90
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$5C
	.byte	$5E
	.byte	$5F
	.byte	$62
	.byte	$00
	.byte	$01
	.byte	$12
	.byte	$89
	.byte	$8A
	.byte	$8D
	.byte	$8E
	.byte	$91
	.byte	$92
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$5D
	.byte	$60
	.byte	$61
	.byte	$63
	.byte	$00
	.byte	$01
	.byte	$12
	.byte	$93
	.byte	$94
	.byte	$97
	.byte	$98
	.byte	$9B
	.byte	$9C
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$6F
	.byte	$70
	.byte	$00
	.byte	$01
	.byte	$13
	.byte	$95
	.byte	$96
	.byte	$99
	.byte	$9A
	.byte	$9D
	.byte	$9E
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$71
	.byte	$72
	.byte	$00
	.byte	$01
	.byte	$12
	.byte	$73
	.byte	$9F
	.byte	$A0
	.byte	$A3
	.byte	$A4
	.byte	$A7
	.byte	$A8
	.byte	$00
	.byte	$73
	.byte	$00
	.byte	$00
	.byte	$7C
	.byte	$7D
	.byte	$00
	.byte	$73
	.byte	$00
	.byte	$01
	.byte	$0F
	.byte	$74
	.byte	$75
	.byte	$A1
	.byte	$A2
	.byte	$A5
	.byte	$A6
	.byte	$A9
	.byte	$AA
	.byte	$74
	.byte	$75
	.byte	$74
	.byte	$00
	.byte	$7E
	.byte	$7F
	.byte	$74
	.byte	$75
	.byte	$00
	.byte	$01
	.byte	$FE
	.byte	$00
	.byte	$01
	.byte	$FE
	.byte	$00
	.byte	$01
	.byte	$16
	.byte	$50
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$CC
	.byte	$F0
	.byte	$04
	.byte	$07
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$0E
	.byte	$0F
	.byte	$0A
	.byte	$08
	.byte	$00
	.byte	$01
	.byte	$21
	.byte	$01
	.byte	$00
L32B0:
	.byte	$44,$4F,$4E,$20,$50,$49,$4D,$50,$4F,$4E,$20,$20,$20,$20,$20,$20
	.byte	$20,$20,$20,$20,$20,$20,$45,$53,$50,$49,$4E,$45,$54,$45,$00
L32AA:
	.byte	$45,$53,$50,$49,$4E,$45,$54,$45,$20,$20,$20,$20,$20,$20,$20,$20
	.byte	$20,$20,$20,$20,$44,$4F,$4E,$20,$50,$49,$4D,$50,$4F,$4E,$00
L32B5:
	.byte	$23,$30,$30,$30,$30,$30,$30,$20,$25,$25,$25,$20,$26,$20,$20,$20
	.byte	$20,$26,$20,$25,$25,$25,$20,$30,$30,$30,$30,$30,$30,$23,$00
L3FEA:
	.byte	$3C,$51,$55,$49,$45,$4E,$20,$45,$53,$20,$55,$53,$54,$45,$44,$2C
	.byte	$20,$53,$45,$5D,$4F,$52,$49,$54,$41,$3F,$27,$00
L3FE0:
	.byte	$53,$4F,$52,$50,$52,$45,$53,$41,$20,$45,$4E,$43,$4F,$4E,$54,$52
	.byte	$41,$52,$54,$45,$20,$41,$51,$55,$49,$21,$27,$00
L3FE5:
	.byte	$27,$3C,$51,$55,$49,$45,$4E,$20,$53,$4F,$59,$3F,$20,$3C,$44,$4F
	.byte	$4E,$44,$45,$20,$45,$53,$54,$4F,$59,$3F,$00
L3FF0:
	.byte	$27,$45,$48,$2C,$20,$54,$45,$20,$47,$41,$4E,$4F,$20,$4F,$54,$52
	.byte	$41,$20,$56,$45,$5A,$20,$41,$4C,$00
L3FFA:
	.byte	$27,$5B,$4A,$4F,$2C,$20,$41,$4E,$41,$2C,$20,$45,$53,$20,$51,$55
	.byte	$45,$20,$54,$45,$20,$56,$41,$53,$00
L3FDB:
	.byte	$27,$5B,$48,$4F,$4C,$41,$2C,$20,$44,$4F,$4E,$20,$50,$49,$4D,$50
	.byte	$4F,$4E,$21,$20,$5B,$51,$55,$45,$00
L3F73:
	.byte	$40,$20,$32,$30,$31,$39,$20,$54,$48,$45,$20,$4D,$4F,$4A,$4F,$4E
	.byte	$20,$54,$57,$49,$4E,$53,$00
L3FF5:
	.byte	$45,$53,$43,$4F,$4E,$44,$49,$54,$45,$2C,$20,$45,$53,$50,$49,$4E
	.byte	$45,$54,$45,$2E,$27,$00
L3F8B:
	.byte	$45,$4C,$49,$47,$45,$20,$50,$45,$52,$53,$4F,$4E,$41,$4A,$45,$3A
	.byte	$00
L3FFF:
	.byte	$4D,$55,$59,$20,$4C,$45,$4A,$4F,$53,$21,$20,$50,$53,$21,$27,$00
L3F7F:
	.byte	$32,$20,$50,$4C,$41,$59,$45,$52,$20,$43,$4F,$2D,$4F,$50,$00
L4005:
	.byte	$52,$4F,$4E,$44,$41,$53,$20,$47,$41,$4E,$41,$44,$41,$53,$00
L32BC:
	.byte	$20,$50,$52,$45,$53,$53,$20,$53,$54,$41,$52,$54,$21,$00
L4191:
	.byte	$20,$20,$25,$25,$25,$20,$30,$30,$30,$30,$30,$30,$23,$00
L3FA6:
	.byte	$5E,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$5F,$00
L3F9C:
	.byte	$45,$4C,$49,$47,$45,$20,$4E,$49,$56,$45,$4C,$3A,$00
L3F84:
	.byte	$32,$20,$50,$4C,$41,$59,$45,$52,$20,$56,$53,$2E,$00
L4026:
	.byte	$47,$41,$4E,$41,$20,$52,$4F,$4E,$44,$41,$20,$00
L400A:
	.byte	$50,$4C,$41,$59,$45,$52,$20,$31,$3A,$20,$00
L3F60:
	.byte	$52,$45,$43,$4F,$52,$44,$20,$20,$20,$20,$00
L3F58:
	.byte	$50,$55,$4E,$54,$4F,$53,$20,$20,$20,$20,$00
L4012:
	.byte	$50,$4C,$41,$59,$45,$52,$20,$32,$3A,$20,$00
L40B4:
	.byte	$46,$41,$53,$45,$20,$46,$49,$4E,$41,$4C,$00
L3F95	:=	L32AA+20
L3FC6:
	.byte	$47,$41,$4D,$45,$20,$4F,$56,$45,$52,$21,$00
L402F:
	.byte	$55,$4E,$20,$45,$4D,$50,$41,$54,$45,$21,$00
L3FB4:
	.byte	$43,$4F,$4E,$54,$49,$4E,$55,$41,$20,$00
L3FBE:
	.byte	$53,$49,$5E,$20,$20,$5F,$4E,$4F,$00
L3FA1:
	.byte	$41,$4C,$20,$41,$5A,$41,$52,$21,$00
L3F7A:
	.byte	$31,$20,$50,$4C,$41,$59,$45,$52,$00
L3F90	:=	L32B0+22
L401E:
	.byte	$50,$4C,$41,$59,$45,$52,$20,$00
L40A0:
	.byte	$52,$4F,$4E,$44,$41,$3A,$20,$00
L4038	:=	L401E+0
L32C3:
	.byte	$20,$20,$24,$20,$20,$20,$00
L4040:
	.byte	$47,$41,$4E,$41,$21,$00
L40AB:
	.byte	$46,$41,$53,$45,$20,$00

.segment	"BSS"

.segment	"ZEROPAGE"
_spr_enems:
	.res	2,$00
_c_ts_tmaps_0:
	.res	2,$00
_c_ts_tmaps_1:
	.res	2,$00
_c_ts_tmaps_2:
	.res	2,$00
_c_ts_tmaps_3:
	.res	2,$00
_c_ts_pals_0:
	.res	2,$00
_c_ts_pals_1:
	.res	2,$00
_c_ts_pals_2:
	.res	2,$00
_c_ts_pals_3:
	.res	2,$00
_c_level_killable_enems:
	.res	1,$00
_c_spr_base:
	.res	2,$00
_map_ptr:
	.res	2,$00
_gp_gen:
	.res	2,$00
_map_tilepos:
	.res	1,$00
_behs:
	.res	2,$00
_ul:
	.res	2,$00
_gp_addr:
	.res	2,$00
_oam_index:
	.res	1,$00
_gpit:
	.res	1,$00
_gpjt:
	.res	1,$00
_rda:
	.res	1,$00
_rdb:
	.res	1,$00
_rdc:
	.res	1,$00
_rdd:
	.res	1,$00
_rdt:
	.res	1,$00
_rds:
	.res	1,$00
_rds16:
	.res	2,$00
_rdu16:
	.res	2,$00
_rdx:
	.res	1,$00
_rdy:
	.res	2,$00
_gpiit:
	.res	2,$00
_gpijt:
	.res	2,$00
_uin:
	.res	2,$00
_cam_pos:
	.res	2,$00
_cam_pos_lsb:
	.res	1,$00
_cam_pos_bit_4:
	.res	1,$00
_cam_pos_bit_3:
	.res	1,$00
_scroll_state:
	.res	1,$00
_scroll_y:
	.res	1,$00
_o_scroll_y:
	.res	1,$00
_wtp:
	.res	1,$00
_wtpr:
	.res	1,$00
_rle_buffer_ptr:
	.res	2,$00
_rle_buffer_i:
	.res	1,$00
_rle_ctr:
	.res	1,$00
_rle_value:
	.res	1,$00
_attr_buffer_i:
	.res	1,$00
_gppi:
	.res	1,$00
_gpri:
	.res	1,$00
_gpq:
	.res	2,$00
_gbuffer_y:
	.res	1,$00
_pad:
	.res	1,$00
_py:
	.res	2,$00
_px:
	.res	2,$00
_pvx:
	.res	1,$00
_pvy:
	.res	1,$00
_prx:
	.res	1,$00
_pry:
	.res	2,$00
_psprid:
	.res	1,$00
_pfacing:
	.res	1,$00
_pkill:
	.res	1,$00
_ppunching:
	.res	1,$00
_ptgmx:
	.res	1,$00
_plives:
	.res	1,$00
_plife:
	.res	1,$00
_pst:
	.res	1,$00
_pct:
	.res	1,$00
_gpint:
	.res	2,$00
_pj:
	.res	1,$00
_pctj:
	.res	1,$00
_ppossee:
	.res	1,$00
_pgotten:
	.res	1,$00
_pindex:
	.res	1,$00
_score_offset:
	.res	1,$00
_pcharacter:
	.res	1,$00
_psinking:
	.res	1,$00
_cx1:
	.res	1,$00
_cy1:
	.res	1,$00
_cx2:
	.res	1,$00
_cy2:
	.res	1,$00
_at1:
	.res	1,$00
_at2:
	.res	1,$00
_caux:
	.res	1,$00
__d1:
	.res	1,$00
__d2:
	.res	1,$00
_strip_pointer:
	.res	2,$00
_enit:
	.res	1,$00
_enjt:
	.res	1,$00
_enx:
	.res	8,$00
_eny:
	.res	16,$00
_encx:
	.res	1,$00
_envx:
	.res	1,$00
_envy:
	.res	1,$00
__enct:
	.res	1,$00
__enx:
	.res	1,$00
__enx1:
	.res	1,$00
__enx2:
	.res	1,$00
__enmx:
	.res	1,$00
__enmy:
	.res	1,$00
__eny:
	.res	2,$00
_ensloti:
	.res	1,$00
_enslots:
	.res	8,$00
_bit:
	.res	1,$00
_bpy:
	.res	2,$00
_bsloti:
	.res	1,$00
_bslots:
	.res	8,$00
__bx:
	.res	2,$00
__by:
	.res	2,$00
__puas_x:
	.res	1,$00
__puas_mx:
	.res	1,$00
__puas_y:
	.res	2,$00
.segment	"BSS"
_ntsc:
	.res	1,$00
_ticks:
	.res	1,$00
_halfticks:
	.res	1,$00
_level:
	.res	1,$00
_game_time:
	.res	1,$00
_ticker:
	.res	1,$00
_tick:
	.res	1,$00
_display:
	.res	1,$00
_flash:
	.res	1,$00
_free_frame:
	.res	1,$00
_fskipct:
	.res	1,$00
_scroll_speed:
	.res	1,$00
_goal_time:
	.res	1,$00
_sadv:
	.res	1,$00
_pad0:
	.res	1,$00
_pad1:
	.res	1,$00
_prevpad:
	.res	1,$00
_pad_once:
	.res	1,$00
_pad_doce:
	.res	1,$00
_half_life:
	.res	1,$00
_frame_counter:
	.res	1,$00
_hl_proc:
	.res	1,$00
_game_mode:
	.res	1,$00
_collide_players:
	.res	1,$00
_respawn_players:
	.res	1,$00
_nt:
	.res	2,$00
_do_split:
	.res	1,$00
_pselected:
	.res	1,$00
_update_list:
	.res	97,$00
_fader:
	.res	1,$00
_is_scrolling:
	.res	1,$00
_autoscroll:
	.res	1,$00
_scroll_to:
	.res	2,$00
_bx:
	.res	16,$00
_by:
	.res	16,$00
_bvx:
	.res	8,$00
_bvy:
	.res	8,$00
_ba:
	.res	8,$00
_pflickers:
	.res	1,$00
_p_pressingA:
	.res	1,$00
_p_pressingB:
	.res	1,$00
_pdpadaccelerates:
	.res	1,$00
_pndpaddeccelerates:
	.res	1,$00
_pcontinues:
	.res	1,$00
_eny1:
	.res	16,$00
_enx1:
	.res	8,$00
_enx2:
	.res	8,$00
_enct:
	.res	8,$00
_enmx:
	.res	8,$00
_enmy:
	.res	8,$00
_ena:
	.res	8,$00
_ent:
	.res	8,$00
_enl:
	.res	8,$00
_enhitbg:
	.res	1,$00
_entypekillable:
	.res	8,$00
_enstart:
	.res	1,$00
_bcd_score:
	.res	10,$00
_bcd_high_score:
	.res	5,$00
_points_x:
	.res	4,$00
_points_y:
	.res	4,$00
_points_id:
	.res	4,$00
_points_fc:
	.res	4,$00
_points_slots_index:
	.res	1,$00
_puas_x:
	.res	2,$00
_puas_y:
	.res	4,$00
_puas_mx:
	.res	2,$00
_puas_st:
	.res	2,$00
_puas_who:
	.res	2,$00
__PLAYER_AX:
	.res	1,$00
__PLAYER_RX:
	.res	1,$00
_pslips:
	.res	1,$00
_pal_cycle_do:
	.res	1,$00
_pal_cycle:
	.res	3,$00
_signal10000:
	.res	1,$00
_signal_continue:
	.res	1,$00
_round:
	.res	1,$00
_level_selected:
	.res	1,$00
_winner:
	.res	1,$00
_pscore:
	.res	2,$00
_apvx:
	.res	2,$00
_apvy:
	.res	2,$00
_aprx:
	.res	2,$00
_apfacing:
	.res	2,$00
_apkill:
	.res	2,$00
_aptgmx:
	.res	2,$00
_aplives:
	.res	2,$00
_aplife:
	.res	2,$00
_apst:
	.res	2,$00
_apct:
	.res	2,$00
_apsinking:
	.res	2,$00
_ap_pressingA:
	.res	2,$00
_ap_pressingB:
	.res	2,$00
_apj:
	.res	2,$00
_apctj:
	.res	2,$00
_appossee:
	.res	2,$00
_apgotten:
	.res	2,$00
_apon:
	.res	2,$00
_apcharacter:
	.res	2,$00
_apy:
	.res	4,$00
_apcy:
	.res	4,$00
_apx:
	.res	4,$00
_apcx:
	.res	4,$00
_apry:
	.res	4,$00

; ---------------------------------------------------------------
; void __near__ bcd_score_init (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bcd_score_init: near

.segment	"CODE"

;
; memfill (bcd_score, 16, 10);
;
	jsr     decsp3
	lda     #<(_bcd_score)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_bcd_score)
	sta     (sp),y
	lda     #$10
	ldy     #$00
	sta     (sp),y
	ldx     #$00
	lda     #$0A
	jmp     _memfill

.endproc

; ---------------------------------------------------------------
; void __near__ bcd_high_score_init (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bcd_high_score_init: near

.segment	"CODE"

;
; memfill (bcd_high_score, 16, 5);
;
	jsr     decsp3
	lda     #<(_bcd_high_score)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_bcd_high_score)
	sta     (sp),y
	lda     #$10
	ldy     #$00
	sta     (sp),y
	ldx     #$00
	lda     #$05
	jmp     _memfill

.endproc

; ---------------------------------------------------------------
; void __near__ bcd_score_add_5_2 (unsigned char, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bcd_score_add_5_2: near

.segment	"CODE"

;
; void bcd_score_add_5_2 (unsigned char d1, unsigned char d2) {
;
	jsr     pusha
;
; __asm__ ("ldx %v", pindex);
;
	ldx     _pindex
;
; __asm__ ("lda %v, x", score_offsets);
;
	lda     _score_offsets,x
;
; __asm__ ("tax");
;
	tax
;
; __asm__ ("ldy #0");
;
	ldy     #0
;
; __asm__ ("clc");
;
	clc
;
; __asm__ ("lda (sp), y");
;
	lda     (sp),y
;
; __asm__ ("adc %v+0, x", bcd_score);
;
	adc     _bcd_score+0,x
;
; __asm__ ("cmp #26");    // "A - 26"
;
	cmp     #26
;
; __asm__ ("bcc %g", BSA52S1);  // A <= 26
;
	bcc     L2C24
;
; __asm__ ("inc %v+1, x", bcd_score);
;
	inc     _bcd_score+1,x
;
; __asm__ ("sec");
;
	sec
;
; __asm__ ("sbc #10");
;
	sbc     #10
;
; __asm__ ("sta %v+0, x", bcd_score);
;
L2C24:	sta     _bcd_score+0,x
;
; __asm__ ("iny");
;
	iny
;
; __asm__ ("clc");
;
	clc
;
; __asm__ ("lda (sp), y");
;
	lda     (sp),y
;
; __asm__ ("adc %v+1, x", bcd_score);
;
	adc     _bcd_score+1,x
;
; __asm__ ("cmp #26");
;
	cmp     #26
;
; __asm__ ("bcc %g", BSA52S2);
;
	bcc     L2C3B
;
; __asm__ ("inc %v+2, x", bcd_score);
;
	inc     _bcd_score+2,x
;
; __asm__ ("sec");
;
	sec
;
; __asm__ ("sbc #10");
;
	sbc     #10
;
; __asm__ ("sta %v+1, x", bcd_score);
;
L2C3B:	sta     _bcd_score+1,x
;
; __asm__ ("lda %v+2, x", bcd_score);
;
	lda     _bcd_score+2,x
;
; __asm__ ("cmp #26");
;
	cmp     #26
;
; __asm__ ("bcc %g", BSA52S3);
;
	bcc     L2C4C
;
; __asm__ ("inc %v+3, x", bcd_score);
;
	inc     _bcd_score+3,x
;
; __asm__ ("sec");
;
	sec
;
; __asm__ ("sbc #10");
;
	sbc     #10
;
; __asm__ ("sta %v+2, x", bcd_score);
;
	sta     _bcd_score+2,x
;
; __asm__ ("sta %v", signal10000);
;
	sty     _signal10000
;
; __asm__ ("lda %v+3, x", bcd_score);
;
L2C4C:	lda     _bcd_score+3,x
;
; __asm__ ("cmp #26");
;
	cmp     #26
;
; __asm__ ("bcc %g", BSA52S4);
;
	bcc     L2C61
;
; __asm__ ("inc %v+4, x", bcd_score);
;
	inc     _bcd_score+4,x
;
; __asm__ ("sec");
;
	sec
;
; __asm__ ("sbc #10");
;
	sbc     #10
;
; __asm__ ("sta %v+3, x", bcd_score);
;
	sta     _bcd_score+3,x
;
; __asm__ ("lda %v+4, x", bcd_score);
;
L2C61:	lda     _bcd_score+4,x
;
; __asm__ ("cmp #26");
;
	cmp     #26
;
; __asm__ ("bcc %g", BSA52S5);
;
	bcc     L2C72
;
; __asm__ ("sec");
;
	sec
;
; __asm__ ("sbc #10");
;
	sbc     #10
;
; __asm__ ("sta %v+4, x", bcd_score);
;
	sta     _bcd_score+4,x
;
; }
;
L2C72:	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ bcd_high_score_update (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bcd_high_score_update: near

.segment	"CODE"

;
; for (gpjt = 0; gpjt < 10; gpjt += 5) {
;
	lda     #$00
L4360:	sta     _gpjt
	cmp     #$0A
	bcs     L2C7D
;
; gpit = 5; while (gpit) {
;
	lda     #$05
	sta     _gpit
	jmp     L2C8C
;
; --gpit; if (bcd_high_score [gpit] > bcd_score [gpjt + gpit]) continue;
;
L2C87:	dec     _gpit
	ldy     _gpit
	lda     _bcd_high_score,y
	jsr     pusha0
	lda     _gpjt
	clc
	adc     _gpit
	bcc     L435F
	ldx     #$01
L435F:	sta     ptr1
	txa
	clc
	adc     #>(_bcd_score)
	sta     ptr1+1
	ldy     #<(_bcd_score)
	lda     (ptr1),y
	jsr     tosicmp0
;
; gpit = 5; while (gpit) {
;
L2C8C:	lda     _gpit
	bne     L2C87
;
; memcpy (bcd_score + gpjt, bcd_high_score, 5);
;
	lda     _gpjt
	clc
	adc     #<(_bcd_score)
	tay
	lda     #$00
	adc     #>(_bcd_score)
	tax
	tya
	jsr     pushax
	lda     #<(_bcd_high_score)
	ldx     #>(_bcd_high_score)
	jsr     pushax
	ldx     #$00
	lda     #$05
	jsr     _memcpy
;
; for (gpjt = 0; gpjt < 10; gpjt += 5) {
;
	lda     #$05
	clc
	adc     _gpjt
	jmp     L4360
;
; }
;
L2C7D:	rts

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ bcd_compare_scores (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bcd_compare_scores: near

.segment	"CODE"

;
; gpit = 5; while (gpit) { --gpit; 
;
	lda     #$05
	sta     _gpit
	jmp     L2CA8
L4361:	dec     _gpit
;
; rda = bcd_score [5 + gpit];
;
	ldx     #$00
	lda     _gpit
	clc
	adc     #$05
	bcc     L2CA0
	inx
L2CA0:	sta     ptr1
	txa
	clc
	adc     #>(_bcd_score)
	sta     ptr1+1
	ldy     #<(_bcd_score)
	lda     (ptr1),y
	sta     _rda
;
; rdb = bcd_score [gpit];
;
	ldy     _gpit
	lda     _bcd_score,y
	sta     _rdb
;
; if (rda > rdb) return 1;
;
	ldx     #$00
	lda     _rda
	sec
	sbc     _rdb
	bcc     L4362
	beq     L4362
	lda     #$01
	rts
;
; if (rda < rdb) return 0;
;
L4362:	lda     _rda
	cmp     _rdb
	bcs     L2CA8
	txa
	rts
;
; gpit = 5; while (gpit) { --gpit; 
;
L2CA8:	lda     _gpit
	bne     L4361
;
; return 2;  // Nobody
;
	tax
	lda     #$02
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ bcd_print (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bcd_print: near

.segment	"CODE"

;
; gpit = 5; while (gpit) { -- gpit;
;
	lda     #$05
	sta     _gpit
	jmp     L2CB1
L2CAF:	dec     _gpit
;
; vram_put (gp_gen [gpit]);
;
	lda     _gp_gen
	ldx     _gp_gen+1
	ldy     _gpit
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	jsr     _vram_put
;
; gpit = 5; while (gpit) { -- gpit;
;
L2CB1:	lda     _gpit
	bne     L2CAF
;
; vram_put (DIGIT (0));
;
	lda     #$10
	jmp     _vram_put

.endproc

; ---------------------------------------------------------------
; void __near__ bcd_print_ul (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bcd_print_ul: near

.segment	"CODE"

;
; gpit = 5; while (gpit) { -- gpit;
;
	lda     #$05
	sta     _gpit
	jmp     L2CC0
L2CBE:	dec     _gpit
;
; *ul = gp_gen [gpit]; ++ ul;
;
	lda     _ul
	ldx     _ul+1
	jsr     pushax
	lda     _gp_gen
	ldx     _gp_gen+1
	ldy     _gpit
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	ldy     #$00
	jsr     staspidx
	inc     _ul
	bne     L2CC0
	inc     _ul+1
;
; gpit = 5; while (gpit) { -- gpit;
;
L2CC0:	lda     _gpit
	bne     L2CBE
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ get_pad_once (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_get_pad_once: near

.segment	"CODE"

;
; pad_once = pad0; 
;
	lda     _pad0
	sta     _pad_once
;
; pad0 = pad_poll (0);
;
	lda     #$00
	jsr     _pad_poll
	sta     _pad0
;
; pad_once = (pad_once ^ pad0) & pad0;
;
	eor     _pad_once
	sta     ptr1
	lda     _pad0
	and     ptr1
	sta     _pad_once
;
; pad_doce = pad1;
;
	lda     _pad1
	sta     _pad_doce
;
; pad1 = pad_poll (1);
;
	lda     #$01
	jsr     _pad_poll
	sta     _pad1
;
; pad_doce = (pad_doce ^ pad1) & pad1;
;
	eor     _pad_doce
	sta     ptr1
	lda     _pad1
	and     ptr1
	sta     _pad_doce
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ custom_split (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_custom_split: near

.segment	"CODE"

;
; __asm__ ("lda %v", scroll_y);
;
	lda     _scroll_y
;
; __asm__ ("and #$f8");
;
	and     #$f8
;
; __asm__ ("asl a");
;
	asl     a
;
; __asm__ ("asl a");
;
	asl     a
;
; __asm__ ("sta %v", rdy);
;
	sta     _rdy
;
; __asm__ ("lda #0");
;
	lda     #0
;
; __asm__ ("ldx %v", scroll_y);
;
	ldx     _scroll_y
;
; __asm__ ("ldy %v", rdy);
;
	ldy     _rdy
;
; __asm__ ("bit PPU_STATUS");
;
L2CEA:	bit     PPU_STATUS
;
; __asm__ ("bvs %g", SPLITW0);
;
	bvs     L2CEA
;
; __asm__ ("bit PPU_STATUS");
;
L2CF1:	bit     PPU_STATUS
;
; __asm__ ("bvc %g", SPLITW1);
;
	bvc     L2CF1
;
; __asm__ ("sta $2006");
;
	sta     $2006
;
; __asm__ ("stx $2005");
;
	stx     $2005
;
; __asm__ ("sta $2005");
;
	sta     $2005
;
; __asm__ ("sty $2006"); 
;
	sty     $2006
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ fade_out (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_fade_out: near

.segment	"CODE"

;
; fader = 5; while (fader --) { 
;
	lda     #$05
	sta     _fader
	jmp     L4365
;
; pal_bright (fader); ppu_wait_nmi (); 
;
L2D03:	lda     _fader
	jsr     _pal_bright
	jsr     _ppu_wait_nmi
;
; if (do_split) { scroll (256, 0); custom_split (); }
;
	lda     _do_split
	beq     L4365
	ldx     #$01
	lda     #$00
	jsr     pushax
	dex
	jsr     _scroll
	jsr     _custom_split
;
; fader = 5; while (fader --) { 
;
L4365:	lda     _fader
	dec     _fader
	tax
	bne     L2D03
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ fade_in (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_fade_in: near

.segment	"CODE"

;
; fader = 5; while (fader --) { 
;
	lda     #$05
	sta     _fader
	jmp     L4366
;
; pal_bright (4 - fader); ppu_wait_nmi (); 
;
L2D14:	lda     #$04
	jsr     pusha0
	lda     _fader
	bpl     L2D1B
	ldx     #$FF
L2D1B:	jsr     tossubax
	jsr     _pal_bright
	jsr     _ppu_wait_nmi
;
; if (do_split) { scroll (256, 0); custom_split (); }
;
	lda     _do_split
	beq     L4366
	ldx     #$01
	lda     #$00
	jsr     pushax
	dex
	jsr     _scroll
	jsr     _custom_split
;
; fader = 5; while (fader --) { 
;
L4366:	lda     _fader
	dec     _fader
	tax
	bne     L2D14
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ cls (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_cls: near

.segment	"CODE"

;
; vram_adr (NAMETABLE_A); vram_fill (0, 2048);  
;
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
	lda     #$00
	jsr     pusha
	ldx     #$08
	jmp     _vram_fill

.endproc

; ---------------------------------------------------------------
; void __near__ _upd2h (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	__upd2h: near

.segment	"CODE"

;
; __asm__ ("ldy #$0");
;
	ldy     #$0
;
; __asm__ ("lda %v+1", gp_addr);
;
	lda     _gp_addr+1
;
; __asm__ ("ora #%b", NT_UPD_HORZ);
;
	ora     #$40
;
; __asm__ ("sta (%v), y", ul);
;
	sta     (_ul),y
;
; __asm__ ("iny");
;
	iny
;
; __asm__ ("lda %v", gp_addr);
;
	lda     _gp_addr
;
; __asm__ ("sta (%v), y", ul);
;
	sta     (_ul),y
;
; __asm__ ("iny");
;
	iny
;
; __asm__ ("lda #2");
;
	tya
;
; __asm__ ("sta (%v), y", ul);
;
	sta     (_ul),y
;
; __asm__ ("lda %v", ul);
;
	lda     _ul
;
; __asm__ ("clc");
;
	clc
;
; __asm__ ("adc #3");
;
	adc     #3
;
; __asm__ ("sta %v", ul);
;
	sta     _ul
;
; __asm__ ("bcc %g", P_WGAH2);
;
	bcc     L2D49
;
; __asm__ ("inc %v+1", ul);
;
	inc     _ul+1
;
; }
;
L2D49:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ p_t2 (unsigned char, unsigned char, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_p_t2: near

.segment	"CODE"

;
; void p_t2 (unsigned char x, unsigned char y, unsigned char n) {
;
	jsr     pusha
;
; gp_addr = NAMETABLE_A + (y << 5) + x;
;
	ldy     #$01
	ldx     #$00
	lda     (sp),y
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	lda     tmp1
	clc
	adc     #$20
	sta     ptr1+1
	iny
	lda     (sp),y
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L4367
	inx
L4367:	sta     _gp_addr
	stx     _gp_addr+1
;
; _upd2h ();
;
	jsr     __upd2h
;
; ul [0] = DIGIT ((n / 10));
;
	lda     _ul
	ldx     _ul+1
	jsr     pushax
	ldy     #$02
	lda     (sp),y
	jsr     pusha0
	lda     #$0A
	jsr     tosudiva0
	clc
	adc     #$10
	ldy     #$00
	jsr     staspidx
;
; ul [1] = DIGIT ((n % 10));
;
	lda     _ul
	ldx     _ul+1
	jsr     pushax
	ldy     #$02
	lda     (sp),y
	jsr     pusha0
	lda     #$0A
	jsr     tosumoda0
	clc
	adc     #$10
	ldy     #$01
	jsr     staspidx
;
; ul += 2;
;
	lda     #$02
	clc
	adc     _ul
	sta     _ul
	bcc     L2D63
	inc     _ul+1
;
; }
;
L2D63:	jmp     incsp3

.endproc

; ---------------------------------------------------------------
; void __near__ p_t2_d (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_p_t2_d: near

.segment	"CODE"

;
; void p_t2_d (unsigned char n) {
;
	jsr     pusha
;
; vram_put (DIGIT (n/10));
;
	ldx     #$00
	lda     (sp,x)
	jsr     pusha0
	lda     #$0A
	jsr     tosudiva0
	clc
	adc     #$10
	jsr     _vram_put
;
; vram_put (DIGIT (n % 10));
;
	ldx     #$00
	lda     (sp,x)
	jsr     pusha0
	lda     #$0A
	jsr     tosumoda0
	clc
	adc     #$10
	jsr     _vram_put
;
; }
;
	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; void __near__ p_t1 (unsigned char, unsigned char, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_p_t1: near

.segment	"CODE"

;
; void p_t1 (unsigned char x, unsigned char y, unsigned char n) {
;
	jsr     pusha
;
; gp_addr = NAMETABLE_B + (y << 5) + x;
;
	ldy     #$01
	ldx     #$00
	lda     (sp),y
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	lda     tmp1
	clc
	adc     #$24
	sta     ptr1+1
	iny
	lda     (sp),y
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L4368
	inx
L4368:	sta     _gp_addr
	stx     _gp_addr+1
;
; ul [0] = MSB (gp_addr); 
;
	lda     _ul+1
	sta     ptr1+1
	lda     _ul
	sta     ptr1
	lda     _gp_addr+1
	ldy     #$00
	sta     (ptr1),y
;
; ul [1] = LSB (gp_addr);
;
	lda     _ul+1
	sta     ptr1+1
	lda     _ul
	sta     ptr1
	lda     _gp_addr
	iny
	sta     (ptr1),y
;
; ul [2] = DIGIT (n);
;
	lda     _ul+1
	sta     ptr1+1
	lda     _ul
	sta     ptr1
	dey
	lda     (sp),y
	ldy     #$02
	clc
	adc     #$10
	sta     (ptr1),y
;
; ul += 3;
;
	lda     #$03
	clc
	adc     _ul
	sta     _ul
	bcc     L2D85
	inc     _ul+1
;
; }
;
L2D85:	jmp     incsp3

.endproc

; ---------------------------------------------------------------
; void __near__ p_s (unsigned char, unsigned char, __near__ const unsigned char *)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_p_s: near

.segment	"CODE"

;
; void p_s (unsigned char x, unsigned char y, const unsigned char *s) {
;
	jsr     pushax
;
; vram_adr (nt + (y << 5) + x);
;
	ldx     #$00
	ldy     #$02
	lda     (sp),y
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     _nt
	sta     ptr1
	lda     tmp1
	adc     _nt+1
	sta     ptr1+1
	iny
	lda     (sp),y
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L4369
	inx
L4369:	jsr     _vram_adr
;
; while (rdt = *s ++) vram_put (rdt - 32);
;
	jmp     L2D8C
L2D8A:	lda     _rdt
	sec
	sbc     #$20
	jsr     _vram_put
L2D8C:	ldy     #$01
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L2D8F
	inx
L2D8F:	jsr     stax0sp
	ldy     #$00
	lda     (regsave),y
	sta     _rdt
	tax
	bne     L2D8A
;
; }
;
	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; void __near__ ascii_to_ul (__near__ unsigned char *)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_ascii_to_ul: near

.segment	"CODE"

;
; void ascii_to_ul (unsigned char *s) {
;
	jsr     pushax
;
; rda = 0;
;
	lda     #$00
	sta     _rda
;
; while (rdb = *s ++) ul [rda ++] = rdb - 32;
;
	jmp     L2D98
L2D96:	lda     _rda
	inc     _rda
	clc
	adc     _ul
	ldx     _ul+1
	bcc     L436A
	inx
L436A:	sta     ptr1
	stx     ptr1+1
	lda     _rdb
	sec
	sbc     #$20
	ldy     #$00
	sta     (ptr1),y
L2D98:	ldy     #$01
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L2D9B
	inx
L2D9B:	jsr     stax0sp
	ldy     #$00
	lda     (regsave),y
	sta     _rdb
	tax
	bne     L2D96
;
; ul += rda;
;
	lda     _rda
	clc
	adc     _ul
	sta     _ul
	txa
	adc     _ul+1
	sta     _ul+1
;
; }
;
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ put_tile_ul (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_put_tile_ul: near

.segment	"CODE"

;
; __asm__ ("lda %v", rdy);
;
	lda     _rdy
;
; __asm__ ("asl a");   // A = rdy * 2 (< 60)
;
	asl     a
;
; __asm__ ("asl a");    // A = rdy * 4 (< 120)
;
	asl     a
;
; __asm__ ("asl a");    // A = rdy * 8 (< 240)
;
	asl     a
;
; __asm__ ("ldx #0");
;
	ldx     #0
;
; __asm__ ("jsr aslax2");
;
	jsr     aslax2
;
; __asm__ ("ora %v", rdx);
;
	ora     _rdx
;
; __asm__ ("sta %v", gp_addr);
;
	sta     _gp_addr
;
; __asm__ ("txa");
;
	txa
;
; __asm__ ("clc");
;
	clc
;
; __asm__ ("adc #$20");
;
	adc     #$20
;
; __asm__ ("sta %v+1", gp_addr);
;
	sta     _gp_addr+1
;
; _upd2h (); 
;
	jsr     __upd2h
;
; __asm__ ("ldy %v", rdt);
;
	ldy     _rdt
;
; __asm__ ("lda (%v), y", c_ts_tmaps_0);
;
	lda     (_c_ts_tmaps_0),y
;
; __asm__ ("ldy #0");
;
	ldy     #0
;
; __asm__ ("sta (%v), y", ul);
;
	sta     (_ul),y
;
; __asm__ ("ldy %v", rdt);
;
	ldy     _rdt
;
; __asm__ ("lda (%v), y", c_ts_tmaps_1);
;
	lda     (_c_ts_tmaps_1),y
;
; __asm__ ("ldy #1");
;
	ldy     #1
;
; __asm__ ("sta (%v), y", ul);
;
	sta     (_ul),y
;
; __asm__ ("lda %v", ul);
;
	lda     _ul
;
; __asm__ ("clc");
;
	clc
;
; __asm__ ("adc #2");
;
	adc     #2
;
; __asm__ ("sta %v", ul);
;
	sta     _ul
;
; __asm__ ("bcc %g", P_PTUS1);
;
	bcc     L2DD6
;
; __asm__ ("inc %v+1", ul);
;
	inc     _ul+1
;
; __asm__ ("lda %v", gp_addr);
;
L2DD6:	lda     _gp_addr
;
; __asm__ ("clc");
;
	clc
;
; __asm__ ("adc #32");
;
	adc     #32
;
; __asm__ ("sta %v", gp_addr);
;
	sta     _gp_addr
;
; __asm__ ("bcc %g", P_PTUS0);
;
	bcc     L2DE5
;
; __asm__ ("inc %v+1", gp_addr);
;
	inc     _gp_addr+1
;
; _upd2h ();
;
L2DE5:	jsr     __upd2h
;
; __asm__ ("ldy %v", rdt);
;
	ldy     _rdt
;
; __asm__ ("lda (%v), y", c_ts_tmaps_0);
;
	lda     (_c_ts_tmaps_0),y
;
; __asm__ ("ldy #0");
;
	ldy     #0
;
; __asm__ ("sta (%v), y", ul);
;
	sta     (_ul),y
;
; __asm__ ("ldy %v", rdt);
;
	ldy     _rdt
;
; __asm__ ("lda (%v), y", c_ts_tmaps_1);
;
	lda     (_c_ts_tmaps_1),y
;
; __asm__ ("ldy #1");
;
	ldy     #1
;
; __asm__ ("sta (%v), y", ul);
;
	sta     (_ul),y
;
; __asm__ ("lda %v", ul);
;
	lda     _ul
;
; __asm__ ("clc");
;
	clc
;
; __asm__ ("adc #2");
;
	adc     #2
;
; __asm__ ("sta %v", ul);
;
	sta     _ul
;
; __asm__ ("bcc %g", P_PTUS2);
;
	bcc     L2E05
;
; __asm__ ("inc %v+1", ul);
;
	inc     _ul+1
;
; }
;
L2E05:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ scroll_init (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_scroll_init: near

.segment	"CODE"

;
; cam_pos = MAP_H<<4;
;
	ldx     #$08
	lda     #$00
	sta     _cam_pos
	stx     _cam_pos+1
;
; cam_pos_bit_4 = cam_pos & 0x10;
;
	sta     _cam_pos_bit_4
;
; cam_pos_bit_3 = cam_pos & 0x08;
;
	lda     _cam_pos
	and     #$08
	sta     _cam_pos_bit_3
;
; o_scroll_y = scroll_y = SCROLL_Y + SPLIT_SIZE;
;
	txa
	sta     _scroll_y
	sta     _o_scroll_y
;
; wtp = 0;
;
	lda     #$00
	sta     _wtp
;
; rle_ctr = 0;
;
	sta     _rle_ctr
;
; gbuffer_y = 0;
;
	sta     _gbuffer_y
;
; map_tilepos = (MAP_H&0xff); 
;
	lda     #$80
	sta     _map_tilepos
;
; scroll_state = 8;
;
	stx     _scroll_state
;
; rle_buffer_ptr = SCREEN_BUFFER;
;
	ldx     #$03
	lda     #$00
	sta     _rle_buffer_ptr
	stx     _rle_buffer_ptr+1
;
; __asm__ ("lda #$23");
;
	lda     #$23
;
; __asm__ ("sta %v", ATTRIB_WRITE);
;
	sta     _ATTRIB_WRITE
;
; __asm__ ("lda #$04");
;
	lda     #$04
;
; __asm__ ("sta %v+1", ATTRIB_READ);
;
	sta     _ATTRIB_READ+1
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ scroll_get_byte (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_scroll_get_byte: near

.segment	"CODE"

;
; __asm__ ("lda %v", rle_ctr);
;
	lda     _rle_ctr
;
; __asm__ ("cmp #32");
;
	cmp     #32
;
; __asm__ ("bcc %g", scroll_get_byte_read);
;
	bcc     L2E32
;
; __asm__ ("sec");
;
	sec
;
; __asm__ ("sbc #32");
;
	sbc     #32
;
; __asm__ ("sta %v", rle_ctr);
;
	sta     _rle_ctr
;
; __asm__ ("jmp %g", scroll_get_byte_return); 
;
	jmp     L2E3C
;
; __asm__ ("ldy #0");
;
L2E32:	ldy     #0
;
; __asm__ ("lda (%v), y", map_ptr);
;
	lda     (_map_ptr),y
;
; __asm__ ("sta %v", rda);
;
	sta     _rda
;
; __asm__ ("sta %v", rle_ctr);
;
	sta     _rle_ctr
;
; __asm__ ("inc %v", map_ptr);
;
	inc     _map_ptr
;
; __asm__ ("bne %g", scroll_get_byte_inc_done);
;
	bne     L2E4B
;
; __asm__ ("inc %v+1", map_ptr);
;
	inc     _map_ptr+1
;
; __asm__ ("and #$1f");
;
L2E4B:	and     #$1f
;
; __asm__ ("sta %v", rle_value);
;
	sta     _rle_value
;
; return rle_value;
;
L2E3C:	ldx     #$00
	lda     _rle_value
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ scroll_writers_realloc (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_scroll_writers_realloc: near

.segment	"CODE"

;
; if (wtp) wtp --; else wtp = 29;
;
	lda     _wtp
	beq     L2E57
	dec     _wtp
	jmp     L2E5A
L2E57:	lda     #$1D
	sta     _wtp
;
; __asm__ ("ldx %v", wtp);
;
L2E5A:	ldx     _wtp
;
; __asm__ ("lda %v, x", wp_addr_hi);
;
	lda     _wp_addr_hi,x
;
; __asm__ ("sta %v", SCROLL_WRITE);
;
	sta     _SCROLL_WRITE
;
; __asm__ ("lda %v, x", wp_addr_lo);
;
	lda     _wp_addr_lo,x
;
; __asm__ ("sta %v+1", SCROLL_WRITE);
;
	sta     _SCROLL_WRITE+1
;
; __asm__ ("tay");
;
	ldy     _shr2,x
;
; __asm__ ("lda %v, y", attrs_adds); 
;
	lda     _attrs_adds,y
;
; __asm__ ("sta %v+1", ATTRIB_WRITE);
;
	sta     _ATTRIB_WRITE+1
;
; __asm__ ("lda %v, y", attr_buff_adds);
;
	lda     _attr_buff_adds,y
;
; __asm__ ("sta %v", ATTRIB_READ);
;
	sta     _ATTRIB_READ
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ scroll_advance (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_scroll_advance: near

.segment	"CODE"

;
; void scroll_advance (unsigned char pixels) {
;
	jsr     pusha
;
; o_scroll_y = scroll_y;
;
	lda     _scroll_y
	sta     _o_scroll_y
;
; scroll_y -= pixels;
;
	ldy     #$00
	lda     (sp),y
	eor     #$FF
	sec
	adc     _scroll_y
	sta     _scroll_y
;
; if (scroll_y > 240) scroll_y += 240;
;
	cmp     #$F1
	bcc     L436C
	lda     #$F0
	clc
	adc     _scroll_y
	sta     _scroll_y
;
; cam_pos -= pixels;
;
L436C:	lda     (sp),y
	eor     #$FF
	sec
	adc     _cam_pos
	sta     _cam_pos
	lda     #$FF
	adc     _cam_pos+1
	sta     _cam_pos+1
;
; cam_pos_lsb = LSB (cam_pos);
;
	lda     _cam_pos
	sta     _cam_pos_lsb
;
; }
;
	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; void __near__ scroll_paint (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_scroll_paint: near

.segment	"CODE"

;
; rda = cam_pos & 0x10;
;
	lda     _cam_pos
	and     #$10
	sta     _rda
;
; if (rda != cam_pos_bit_4) {  
;
	lda     _cam_pos_bit_4
	cmp     _rda
	beq     L4371
;
; cam_pos_bit_4 = rda;
;
	lda     _rda
	sta     _cam_pos_bit_4
;
; cam_pos_bit_3 = cam_pos & 0x08;
;
	lda     _cam_pos
	and     #$08
	sta     _cam_pos_bit_3
;
; scroll_state = 0;
;
	lda     #$00
	sta     _scroll_state
;
; switch (scroll_state) {
;
L4371:	lda     _scroll_state
;
; }
;
	beq     L4372
	cmp     #$01
	beq     L2EA0
	cmp     #$02
	jeq     L2EE7
	cmp     #$03
	jeq     L2EE7
	cmp     #$04
	jeq     L4373
	cmp     #$05
	jeq     L31CC
	cmp     #$06
	jeq     L31DA
	cmp     #$07
	jeq     L31DA
	rts
;
; -- map_tilepos;
;
L4372:	dec     _map_tilepos
;
; gbuffer_y -= 16;
;
	lda     _gbuffer_y
	sec
	sbc     #$10
	sta     _gbuffer_y
;
; rle_buffer_ptr = SCREEN_BUFFER + gbuffer_y;
;
	ldx     #$03
	sta     _rle_buffer_ptr
	stx     _rle_buffer_ptr+1
;
; attr_buffer_i = (gbuffer_y >> 5);
;
	lda     _gbuffer_y
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     _attr_buffer_i
;
; gppi = rle_buffer_i = 0;
;
	lda     #$00
	sta     _rle_buffer_i
	sta     _gppi
;
; scroll_writers_realloc ();
;
	jsr     _scroll_writers_realloc
;
; __asm__ ("jsr %v", scroll_get_byte);
;
L2EA0:	jsr     _scroll_get_byte
;
; __asm__ ("ldy %v", rle_buffer_i);
;
	ldy     _rle_buffer_i
;
; __asm__ ("sta (%v), y", rle_buffer_ptr);
;
	sta     (_rle_buffer_ptr),y
;
; __asm__ ("inc %v", rle_buffer_i);
;
	inc     _rle_buffer_i
;
; __asm__ ("jsr %v", scroll_get_byte);
;
	jsr     _scroll_get_byte
;
; __asm__ ("ldy %v", rle_buffer_i);
;
	ldy     _rle_buffer_i
;
; __asm__ ("sta (%v), y", rle_buffer_ptr);
;
	sta     (_rle_buffer_ptr),y
;
; __asm__ ("inc %v", rle_buffer_i);
;
	inc     _rle_buffer_i
;
; __asm__ ("jsr %v", scroll_get_byte);
;
	jsr     _scroll_get_byte
;
; __asm__ ("ldy %v", rle_buffer_i);
;
	ldy     _rle_buffer_i
;
; __asm__ ("sta (%v), y", rle_buffer_ptr);
;
	sta     (_rle_buffer_ptr),y
;
; __asm__ ("inc %v", rle_buffer_i);
;
	inc     _rle_buffer_i
;
; __asm__ ("jsr %v", scroll_get_byte);
;
	jsr     _scroll_get_byte
;
; __asm__ ("ldy %v", rle_buffer_i);
;
	ldy     _rle_buffer_i
;
; __asm__ ("sta (%v), y", rle_buffer_ptr);
;
	sta     (_rle_buffer_ptr),y
;
; __asm__ ("inc %v", rle_buffer_i);
;
	inc     _rle_buffer_i
;
; __asm__ ("jsr %v", scroll_get_byte);
;
	jsr     _scroll_get_byte
;
; __asm__ ("ldy %v", rle_buffer_i);
;
	ldy     _rle_buffer_i
;
; __asm__ ("sta (%v), y", rle_buffer_ptr);
;
	sta     (_rle_buffer_ptr),y
;
; __asm__ ("inc %v", rle_buffer_i);
;
	inc     _rle_buffer_i
;
; __asm__ ("jsr %v", scroll_get_byte);
;
	jsr     _scroll_get_byte
;
; __asm__ ("ldy %v", rle_buffer_i);
;
	ldy     _rle_buffer_i
;
; __asm__ ("sta (%v), y", rle_buffer_ptr);
;
	sta     (_rle_buffer_ptr),y
;
; __asm__ ("inc %v", rle_buffer_i);
;
	inc     _rle_buffer_i
;
; __asm__ ("jsr %v", scroll_get_byte);
;
	jsr     _scroll_get_byte
;
; __asm__ ("ldy %v", rle_buffer_i);
;
	ldy     _rle_buffer_i
;
; __asm__ ("sta (%v), y", rle_buffer_ptr);
;
	sta     (_rle_buffer_ptr),y
;
; __asm__ ("inc %v", rle_buffer_i);
;
	inc     _rle_buffer_i
;
; __asm__ ("jsr %v", scroll_get_byte);
;
	jsr     _scroll_get_byte
;
; __asm__ ("ldy %v", rle_buffer_i);
;
	ldy     _rle_buffer_i
;
; __asm__ ("sta (%v), y", rle_buffer_ptr);
;
	sta     (_rle_buffer_ptr),y
;
; __asm__ ("inc %v", rle_buffer_i);
;
	inc     _rle_buffer_i
;
; ++ scroll_state;
;
	inc     _scroll_state
;
; if (scroll_state == 2) rle_buffer_i = 0;
;
	lda     _scroll_state
	cmp     #$02
	beq     L4379
;
; }
;
	rts
;
; if (scroll_state == 2) rle_buffer_i = 0;
;
L4379:	lda     #$00
	sta     _rle_buffer_i
;
; break;
;
	rts
;
; __asm__ ("ldx %v", gppi);
;
L2EE7:	ldx     _gppi
;
; __asm__ ("ldy %v", rle_buffer_i);
;
	ldy     _rle_buffer_i
;
; __asm__ ("lda (%v), y", rle_buffer_ptr);
;
	lda     (_rle_buffer_ptr),y
;
; __asm__ ("tay");
;
	tay
;
; __asm__ ("inc %v", rle_buffer_i);
;
	inc     _rle_buffer_i
;
; __asm__ ("lda (%v), y", c_ts_tmaps_2);
;
	lda     (_c_ts_tmaps_2),y
;
; __asm__ ("sta %w, x", SCROLL_BUFFER_V);
;
	sta     $0440,x
;
; __asm__ ("inx");
;
	inx
;
; __asm__ ("lda (%v), y", c_ts_tmaps_3);
;
	lda     (_c_ts_tmaps_3),y
;
; __asm__ ("sta %w, x", SCROLL_BUFFER_V);
;
	sta     $0440,x
;
; __asm__ ("inx");
;
	inx
;
; __asm__ ("ldy %v", rle_buffer_i);
;
	ldy     _rle_buffer_i
;
; __asm__ ("lda (%v), y", rle_buffer_ptr);
;
	lda     (_rle_buffer_ptr),y
;
; __asm__ ("tay");
;
	tay
;
; __asm__ ("inc %v", rle_buffer_i);
;
	inc     _rle_buffer_i
;
; __asm__ ("lda (%v), y", c_ts_tmaps_2);
;
	lda     (_c_ts_tmaps_2),y
;
; __asm__ ("sta %w, x", SCROLL_BUFFER_V);
;
	sta     $0440,x
;
; __asm__ ("inx");
;
	inx
;
; __asm__ ("lda (%v), y", c_ts_tmaps_3);
;
	lda     (_c_ts_tmaps_3),y
;
; __asm__ ("sta %w, x", SCROLL_BUFFER_V);
;
	sta     $0440,x
;
; __asm__ ("inx");
;
	inx
;
; __asm__ ("ldy %v", rle_buffer_i);
;
	ldy     _rle_buffer_i
;
; __asm__ ("lda (%v), y", rle_buffer_ptr);
;
	lda     (_rle_buffer_ptr),y
;
; __asm__ ("tay");
;
	tay
;
; __asm__ ("inc %v", rle_buffer_i);
;
	inc     _rle_buffer_i
;
; __asm__ ("lda (%v), y", c_ts_tmaps_2);
;
	lda     (_c_ts_tmaps_2),y
;
; __asm__ ("sta %w, x", SCROLL_BUFFER_V);
;
	sta     $0440,x
;
; __asm__ ("inx");
;
	inx
;
; __asm__ ("lda (%v), y", c_ts_tmaps_3);
;
	lda     (_c_ts_tmaps_3),y
;
; __asm__ ("sta %w, x", SCROLL_BUFFER_V);
;
	sta     $0440,x
;
; __asm__ ("inx");
;
	inx
;
; __asm__ ("ldy %v", rle_buffer_i);
;
	ldy     _rle_buffer_i
;
; __asm__ ("lda (%v), y", rle_buffer_ptr);
;
	lda     (_rle_buffer_ptr),y
;
; __asm__ ("tay");
;
	tay
;
; __asm__ ("inc %v", rle_buffer_i);
;
	inc     _rle_buffer_i
;
; __asm__ ("lda (%v), y", c_ts_tmaps_2);
;
	lda     (_c_ts_tmaps_2),y
;
; __asm__ ("sta %w, x", SCROLL_BUFFER_V);
;
	sta     $0440,x
;
; __asm__ ("inx");
;
	inx
;
; __asm__ ("lda (%v), y", c_ts_tmaps_3);
;
	lda     (_c_ts_tmaps_3),y
;
; __asm__ ("sta %w, x", SCROLL_BUFFER_V);
;
	sta     $0440,x
;
; __asm__ ("inx");
;
	inx
;
; __asm__ ("ldy %v", rle_buffer_i);
;
	ldy     _rle_buffer_i
;
; __asm__ ("lda (%v), y", rle_buffer_ptr);
;
	lda     (_rle_buffer_ptr),y
;
; __asm__ ("tay");
;
	tay
;
; __asm__ ("inc %v", rle_buffer_i);
;
	inc     _rle_buffer_i
;
; __asm__ ("lda (%v), y", c_ts_tmaps_2);
;
	lda     (_c_ts_tmaps_2),y
;
; __asm__ ("sta %w, x", SCROLL_BUFFER_V);
;
	sta     $0440,x
;
; __asm__ ("inx");
;
	inx
;
; __asm__ ("lda (%v), y", c_ts_tmaps_3);
;
	lda     (_c_ts_tmaps_3),y
;
; __asm__ ("sta %w, x", SCROLL_BUFFER_V);
;
	sta     $0440,x
;
; __asm__ ("inx");
;
	inx
;
; __asm__ ("ldy %v", rle_buffer_i);
;
	ldy     _rle_buffer_i
;
; __asm__ ("lda (%v), y", rle_buffer_ptr);
;
	lda     (_rle_buffer_ptr),y
;
; __asm__ ("tay");
;
	tay
;
; __asm__ ("inc %v", rle_buffer_i);
;
	inc     _rle_buffer_i
;
; __asm__ ("lda (%v), y", c_ts_tmaps_2);
;
	lda     (_c_ts_tmaps_2),y
;
; __asm__ ("sta %w, x", SCROLL_BUFFER_V);
;
	sta     $0440,x
;
; __asm__ ("inx");
;
	inx
;
; __asm__ ("lda (%v), y", c_ts_tmaps_3);
;
	lda     (_c_ts_tmaps_3),y
;
; __asm__ ("sta %w, x", SCROLL_BUFFER_V);
;
	sta     $0440,x
;
; __asm__ ("inx");
;
	inx
;
; __asm__ ("ldy %v", rle_buffer_i);
;
	ldy     _rle_buffer_i
;
; __asm__ ("lda (%v), y", rle_buffer_ptr);
;
	lda     (_rle_buffer_ptr),y
;
; __asm__ ("tay");
;
	tay
;
; __asm__ ("inc %v", rle_buffer_i);
;
	inc     _rle_buffer_i
;
; __asm__ ("lda (%v), y", c_ts_tmaps_2);
;
	lda     (_c_ts_tmaps_2),y
;
; __asm__ ("sta %w, x", SCROLL_BUFFER_V);
;
	sta     $0440,x
;
; __asm__ ("inx");
;
	inx
;
; __asm__ ("lda (%v), y", c_ts_tmaps_3);
;
	lda     (_c_ts_tmaps_3),y
;
; __asm__ ("sta %w, x", SCROLL_BUFFER_V);
;
	sta     $0440,x
;
; __asm__ ("inx");
;
	inx
;
; __asm__ ("ldy %v", rle_buffer_i);
;
	ldy     _rle_buffer_i
;
; __asm__ ("lda (%v), y", rle_buffer_ptr);
;
	lda     (_rle_buffer_ptr),y
;
; __asm__ ("tay");
;
	tay
;
; __asm__ ("inc %v", rle_buffer_i);
;
	inc     _rle_buffer_i
;
; __asm__ ("lda (%v), y", c_ts_tmaps_2);
;
	lda     (_c_ts_tmaps_2),y
;
; __asm__ ("sta %w, x", SCROLL_BUFFER_V);
;
	sta     $0440,x
;
; __asm__ ("inx");
;
	inx
;
; __asm__ ("lda (%v), y", c_ts_tmaps_3);
;
	lda     (_c_ts_tmaps_3),y
;
; break;
;
	jmp     L4378
;
; rle_buffer_i = 0;
;
L4373:	lda     #$00
	sta     _rle_buffer_i
;
; if (wtp & 2) {
;
	lda     _wtp
	and     #$02
	jeq     L2FA3
;
; __asm__ ("ldx %v", ATTRIB_READ);
;
	ldx     _ATTRIB_READ
;
; __asm__ ("ldy %v", rle_buffer_i);
;
	ldy     _rle_buffer_i
;
; __asm__ ("lda (%v), y", rle_buffer_ptr);
;
	lda     (_rle_buffer_ptr),y
;
; __asm__ ("sta %v", rda);
;
	sta     _rda
;
; __asm__ ("iny");
;
	iny
;
; __asm__ ("lda (%v), y", rle_buffer_ptr);
;
	lda     (_rle_buffer_ptr),y
;
; __asm__ ("sta %v", rdb);
;
	sta     _rdb
;
; __asm__ ("iny");
;
	iny
;
; __asm__ ("sty %v", rle_buffer_i);
;
	sty     _rle_buffer_i
;
; __asm__ ("lda %w, x", ATTRIB_BUFFER_V);
;
	lda     $0400,x
;
; __asm__ ("and #$0f");
;
	and     #$0f
;
; __asm__ ("ldy %v", rda);
;
	ldy     _rda
;
; __asm__ ("ora (%v), y", c_ts_pals_2);
;
	ora     (_c_ts_pals_2),y
;
; __asm__ ("ldy %v", rdb);
;
	ldy     _rdb
;
; __asm__ ("ora (%v), y", c_ts_pals_3);
;
	ora     (_c_ts_pals_3),y
;
; __asm__ ("sta %w, x", ATTRIB_BUFFER_V);
;
	sta     $0400,x
;
; __asm__ ("inx");
;
	inx
;
; __asm__ ("ldy %v", rle_buffer_i);
;
	ldy     _rle_buffer_i
;
; __asm__ ("lda (%v), y", rle_buffer_ptr);
;
	lda     (_rle_buffer_ptr),y
;
; __asm__ ("sta %v", rda);
;
	sta     _rda
;
; __asm__ ("iny");
;
	iny
;
; __asm__ ("lda (%v), y", rle_buffer_ptr);
;
	lda     (_rle_buffer_ptr),y
;
; __asm__ ("sta %v", rdb);
;
	sta     _rdb
;
; __asm__ ("iny");
;
	iny
;
; __asm__ ("sty %v", rle_buffer_i);
;
	sty     _rle_buffer_i
;
; __asm__ ("lda %w, x", ATTRIB_BUFFER_V);
;
	lda     $0400,x
;
; __asm__ ("and #$0f");
;
	and     #$0f
;
; __asm__ ("ldy %v", rda);
;
	ldy     _rda
;
; __asm__ ("ora (%v), y", c_ts_pals_2);
;
	ora     (_c_ts_pals_2),y
;
; __asm__ ("ldy %v", rdb);
;
	ldy     _rdb
;
; __asm__ ("ora (%v), y", c_ts_pals_3);
;
	ora     (_c_ts_pals_3),y
;
; __asm__ ("sta %w, x", ATTRIB_BUFFER_V);
;
	sta     $0400,x
;
; __asm__ ("inx");
;
	inx
;
; __asm__ ("ldy %v", rle_buffer_i);
;
	ldy     _rle_buffer_i
;
; __asm__ ("lda (%v), y", rle_buffer_ptr);
;
	lda     (_rle_buffer_ptr),y
;
; __asm__ ("sta %v", rda);
;
	sta     _rda
;
; __asm__ ("iny");
;
	iny
;
; __asm__ ("lda (%v), y", rle_buffer_ptr);
;
	lda     (_rle_buffer_ptr),y
;
; __asm__ ("sta %v", rdb);
;
	sta     _rdb
;
; __asm__ ("iny");
;
	iny
;
; __asm__ ("sty %v", rle_buffer_i);
;
	sty     _rle_buffer_i
;
; __asm__ ("lda %w, x", ATTRIB_BUFFER_V);
;
	lda     $0400,x
;
; __asm__ ("and #$0f");
;
	and     #$0f
;
; __asm__ ("ldy %v", rda);
;
	ldy     _rda
;
; __asm__ ("ora (%v), y", c_ts_pals_2);
;
	ora     (_c_ts_pals_2),y
;
; __asm__ ("ldy %v", rdb);
;
	ldy     _rdb
;
; __asm__ ("ora (%v), y", c_ts_pals_3);
;
	ora     (_c_ts_pals_3),y
;
; __asm__ ("sta %w, x", ATTRIB_BUFFER_V);
;
	sta     $0400,x
;
; __asm__ ("inx");
;
	inx
;
; __asm__ ("ldy %v", rle_buffer_i);
;
	ldy     _rle_buffer_i
;
; __asm__ ("lda (%v), y", rle_buffer_ptr);
;
	lda     (_rle_buffer_ptr),y
;
; __asm__ ("sta %v", rda);
;
	sta     _rda
;
; __asm__ ("iny");
;
	iny
;
; __asm__ ("lda (%v), y", rle_buffer_ptr);
;
	lda     (_rle_buffer_ptr),y
;
; __asm__ ("sta %v", rdb);
;
	sta     _rdb
;
; __asm__ ("iny");
;
	iny
;
; __asm__ ("sty %v", rle_buffer_i);
;
	sty     _rle_buffer_i
;
; __asm__ ("lda %w, x", ATTRIB_BUFFER_V);
;
	lda     $0400,x
;
; __asm__ ("and #$0f");
;
	and     #$0f
;
; __asm__ ("ldy %v", rda);
;
	ldy     _rda
;
; __asm__ ("ora (%v), y", c_ts_pals_2);
;
	ora     (_c_ts_pals_2),y
;
; __asm__ ("ldy %v", rdb);
;
	ldy     _rdb
;
; __asm__ ("ora (%v), y", c_ts_pals_3);
;
	ora     (_c_ts_pals_3),y
;
; __asm__ ("sta %w, x", ATTRIB_BUFFER_V);
;
	sta     $0400,x
;
; __asm__ ("inx");
;
	inx
;
; __asm__ ("ldy %v", rle_buffer_i);
;
	ldy     _rle_buffer_i
;
; __asm__ ("lda (%v), y", rle_buffer_ptr);
;
	lda     (_rle_buffer_ptr),y
;
; __asm__ ("sta %v", rda);
;
	sta     _rda
;
; __asm__ ("iny");
;
	iny
;
; __asm__ ("lda (%v), y", rle_buffer_ptr);
;
	lda     (_rle_buffer_ptr),y
;
; __asm__ ("sta %v", rdb);
;
	sta     _rdb
;
; __asm__ ("iny");
;
	iny
;
; __asm__ ("sty %v", rle_buffer_i);
;
	sty     _rle_buffer_i
;
; __asm__ ("lda %w, x", ATTRIB_BUFFER_V);
;
	lda     $0400,x
;
; __asm__ ("and #$0f");
;
	and     #$0f
;
; __asm__ ("ldy %v", rda);
;
	ldy     _rda
;
; __asm__ ("ora (%v), y", c_ts_pals_2);
;
	ora     (_c_ts_pals_2),y
;
; __asm__ ("ldy %v", rdb);
;
	ldy     _rdb
;
; __asm__ ("ora (%v), y", c_ts_pals_3);
;
	ora     (_c_ts_pals_3),y
;
; __asm__ ("sta %w, x", ATTRIB_BUFFER_V);
;
	sta     $0400,x
;
; __asm__ ("inx");
;
	inx
;
; __asm__ ("ldy %v", rle_buffer_i);
;
	ldy     _rle_buffer_i
;
; __asm__ ("lda (%v), y", rle_buffer_ptr);
;
	lda     (_rle_buffer_ptr),y
;
; __asm__ ("sta %v", rda);
;
	sta     _rda
;
; __asm__ ("iny");
;
	iny
;
; __asm__ ("lda (%v), y", rle_buffer_ptr);
;
	lda     (_rle_buffer_ptr),y
;
; __asm__ ("sta %v", rdb);
;
	sta     _rdb
;
; __asm__ ("iny");
;
	iny
;
; __asm__ ("sty %v", rle_buffer_i);
;
	sty     _rle_buffer_i
;
; __asm__ ("lda %w, x", ATTRIB_BUFFER_V);
;
	lda     $0400,x
;
; __asm__ ("and #$0f");
;
	and     #$0f
;
; __asm__ ("ldy %v", rda);
;
	ldy     _rda
;
; __asm__ ("ora (%v), y", c_ts_pals_2);
;
	ora     (_c_ts_pals_2),y
;
; __asm__ ("ldy %v", rdb);
;
	ldy     _rdb
;
; __asm__ ("ora (%v), y", c_ts_pals_3);
;
	ora     (_c_ts_pals_3),y
;
; __asm__ ("sta %w, x", ATTRIB_BUFFER_V);
;
	sta     $0400,x
;
; __asm__ ("inx");
;
	inx
;
; __asm__ ("ldy %v", rle_buffer_i);
;
	ldy     _rle_buffer_i
;
; __asm__ ("lda (%v), y", rle_buffer_ptr);
;
	lda     (_rle_buffer_ptr),y
;
; __asm__ ("sta %v", rda);
;
	sta     _rda
;
; __asm__ ("iny");
;
	iny
;
; __asm__ ("lda (%v), y", rle_buffer_ptr);
;
	lda     (_rle_buffer_ptr),y
;
; __asm__ ("sta %v", rdb);
;
	sta     _rdb
;
; __asm__ ("iny");
;
	iny
;
; __asm__ ("sty %v", rle_buffer_i);
;
	sty     _rle_buffer_i
;
; __asm__ ("lda %w, x", ATTRIB_BUFFER_V);
;
	lda     $0400,x
;
; __asm__ ("and #$0f");
;
	and     #$0f
;
; __asm__ ("ldy %v", rda);
;
	ldy     _rda
;
; __asm__ ("ora (%v), y", c_ts_pals_2);
;
	ora     (_c_ts_pals_2),y
;
; __asm__ ("ldy %v", rdb);
;
	ldy     _rdb
;
; __asm__ ("ora (%v), y", c_ts_pals_3);
;
	ora     (_c_ts_pals_3),y
;
; __asm__ ("sta %w, x", ATTRIB_BUFFER_V);
;
	sta     $0400,x
;
; __asm__ ("inx");
;
	inx
;
; __asm__ ("ldy %v", rle_buffer_i);
;
	ldy     _rle_buffer_i
;
; __asm__ ("lda (%v), y", rle_buffer_ptr);
;
	lda     (_rle_buffer_ptr),y
;
; __asm__ ("sta %v", rda);
;
	sta     _rda
;
; __asm__ ("iny");
;
	iny
;
; __asm__ ("lda (%v), y", rle_buffer_ptr);
;
	lda     (_rle_buffer_ptr),y
;
; __asm__ ("sta %v", rdb);
;
	sta     _rdb
;
; __asm__ ("iny");
;
	iny
;
; __asm__ ("sty %v", rle_buffer_i);
;
	sty     _rle_buffer_i
;
; __asm__ ("lda %w, x", ATTRIB_BUFFER_V);
;
	lda     $0400,x
;
; __asm__ ("and #$0f");
;
	and     #$0f
;
; __asm__ ("ldy %v", rda);
;
	ldy     _rda
;
; __asm__ ("ora (%v), y", c_ts_pals_2);
;
	ora     (_c_ts_pals_2),y
;
; __asm__ ("ldy %v", rdb);
;
	ldy     _rdb
;
; __asm__ ("ora (%v), y", c_ts_pals_3);
;
	ora     (_c_ts_pals_3),y
;
; } else {    
;
	jmp     L4375
;
; __asm__ ("ldx %v", ATTRIB_READ);
;
L2FA3:	ldx     _ATTRIB_READ
;
; __asm__ ("ldy %v", rle_buffer_i);
;
	ldy     _rle_buffer_i
;
; __asm__ ("lda (%v), y", rle_buffer_ptr);
;
	lda     (_rle_buffer_ptr),y
;
; __asm__ ("sta %v", rda);
;
	sta     _rda
;
; __asm__ ("iny");
;
	iny
;
; __asm__ ("lda (%v), y", rle_buffer_ptr);
;
	lda     (_rle_buffer_ptr),y
;
; __asm__ ("sta %v", rdb);
;
	sta     _rdb
;
; __asm__ ("iny");
;
	iny
;
; __asm__ ("sty %v", rle_buffer_i);
;
	sty     _rle_buffer_i
;
; __asm__ ("lda %w, x", ATTRIB_BUFFER_V);
;
	lda     $0400,x
;
; __asm__ ("and #$f0");
;
	and     #$f0
;
; __asm__ ("ldy %v", rda);
;
	ldy     _rda
;
; __asm__ ("ora (%v), y", c_ts_pals_0);
;
	ora     (_c_ts_pals_0),y
;
; __asm__ ("ldy %v", rdb);
;
	ldy     _rdb
;
; __asm__ ("ora (%v), y", c_ts_pals_1);
;
	ora     (_c_ts_pals_1),y
;
; __asm__ ("sta %w, x", ATTRIB_BUFFER_V);
;
	sta     $0400,x
;
; __asm__ ("inx");
;
	inx
;
; __asm__ ("ldy %v", rle_buffer_i);
;
	ldy     _rle_buffer_i
;
; __asm__ ("lda (%v), y", rle_buffer_ptr);
;
	lda     (_rle_buffer_ptr),y
;
; __asm__ ("sta %v", rda);
;
	sta     _rda
;
; __asm__ ("iny");
;
	iny
;
; __asm__ ("lda (%v), y", rle_buffer_ptr);
;
	lda     (_rle_buffer_ptr),y
;
; __asm__ ("sta %v", rdb);
;
	sta     _rdb
;
; __asm__ ("iny");
;
	iny
;
; __asm__ ("sty %v", rle_buffer_i);
;
	sty     _rle_buffer_i
;
; __asm__ ("lda %w, x", ATTRIB_BUFFER_V);
;
	lda     $0400,x
;
; __asm__ ("and #$f0");
;
	and     #$f0
;
; __asm__ ("ldy %v", rda);
;
	ldy     _rda
;
; __asm__ ("ora (%v), y", c_ts_pals_0);
;
	ora     (_c_ts_pals_0),y
;
; __asm__ ("ldy %v", rdb);
;
	ldy     _rdb
;
; __asm__ ("ora (%v), y", c_ts_pals_1);
;
	ora     (_c_ts_pals_1),y
;
; __asm__ ("sta %w, x", ATTRIB_BUFFER_V);
;
	sta     $0400,x
;
; __asm__ ("inx");
;
	inx
;
; __asm__ ("ldy %v", rle_buffer_i);
;
	ldy     _rle_buffer_i
;
; __asm__ ("lda (%v), y", rle_buffer_ptr);
;
	lda     (_rle_buffer_ptr),y
;
; __asm__ ("sta %v", rda);
;
	sta     _rda
;
; __asm__ ("iny");
;
	iny
;
; __asm__ ("lda (%v), y", rle_buffer_ptr);
;
	lda     (_rle_buffer_ptr),y
;
; __asm__ ("sta %v", rdb);
;
	sta     _rdb
;
; __asm__ ("iny");
;
	iny
;
; __asm__ ("sty %v", rle_buffer_i);
;
	sty     _rle_buffer_i
;
; __asm__ ("lda %w, x", ATTRIB_BUFFER_V);
;
	lda     $0400,x
;
; __asm__ ("and #$f0");
;
	and     #$f0
;
; __asm__ ("ldy %v", rda);
;
	ldy     _rda
;
; __asm__ ("ora (%v), y", c_ts_pals_0);
;
	ora     (_c_ts_pals_0),y
;
; __asm__ ("ldy %v", rdb);
;
	ldy     _rdb
;
; __asm__ ("ora (%v), y", c_ts_pals_1);
;
	ora     (_c_ts_pals_1),y
;
; __asm__ ("sta %w, x", ATTRIB_BUFFER_V);
;
	sta     $0400,x
;
; __asm__ ("inx");
;
	inx
;
; __asm__ ("ldy %v", rle_buffer_i);
;
	ldy     _rle_buffer_i
;
; __asm__ ("lda (%v), y", rle_buffer_ptr);
;
	lda     (_rle_buffer_ptr),y
;
; __asm__ ("sta %v", rda);
;
	sta     _rda
;
; __asm__ ("iny");
;
	iny
;
; __asm__ ("lda (%v), y", rle_buffer_ptr);
;
	lda     (_rle_buffer_ptr),y
;
; __asm__ ("sta %v", rdb);
;
	sta     _rdb
;
; __asm__ ("iny");
;
	iny
;
; __asm__ ("sty %v", rle_buffer_i);
;
	sty     _rle_buffer_i
;
; __asm__ ("lda %w, x", ATTRIB_BUFFER_V);
;
	lda     $0400,x
;
; __asm__ ("and #$f0");
;
	and     #$f0
;
; __asm__ ("ldy %v", rda);
;
	ldy     _rda
;
; __asm__ ("ora (%v), y", c_ts_pals_0);
;
	ora     (_c_ts_pals_0),y
;
; __asm__ ("ldy %v", rdb);
;
	ldy     _rdb
;
; __asm__ ("ora (%v), y", c_ts_pals_1);
;
	ora     (_c_ts_pals_1),y
;
; __asm__ ("sta %w, x", ATTRIB_BUFFER_V);
;
	sta     $0400,x
;
; __asm__ ("inx");
;
	inx
;
; __asm__ ("ldy %v", rle_buffer_i);
;
	ldy     _rle_buffer_i
;
; __asm__ ("lda (%v), y", rle_buffer_ptr);
;
	lda     (_rle_buffer_ptr),y
;
; __asm__ ("sta %v", rda);
;
	sta     _rda
;
; __asm__ ("iny");
;
	iny
;
; __asm__ ("lda (%v), y", rle_buffer_ptr);
;
	lda     (_rle_buffer_ptr),y
;
; __asm__ ("sta %v", rdb);
;
	sta     _rdb
;
; __asm__ ("iny");
;
	iny
;
; __asm__ ("sty %v", rle_buffer_i);
;
	sty     _rle_buffer_i
;
; __asm__ ("lda %w, x", ATTRIB_BUFFER_V);
;
	lda     $0400,x
;
; __asm__ ("and #$f0");
;
	and     #$f0
;
; __asm__ ("ldy %v", rda);
;
	ldy     _rda
;
; __asm__ ("ora (%v), y", c_ts_pals_0);
;
	ora     (_c_ts_pals_0),y
;
; __asm__ ("ldy %v", rdb);
;
	ldy     _rdb
;
; __asm__ ("ora (%v), y", c_ts_pals_1);
;
	ora     (_c_ts_pals_1),y
;
; __asm__ ("sta %w, x", ATTRIB_BUFFER_V);
;
	sta     $0400,x
;
; __asm__ ("inx");
;
	inx
;
; __asm__ ("ldy %v", rle_buffer_i);
;
	ldy     _rle_buffer_i
;
; __asm__ ("lda (%v), y", rle_buffer_ptr);
;
	lda     (_rle_buffer_ptr),y
;
; __asm__ ("sta %v", rda);
;
	sta     _rda
;
; __asm__ ("iny");
;
	iny
;
; __asm__ ("lda (%v), y", rle_buffer_ptr);
;
	lda     (_rle_buffer_ptr),y
;
; __asm__ ("sta %v", rdb);
;
	sta     _rdb
;
; __asm__ ("iny");
;
	iny
;
; __asm__ ("sty %v", rle_buffer_i);
;
	sty     _rle_buffer_i
;
; __asm__ ("lda %w, x", ATTRIB_BUFFER_V);
;
	lda     $0400,x
;
; __asm__ ("and #$f0");
;
	and     #$f0
;
; __asm__ ("ldy %v", rda);
;
	ldy     _rda
;
; __asm__ ("ora (%v), y", c_ts_pals_0);
;
	ora     (_c_ts_pals_0),y
;
; __asm__ ("ldy %v", rdb);
;
	ldy     _rdb
;
; __asm__ ("ora (%v), y", c_ts_pals_1);
;
	ora     (_c_ts_pals_1),y
;
; __asm__ ("sta %w, x", ATTRIB_BUFFER_V);
;
	sta     $0400,x
;
; __asm__ ("inx");
;
	inx
;
; __asm__ ("ldy %v", rle_buffer_i);
;
	ldy     _rle_buffer_i
;
; __asm__ ("lda (%v), y", rle_buffer_ptr);
;
	lda     (_rle_buffer_ptr),y
;
; __asm__ ("sta %v", rda);
;
	sta     _rda
;
; __asm__ ("iny");
;
	iny
;
; __asm__ ("lda (%v), y", rle_buffer_ptr);
;
	lda     (_rle_buffer_ptr),y
;
; __asm__ ("sta %v", rdb);
;
	sta     _rdb
;
; __asm__ ("iny");
;
	iny
;
; __asm__ ("sty %v", rle_buffer_i);
;
	sty     _rle_buffer_i
;
; __asm__ ("lda %w, x", ATTRIB_BUFFER_V);
;
	lda     $0400,x
;
; __asm__ ("and #$f0");
;
	and     #$f0
;
; __asm__ ("ldy %v", rda);
;
	ldy     _rda
;
; __asm__ ("ora (%v), y", c_ts_pals_0);
;
	ora     (_c_ts_pals_0),y
;
; __asm__ ("ldy %v", rdb);
;
	ldy     _rdb
;
; __asm__ ("ora (%v), y", c_ts_pals_1);
;
	ora     (_c_ts_pals_1),y
;
; __asm__ ("sta %w, x", ATTRIB_BUFFER_V);
;
	sta     $0400,x
;
; __asm__ ("inx");
;
	inx
;
; __asm__ ("ldy %v", rle_buffer_i);
;
	ldy     _rle_buffer_i
;
; __asm__ ("lda (%v), y", rle_buffer_ptr);
;
	lda     (_rle_buffer_ptr),y
;
; __asm__ ("sta %v", rda);
;
	sta     _rda
;
; __asm__ ("iny");
;
	iny
;
; __asm__ ("lda (%v), y", rle_buffer_ptr);
;
	lda     (_rle_buffer_ptr),y
;
; __asm__ ("sta %v", rdb);
;
	sta     _rdb
;
; __asm__ ("iny");
;
	iny
;
; __asm__ ("sty %v", rle_buffer_i);
;
	sty     _rle_buffer_i
;
; __asm__ ("lda %w, x", ATTRIB_BUFFER_V);
;
	lda     $0400,x
;
; __asm__ ("and #$f0");
;
	and     #$f0
;
; __asm__ ("ldy %v", rda);
;
	ldy     _rda
;
; __asm__ ("ora (%v), y", c_ts_pals_0);
;
	ora     (_c_ts_pals_0),y
;
; __asm__ ("ldy %v", rdb);
;
	ldy     _rdb
;
; __asm__ ("ora (%v), y", c_ts_pals_1);
;
	ora     (_c_ts_pals_1),y
;
; __asm__ ("sta %w, x", ATTRIB_BUFFER_V);
;
L4375:	sta     $0400,x
;
; break;
;
	jmp     L4374
;
; rda = cam_pos & 0x08;
;
L31CC:	lda     _cam_pos
	and     #$08
	sta     _rda
;
; if (rda != cam_pos_bit_3) {
;
	lda     _cam_pos_bit_3
	cmp     _rda
	bne     L437A
;
; }
;
	rts
;
; cam_pos_bit_3 = rda;
;
L437A:	lda     _rda
	sta     _cam_pos_bit_3
;
; gpri = gppi = rle_buffer_i = 0;
;
	lda     #$00
	sta     _rle_buffer_i
	sta     _gppi
	sta     _gpri
;
; scroll_writers_realloc ();
;
	jsr     _scroll_writers_realloc
;
; break;
;
	jmp     L4374
;
; __asm__ ("ldx %v", gppi);
;
L31DA:	ldx     _gppi
;
; __asm__ ("ldy %v", rle_buffer_i);
;
	ldy     _rle_buffer_i
;
; __asm__ ("lda (%v), y", rle_buffer_ptr);
;
	lda     (_rle_buffer_ptr),y
;
; __asm__ ("tay");
;
	tay
;
; __asm__ ("inc %v", rle_buffer_i);
;
	inc     _rle_buffer_i
;
; __asm__ ("lda (%v), y", c_ts_tmaps_0);
;
	lda     (_c_ts_tmaps_0),y
;
; __asm__ ("sta %w, x", SCROLL_BUFFER_V);
;
	sta     $0440,x
;
; __asm__ ("inx");
;
	inx
;
; __asm__ ("lda (%v), y", c_ts_tmaps_1);
;
	lda     (_c_ts_tmaps_1),y
;
; __asm__ ("sta %w, x", SCROLL_BUFFER_V);
;
	sta     $0440,x
;
; __asm__ ("inx");
;
	inx
;
; __asm__ ("ldy %v", rle_buffer_i);
;
	ldy     _rle_buffer_i
;
; __asm__ ("lda (%v), y", rle_buffer_ptr);
;
	lda     (_rle_buffer_ptr),y
;
; __asm__ ("tay");
;
	tay
;
; __asm__ ("inc %v", rle_buffer_i);
;
	inc     _rle_buffer_i
;
; __asm__ ("lda (%v), y", c_ts_tmaps_0);
;
	lda     (_c_ts_tmaps_0),y
;
; __asm__ ("sta %w, x", SCROLL_BUFFER_V);
;
	sta     $0440,x
;
; __asm__ ("inx");
;
	inx
;
; __asm__ ("lda (%v), y", c_ts_tmaps_1);
;
	lda     (_c_ts_tmaps_1),y
;
; __asm__ ("sta %w, x", SCROLL_BUFFER_V);
;
	sta     $0440,x
;
; __asm__ ("inx");
;
	inx
;
; __asm__ ("ldy %v", rle_buffer_i);
;
	ldy     _rle_buffer_i
;
; __asm__ ("lda (%v), y", rle_buffer_ptr);
;
	lda     (_rle_buffer_ptr),y
;
; __asm__ ("tay");
;
	tay
;
; __asm__ ("inc %v", rle_buffer_i);
;
	inc     _rle_buffer_i
;
; __asm__ ("lda (%v), y", c_ts_tmaps_0);
;
	lda     (_c_ts_tmaps_0),y
;
; __asm__ ("sta %w, x", SCROLL_BUFFER_V);
;
	sta     $0440,x
;
; __asm__ ("inx");
;
	inx
;
; __asm__ ("lda (%v), y", c_ts_tmaps_1);
;
	lda     (_c_ts_tmaps_1),y
;
; __asm__ ("sta %w, x", SCROLL_BUFFER_V);
;
	sta     $0440,x
;
; __asm__ ("inx");
;
	inx
;
; __asm__ ("ldy %v", rle_buffer_i);
;
	ldy     _rle_buffer_i
;
; __asm__ ("lda (%v), y", rle_buffer_ptr);
;
	lda     (_rle_buffer_ptr),y
;
; __asm__ ("tay");
;
	tay
;
; __asm__ ("inc %v", rle_buffer_i);
;
	inc     _rle_buffer_i
;
; __asm__ ("lda (%v), y", c_ts_tmaps_0);
;
	lda     (_c_ts_tmaps_0),y
;
; __asm__ ("sta %w, x", SCROLL_BUFFER_V);
;
	sta     $0440,x
;
; __asm__ ("inx");
;
	inx
;
; __asm__ ("lda (%v), y", c_ts_tmaps_1);
;
	lda     (_c_ts_tmaps_1),y
;
; __asm__ ("sta %w, x", SCROLL_BUFFER_V);
;
	sta     $0440,x
;
; __asm__ ("inx");
;
	inx
;
; __asm__ ("ldy %v", rle_buffer_i);
;
	ldy     _rle_buffer_i
;
; __asm__ ("lda (%v), y", rle_buffer_ptr);
;
	lda     (_rle_buffer_ptr),y
;
; __asm__ ("tay");
;
	tay
;
; __asm__ ("inc %v", rle_buffer_i);
;
	inc     _rle_buffer_i
;
; __asm__ ("lda (%v), y", c_ts_tmaps_0);
;
	lda     (_c_ts_tmaps_0),y
;
; __asm__ ("sta %w, x", SCROLL_BUFFER_V);
;
	sta     $0440,x
;
; __asm__ ("inx");
;
	inx
;
; __asm__ ("lda (%v), y", c_ts_tmaps_1);
;
	lda     (_c_ts_tmaps_1),y
;
; __asm__ ("sta %w, x", SCROLL_BUFFER_V);
;
	sta     $0440,x
;
; __asm__ ("inx");
;
	inx
;
; __asm__ ("ldy %v", rle_buffer_i);
;
	ldy     _rle_buffer_i
;
; __asm__ ("lda (%v), y", rle_buffer_ptr);
;
	lda     (_rle_buffer_ptr),y
;
; __asm__ ("tay");
;
	tay
;
; __asm__ ("inc %v", rle_buffer_i);
;
	inc     _rle_buffer_i
;
; __asm__ ("lda (%v), y", c_ts_tmaps_0);
;
	lda     (_c_ts_tmaps_0),y
;
; __asm__ ("sta %w, x", SCROLL_BUFFER_V);
;
	sta     $0440,x
;
; __asm__ ("inx");
;
	inx
;
; __asm__ ("lda (%v), y", c_ts_tmaps_1);
;
	lda     (_c_ts_tmaps_1),y
;
; __asm__ ("sta %w, x", SCROLL_BUFFER_V);
;
	sta     $0440,x
;
; __asm__ ("inx");
;
	inx
;
; __asm__ ("ldy %v", rle_buffer_i);
;
	ldy     _rle_buffer_i
;
; __asm__ ("lda (%v), y", rle_buffer_ptr);
;
	lda     (_rle_buffer_ptr),y
;
; __asm__ ("tay");
;
	tay
;
; __asm__ ("inc %v", rle_buffer_i);
;
	inc     _rle_buffer_i
;
; __asm__ ("lda (%v), y", c_ts_tmaps_0);
;
	lda     (_c_ts_tmaps_0),y
;
; __asm__ ("sta %w, x", SCROLL_BUFFER_V);
;
	sta     $0440,x
;
; __asm__ ("inx");
;
	inx
;
; __asm__ ("lda (%v), y", c_ts_tmaps_1);
;
	lda     (_c_ts_tmaps_1),y
;
; __asm__ ("sta %w, x", SCROLL_BUFFER_V);
;
	sta     $0440,x
;
; __asm__ ("inx");
;
	inx
;
; __asm__ ("ldy %v", rle_buffer_i);
;
	ldy     _rle_buffer_i
;
; __asm__ ("lda (%v), y", rle_buffer_ptr);
;
	lda     (_rle_buffer_ptr),y
;
; __asm__ ("tay");
;
	tay
;
; __asm__ ("inc %v", rle_buffer_i);
;
	inc     _rle_buffer_i
;
; __asm__ ("lda (%v), y", c_ts_tmaps_0);
;
	lda     (_c_ts_tmaps_0),y
;
; __asm__ ("sta %w, x", SCROLL_BUFFER_V);
;
	sta     $0440,x
;
; __asm__ ("inx");
;
	inx
;
; __asm__ ("lda (%v), y", c_ts_tmaps_1);
;
	lda     (_c_ts_tmaps_1),y
;
; __asm__ ("sta %w, x", SCROLL_BUFFER_V);
;
L4378:	sta     $0440,x
;
; __asm__ ("inx");
;
	inx
;
; __asm__ ("stx %v", gppi);  
;
	stx     _gppi
;
; ++ scroll_state;
;
L4374:	inc     _scroll_state
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ cm_two_points (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_cm_two_points: near

.segment	"CODE"

;
; at1 = behs [SCREEN_BUFFER [cx1 | ((cy1 & 15) << 4)]];
;
	lda     _cy1
	ldx     #$00
	and     #$0F
	jsr     shlax4
	ora     _cx1
	inx
	inx
	inx
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	clc
	adc     _behs
	ldx     _behs+1
	bcc     L437B
	inx
L437B:	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	sta     _at1
;
; at2 = behs [SCREEN_BUFFER [cx2 | ((cy2 & 15) << 4)]];
;
	lda     _cy2
	ldx     #$00
	and     #$0F
	jsr     shlax4
	ora     _cx2
	inx
	inx
	inx
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	clc
	adc     _behs
	ldx     _behs+1
	bcc     L437C
	inx
L437C:	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	sta     _at2
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ hud_paint (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_hud_paint: near

.segment	"CODE"

;
; nt = NAMETABLE_B;
;
	ldx     #$24
	lda     #$00
	sta     _nt
	stx     _nt+1
;
; if (pselected == 0 || game_mode != GM_SINGLE)
;
	lda     _pselected
	beq     L437E
	lda     _game_mode
	beq     L32A4
;
; p_s (1, 1, "ESPINETE            DON PIMPON");
;
L437E:	jsr     decsp2
	lda     #$01
	tay
	sta     (sp),y
	dey
	sta     (sp),y
	lda     #<(L32AA)
	ldx     #>(L32AA)
;
; else
;
	jmp     L437D
;
; p_s (1, 1, "DON PIMPON            ESPINETE");
;
L32A4:	jsr     decsp2
	lda     #$01
	tay
	sta     (sp),y
	dey
	sta     (sp),y
	lda     #<(L32B0)
	ldx     #>(L32B0)
L437D:	jsr     _p_s
;
; p_s (1, 2, "#000000 %%% &    & %%% 000000#");
;
	jsr     decsp2
	lda     #$01
	tay
	sta     (sp),y
	lda     #$02
	dey
	sta     (sp),y
	lda     #<(L32B5)
	ldx     #>(L32B5)
	jsr     _p_s
;
; if (game_mode == GM_SINGLE) p_s (18, 2, " PRESS START!");
;
	lda     _game_mode
	bne     L437F
	jsr     decsp2
	lda     #$12
	ldy     #$01
	sta     (sp),y
	lda     #$02
	dey
	sta     (sp),y
	lda     #<(L32BC)
	ldx     #>(L32BC)
	jsr     _p_s
;
; if (game_mode != GM_VS) p_s (13, 2, "  $   ");
;
L437F:	lda     _game_mode
	cmp     #$02
	beq     L32BE
	jsr     decsp2
	lda     #$0D
	ldy     #$01
	sta     (sp),y
	lda     #$02
	dey
	sta     (sp),y
	lda     #<(L32C3)
	ldx     #>(L32C3)
	jsr     _p_s
;
; oam_spr (243, 21, 1, 0x20, 0);
;
L32BE:	jsr     decsp4
	lda     #$F3
	ldy     #$03
	sta     (sp),y
	lda     #$15
	dey
	sta     (sp),y
	lda     #$01
	dey
	sta     (sp),y
	lda     #$20
	dey
	sta     (sp),y
	tya
	jmp     _oam_spr

.endproc

; ---------------------------------------------------------------
; void __near__ hud_paint_lives (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_hud_paint_lives: near

.segment	"CODE"

;
; if (game_mode != GM_VS) {
;
	lda     _game_mode
	cmp     #$02
	beq     L32CC
;
; p_t1 (16, 2, aplives [0]);
;
	jsr     decsp2
	lda     #$10
	ldy     #$01
	sta     (sp),y
	lda     #$02
	dey
	sta     (sp),y
	lda     _aplives
	jmp     _p_t1
;
; if (apon [0]) p_t1 (14, 2, aplives [0]);
;
L32CC:	lda     _apon
	beq     L32D4
	jsr     decsp2
	lda     #$0E
	ldy     #$01
	sta     (sp),y
	lda     #$02
	dey
	sta     (sp),y
	lda     _aplives
	jsr     _p_t1
;
; if (apon [1]) p_t1 (17, 2, aplives [1]);
;
L32D4:	lda     _apon+1
	beq     L32DC
	jsr     decsp2
	lda     #$11
	ldy     #$01
	sta     (sp),y
	lda     #$02
	dey
	sta     (sp),y
	lda     _aplives+1
	jmp     _p_t1
;
; }
;
L32DC:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ hud_update_life (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_hud_update_life: near

.segment	"CODE"

;
; gp_addr = NAMETABLE_B + 64 + (pindex ? (22 - plife) : (9 + plife));
;
	lda     _pindex
	beq     L32E8
	lda     #$16
	sec
	sbc     _plife
	ldx     #$00
	jmp     L32EE
L32E8:	tax
	lda     _plife
	clc
	adc     #$09
	bcc     L4380
	inx
L32EE:	clc
L4380:	adc     #$40
	sta     _gp_addr
	txa
	adc     #$24
	sta     _gp_addr+1
;
; *ul = MSB (gp_addr); ++ ul;
;
	lda     _ul+1
	sta     ptr1+1
	lda     _ul
	sta     ptr1
	lda     _gp_addr+1
	ldy     #$00
	sta     (ptr1),y
	inc     _ul
	bne     L32F4
	inc     _ul+1
;
; *ul = LSB (gp_addr); ++ ul; 
;
L32F4:	lda     _ul+1
	sta     ptr1+1
	lda     _ul
	sta     ptr1
	lda     _gp_addr
	sta     (ptr1),y
	inc     _ul
	bne     L32FA
	inc     _ul+1
;
; *ul = 0; ++ ul;
;
L32FA:	lda     _ul+1
	sta     ptr1+1
	lda     _ul
	sta     ptr1
	tya
	sta     (ptr1),y
	inc     _ul
	bne     L32FE
	inc     _ul+1
;
; }
;
L32FE:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ hud_update_score (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_hud_update_score: near

.segment	"CODE"

;
; gp_addr = NAMETABLE_B + 64 + (pindex ? 24 : 2); 
;
	lda     _pindex
	beq     L3303
	lda     #$18
	jmp     L3305
L3303:	lda     #$02
L3305:	clc
	adc     #$40
	sta     _gp_addr
	lda     #$00
	adc     #$24
	sta     _gp_addr+1
;
; *ul = MSB (gp_addr) | NT_UPD_HORZ; ++ ul;
;
	lda     _ul+1
	sta     ptr1+1
	lda     _ul
	sta     ptr1
	lda     _gp_addr+1
	ora     #$40
	ldy     #$00
	sta     (ptr1),y
	inc     _ul
	bne     L330C
	inc     _ul+1
;
; *ul = LSB (gp_addr); ++ ul; 
;
L330C:	lda     _ul+1
	sta     ptr1+1
	lda     _ul
	sta     ptr1
	lda     _gp_addr
	sta     (ptr1),y
	inc     _ul
	bne     L3312
	inc     _ul+1
;
; *ul = 5; ++ ul;
;
L3312:	lda     _ul+1
	sta     ptr1+1
	lda     _ul
	sta     ptr1
	lda     #$05
	sta     (ptr1),y
	inc     _ul
	bne     L3316
	inc     _ul+1
;
; gp_gen = bcd_score + (pindex ? 5 : 0);
;
L3316:	lda     _pindex
	beq     L331C
	lda     #$05
L331C:	clc
	adc     #<(_bcd_score)
	sta     _gp_gen
	tya
	adc     #>(_bcd_score)
	sta     _gp_gen+1
;
; bcd_print_ul ();
;
	jmp     _bcd_print_ul

.endproc

; ---------------------------------------------------------------
; void __near__ puas_init (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_puas_init: near

.segment	"CODE"

;
; __asm__ ("ldx #%b", PUAS_MAX);
;
	ldx     #$02
;
; __asm__ ("lda #0");
;
	lda     #0
;
; __asm__ ("dex");
;
L3325:	dex
;
; __asm__ ("sta %v, x", puas_st);
;
	sta     _puas_st,x
;
; __asm__ ("txa");
;
	txa
;
; __asm__ ("bne %g", puas_init_loop);
;
	bne     L3325
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ puas_create (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_puas_create: near

.segment	"CODE"

;
; __asm__ ("ldx #%b", PUAS_MAX);  
;
	ldx     #$02
;
; __asm__ ("dex");
;
L3334:	dex
;
; __asm__ ("lda %v, x", puas_st);
;
	lda     _puas_st,x
;
; __asm__ ("bne %g", puas_create_continue);
;
	bne     L333C
;
; __asm__ ("lda %v", prx);
;
	lda     _prx
;
; __asm__ ("sta %v, x", puas_x);
;
	sta     _puas_x,x
;
; __asm__ ("lda #1");
;
	lda     #1
;
; __asm__ ("sta %v, x", puas_st);
;
	sta     _puas_st,x
;
; __asm__ ("lda %v", pfacing);
;
	lda     _pfacing
;
; __asm__ ("beq %g", puas_create_left);
;
	beq     L334A
;
; __asm__ ("lda #%b", PUAS_VX);
;
	lda     #$08
;
; __asm__ ("jmp %g", puas_create_facing);
;
	jmp     L3351
;
; __asm__ ("lda #%b", -PUAS_VX);
;
L334A:	lda     #$F8
;
; __asm__ ("sta %v, x", puas_mx);
;
L3351:	sta     _puas_mx,x
;
; __asm__ ("txa");
;
	txa
;
; __asm__ ("asl a");
;
	asl     a
;
; __asm__ ("tax");
;
	tax
;
; __asm__ ("lda %v", pry);
;
	lda     _pry
;
; __asm__ ("sta %v, x", puas_y);
;
	sta     _puas_y,x
;
; __asm__ ("lda %v+1", pry);
;
	lda     _pry+1
;
; __asm__ ("sta %v+1, x", puas_y);
;
	sta     _puas_y+1,x
;
; __asm__ ("rts");
;
	rts
;
; __asm__ ("txa");
;
L333C:	txa
;
; __asm__ ("bne %g", puas_create_loop); 
;
	bne     L3334
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ puas_do (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_puas_do: near

.segment	"CODE"

;
; __asm__ ("ldy #%b", PUAS_MAX);
;
	ldy     #$02
;
; __asm__ ("dey");
;
L3374:	dey
;
; __asm__ ("tya");
;
	tya
;
; __asm__ ("asl a");
;
	asl     a
;
; __asm__ ("tax");
;
	tax
;
; __asm__ ("lda %v, y", puas_st);
;
	lda     _puas_st,y
;
; __asm__ ("beq %g", puas_do_continue);
;
	jeq     L33EA
;
; __asm__ ("lda %v, x", puas_y);
;
	lda     _puas_y,x
;
; __asm__ ("sta %v", _puas_y);
;
	sta     __puas_y
;
; __asm__ ("lda %v+1, x", puas_y);
;
	lda     _puas_y+1,x
;
; __asm__ ("sta %v+1", _puas_y);
;
	sta     __puas_y+1
;
; __asm__ ("lda %v, y", puas_mx);
;
	lda     _puas_mx,y
;
; __asm__ ("sta %v", _puas_mx);
;
	sta     __puas_mx
;
; __asm__ ("lda %v, y", puas_x);
;
	lda     _puas_x,y
;
; __asm__ ("sta %v", _puas_x);
;
	sta     __puas_x
;
; __asm__ ("lda %v, y", puas_st);
;
	lda     _puas_st,y
;
; __asm__ ("cmp #1");
;
	cmp     #1
;
; __asm__ ("bne %g", puas_do_state_2);
;
	bne     L339A
;
; __asm__ ("lda %v", _puas_x);
;
	lda     __puas_x
;
; __asm__ ("clc");
;
	clc
;
; __asm__ ("adc %v", _puas_mx);
;
	adc     __puas_mx
;
; __asm__ ("sta %v", _puas_x);
;
	sta     __puas_x
;
; __asm__ ("jmp %g", puas_do_state_done);
;
	jmp     L33B3
;
; __asm__ ("clc");
;
L339A:	clc
;
; __asm__ ("lda %v", _puas_y);  
;
	lda     __puas_y
;
; __asm__ ("adc #8");
;
	adc     #8
;
; __asm__ ("sta %v", _puas_y);
;
	sta     __puas_y
;
; __asm__ ("bcc %g", PDS2NC);
;
	bcc     L33B3
;
; __asm__ ("inc %v+1", _puas_y);
;
	inc     __puas_y+1
;
; __asm__ ("lda %v", _puas_x);
;
L33B3:	lda     __puas_x
;
; __asm__ ("cmp #%b", PUAS_VX);
;
	cmp     #$08
;
; __asm__ ("bcc %g", puas_do_prune_do);
;
	bcc     L33C0
;
; __asm__ ("cmp #%w", (248 - PUAS_VX + 1));
;
	cmp     #$00F1
;
; __asm__ ("bcs %g", puas_do_prune_do);
;
	bcs     L33C0
;
; __asm__ ("clc");
;
	clc
;
; __asm__ ("lda %v", cam_pos);
;
	lda     _cam_pos
;
; __asm__ ("adc #232");
;
	adc     #232
;
; __asm__ ("sta %v", rdu16);
;
	sta     _rdu16
;
; __asm__ ("lda %v+1", cam_pos);
;
	lda     _cam_pos+1
;
; __asm__ ("adc #0");
;
	adc     #0
;
; __asm__ ("sta %v+1", rdu16);
;
	sta     _rdu16+1
;
; __asm__ ("lda %v", _puas_y);
;
	lda     __puas_y
;
; __asm__ ("cmp %v", rdu16);
;
	cmp     _rdu16
;
; __asm__ ("lda %v+1", _puas_y);
;
	lda     __puas_y+1
;
; __asm__ ("sbc %v+1", rdu16);
;
	sbc     _rdu16+1
;
; __asm__ ("bcc %g", puas_do_prune_else);
;
	bcc     L33E1
;
; __asm__ ("lda #0");
;
L33C0:	lda     #0
;
; __asm__ ("sta %v, y", puas_st);
;
	sta     _puas_st,y
;
; __asm__ ("jmp %g", puas_do_prune_done);
;
	jmp     L33EA
;
; __asm__ ("sty %v", gpit);
;
L33E1:	sty     _gpit
;
; if (_puas_y > cam_pos) oam_index = oam_spr (
;
	lda     __puas_y
	sec
	sbc     _cam_pos
	sta     tmp1
	lda     __puas_y+1
	sbc     _cam_pos+1
	ora     tmp1
	bcc     L33EF
	beq     L33EF
;
; _puas_x, _puas_y + SPRITE_ADJUST - cam_pos,
;
	jsr     decsp4
	lda     __puas_x
	ldy     #$03
	sta     (sp),y
	lda     __puas_y
	ldx     __puas_y+1
	sec
	sbc     #$01
	bcs     L4381
	dex
	sec
L4381:	sbc     #$F0
	pha
	txa
	sbc     #$FF
	tax
	pla
	sec
	sbc     _cam_pos
	pha
	txa
	sbc     _cam_pos+1
	pla
	dey
	sta     (sp),y
;
; PUAS_PATTERN,
;
	lda     #$11
	dey
	sta     (sp),y
;
; _puas_mx > 0 ? 0 : 0x40,
;
	lda     __puas_mx
	sec
	sbc     #$01
	bvs     L33FA
	eor     #$80
L33FA:	bpl     L4382
	lda     #$00
	jmp     L4383
L4382:	lda     #$40
L4383:	dey
	sta     (sp),y
;
; );
;
	lda     _oam_index
	jsr     _oam_spr
	sta     _oam_index
;
; __asm__ ("lda %v", gpit);
;
L33EF:	lda     _gpit
;
; __asm__ ("tay");
;
	tay
;
; __asm__ ("asl a");
;
	asl     a
;
; __asm__ ("tax");
;
	tax
;
; __asm__ ("lda %v", _puas_x);
;
	lda     __puas_x
;
; __asm__ ("sta %v, y", puas_x);
;
	sta     _puas_x,y
;
; __asm__ ("lda %v", _puas_y);
;
	lda     __puas_y
;
; __asm__ ("sta %v, x", puas_y);
;
	sta     _puas_y,x
;
; __asm__ ("lda %v+1", _puas_y);
;
	lda     __puas_y+1
;
; __asm__ ("sta %v+1, x", puas_y);
;
	sta     _puas_y+1,x
;
; __asm__ ("tya");
;
L33EA:	tya
;
; __asm__ ("bne %g", puas_do_loop);
;
	jne     L3374
;
; } 
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ points_init (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_points_init: near

.segment	"CODE"

;
; __asm__ ("ldx #%b", POINTS_MAX);
;
	ldx     #$04
;
; __asm__ ("lda #0");
;
	lda     #0
;
; __asm__ ("sta %v,x", points_fc);
;
L3421:	sta     _points_fc,x
;
; __asm__ ("dex");
;
	dex
;
; __asm__ ("bne %g", points_init_loop);
;
	bne     L3421
;
; __asm__ ("sta %v", points_slots_index);
;
	sta     _points_slots_index
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ points_create (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_points_create: near

.segment	"CODE"

;
; __asm__ ("lda %v", points_slots_index);
;
	lda     _points_slots_index
;
; __asm__ ("clc");
;
	clc
;
; __asm__ ("adc #1");
;
	adc     #1
;
; __asm__ ("and #3");
;
	and     #3
;
; __asm__ ("sta %v", points_slots_index);
;
	sta     _points_slots_index
;
; __asm__ ("tay");
;
	tay
;
; __asm__ ("lda %v", rdx);
;
	lda     _rdx
;
; __asm__ ("sta %v, y", points_x);
;
	sta     _points_x,y
;
; __asm__ ("lda %v", rdy);
;
	lda     _rdy
;
; __asm__ ("sta %v, y", points_y);
;
	sta     _points_y,y
;
; __asm__ ("lda #24");
;
	lda     #24
;
; __asm__ ("sta %v, y", points_fc);
;
	sta     _points_fc,y
;
; __asm__ ("lda %v", rdt);
;
	lda     _rdt
;
; __asm__ ("sta %v, y", points_id);
;
	sta     _points_id,y
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ points_do (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_points_do: near

.segment	"CODE"

;
; __asm__ ("ldx #%b", POINTS_MAX);
;
	ldx     #$04
;
; __asm__ ("stx %v", gpit);
;
	stx     _gpit
;
; __asm__ ("ldx %v", gpit); 
;
L344F:	ldx     _gpit
;
; __asm__ ("bne %g", points_do_loop_do);
;
	bne     L3455
;
; __asm__ ("rts");
;
	rts
;
; __asm__ ("dex");
;
L3455:	dex
;
; __asm__ ("stx %v", gpit);
;
	stx     _gpit
;
; __asm__ ("lda %v, x", points_fc);
;
	lda     _points_fc,x
;
; __asm__ ("jmp %g", points_do_loop);
;
	beq     L344F
;
; __asm__ ("dec %v, x", points_fc);
;
	dec     _points_fc,x
;
; __asm__ ("lda %v", frame_counter);
;
	lda     _frame_counter
;
; __asm__ ("and #7");
;
	and     #7
;
; __asm__ ("bne %g", points_do_loop_move_skip);
;
	bne     L3470
;
; __asm__ ("dec %v, x", points_y);
;
	dec     _points_y,x
;
; points_x [gpit], points_y [gpit],
;
L3470:	jsr     decsp3
	ldy     _gpit
	lda     _points_x,y
	ldy     #$02
	sta     (sp),y
	ldy     _gpit
	lda     _points_y,y
	ldy     #$01
	sta     (sp),y
;
; oam_index,
;
	lda     _oam_index
	dey
	sta     (sp),y
;
; spr_points [points_id [gpit]]
;
	ldy     _gpit
	ldx     #$00
	lda     _points_id,y
	asl     a
	bcc     L4385
	inx
	clc
L4385:	adc     #<(_spr_points)
;
; );
;
	sta     ptr1
;
; spr_points [points_id [gpit]]
;
	txa
	adc     #>(_spr_points)
;
; );
;
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _oam_meta_spr
	sta     _oam_index
;
; __asm__ ("jmp %g", points_do_loop);
;
	jmp     L344F

.endproc

; ---------------------------------------------------------------
; void __near__ player_init (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_player_init: near

.segment	"CODE"

;
; aprx [pindex] = pindex ? 192 : 64;
;
	lda     #<(_aprx)
	ldx     #>(_aprx)
	clc
	adc     _pindex
	bcc     L3488
	inx
L3488:	sta     ptr1
	stx     ptr1+1
	lda     _pindex
	beq     L348A
	lda     #$C0
	jmp     L438E
L348A:	lda     #$40
L438E:	ldy     #$00
	sta     (ptr1),y
;
; apry [pindex] = (MAP_H-3)<<4;
;
	ldx     #$00
	lda     _pindex
	asl     a
	bcc     L438A
	inx
	clc
L438A:	adc     #<(_apry)
	sta     ptr1
	txa
	adc     #>(_apry)
	sta     ptr1+1
	lda     #$D0
	sta     (ptr1),y
	iny
	lda     #$07
	sta     (ptr1),y
;
; apx [pindex] = aprx [pindex] << FIX_BITS;
;
	ldx     #$00
	lda     _pindex
	asl     a
	bcc     L438B
	inx
	clc
L438B:	adc     #<(_apx)
	sta     ptr1
	txa
	adc     #>(_apx)
	sta     ptr1+1
	ldy     _pindex
	ldx     #$00
	lda     _aprx,y
	jsr     aslax4
	ldy     #$00
	sta     (ptr1),y
	iny
	txa
	sta     (ptr1),y
;
; apy [pindex] = apry [pindex] << FIX_BITS;
;
	ldx     #$00
	lda     _pindex
	asl     a
	bcc     L438C
	inx
	clc
L438C:	adc     #<(_apy)
	sta     sreg
	txa
	adc     #>(_apy)
	sta     sreg+1
	ldx     #$00
	lda     _pindex
	asl     a
	bcc     L438D
	inx
	clc
L438D:	adc     #<(_apry)
	sta     ptr1
	txa
	adc     #>(_apry)
	sta     ptr1+1
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     aslax4
	sta     (sreg),y
	iny
	txa
	sta     (sreg),y
;
; apvx [pindex] = apvy [pindex] = 0;
;
	lda     #<(_apvx)
	ldx     #>(_apvx)
	clc
	adc     _pindex
	bcc     L349D
	inx
L349D:	jsr     pushax
	ldy     _pindex
	lda     #$00
	sta     _apvy,y
	tay
	jsr     staspidx
;
; apfacing [pindex] = pindex ? CELL_FACING_LEFT : CELL_FACING_RIGHT;
;
	lda     #<(_apfacing)
	ldx     #>(_apfacing)
	clc
	adc     _pindex
	bcc     L34A4
	inx
L34A4:	sta     ptr1
	stx     ptr1+1
	lda     _pindex
	beq     L438F
	lda     #$08
L438F:	ldy     #$00
	sta     (ptr1),y
;
; apj [pindex] = ap_pressingA [pindex] = 0;
;
	lda     #<(_apj)
	ldx     #>(_apj)
	clc
	adc     _pindex
	bcc     L34AC
	inx
L34AC:	jsr     pushax
	ldy     _pindex
	lda     #$00
	sta     _ap_pressingA,y
	tay
	jsr     staspidx
;
; apgotten [pindex] = 0; 
;
	ldy     _pindex
	sta     _apgotten,y
;
; apkill [pindex] = 0;
;
	ldy     _pindex
	sta     _apkill,y
;
; aplife [pindex] = PLAYER_LIFE_INI;
;
	ldy     _pindex
	lda     #$03
	sta     _aplife,y
;
; apst [pindex] = EST_NORMAL; 
;
	ldy     _pindex
	lda     #$00
	sta     _apst,y
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ players_init (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_players_init: near

.segment	"CODE"

;
; pindex = 0; player_init ();
;
	lda     #$00
	sta     _pindex
	jsr     _player_init
;
; pindex = 1; player_init ();
;
	lda     #$01
	sta     _pindex
	jmp     _player_init

.endproc

; ---------------------------------------------------------------
; void __near__ player_find_safe_spot (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_player_find_safe_spot: near

.segment	"CODE"

;
; pry = (cam_pos & 0xfff0) + 16; // Start from the top of the viewport
;
	lda     _cam_pos
	ldx     _cam_pos+1
	and     #$F0
	clc
	adc     #$10
	bcc     L34CC
	inx
L34CC:	sta     _pry
	stx     _pry+1
;
; cy1 = LSB (pry);
;
	sta     _cy1
;
; cx1 = pindex ? 15 : 0;
;
	lda     _pindex
	beq     L439A
	lda     #$0F
L439A:	sta     _cx1
;
; if (behs [SCREEN_BUFFER [cx1 | cy1]] & FLOOR_BITS) break;
;
L34D7:	ldx     #$00
	lda     _cy1
	ora     _cx1
	inx
	inx
	inx
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	clc
	adc     _behs
	ldx     _behs+1
	bcc     L4394
	inx
L4394:	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	and     #$0C
	bne     L34D8
;
; if (cx1) {
;
	lda     _cx1
	beq     L439C
;
; if (pindex) -- cx1; else ++ cx1;
;
	lda     _pindex
	beq     L439B
	dec     _cx1
	jmp     L34D7
L439B:	inc     _cx1
;
; } else { 
;
	jmp     L34D7
;
; cx1 = 15; pry += 16; cy1 += 16;
;
L439C:	lda     #$0F
	sta     _cx1
	lda     #$10
	clc
	adc     _pry
	sta     _pry
	bcc     L34ED
	inc     _pry+1
L34ED:	lda     #$10
	clc
	adc     _cy1
	sta     _cy1
;
; while (1) {
;
	jmp     L34D7
;
; aprx [pindex] = 4 + (cx1 << 4); apry [pindex] = pry - 16;
;
L34D8:	lda     #<(_aprx)
	ldx     #>(_aprx)
	clc
	adc     _pindex
	bcc     L34F2
	inx
L34F2:	sta     ptr1
	stx     ptr1+1
	lda     _cx1
	asl     a
	asl     a
	asl     a
	asl     a
	clc
	adc     #$04
	sta     (ptr1),y
	ldx     #$00
	lda     _pindex
	asl     a
	bcc     L4395
	inx
	clc
L4395:	adc     #<(_apry)
	sta     ptr1
	txa
	adc     #>(_apry)
	sta     ptr1+1
	lda     _pry
	ldx     _pry+1
	sec
	sbc     #$10
	bcs     L439D
	dex
L439D:	sta     (ptr1),y
	iny
	txa
	sta     (ptr1),y
;
; apx [pindex] = aprx [pindex] << FIX_BITS;
;
	ldx     #$00
	lda     _pindex
	asl     a
	bcc     L4396
	inx
	clc
L4396:	adc     #<(_apx)
	sta     ptr1
	txa
	adc     #>(_apx)
	sta     ptr1+1
	ldy     _pindex
	ldx     #$00
	lda     _aprx,y
	jsr     aslax4
	ldy     #$00
	sta     (ptr1),y
	iny
	txa
	sta     (ptr1),y
;
; apy [pindex] = apry [pindex] << FIX_BITS;
;
	ldx     #$00
	lda     _pindex
	asl     a
	bcc     L4397
	inx
	clc
L4397:	adc     #<(_apy)
	sta     sreg
	txa
	adc     #>(_apy)
	sta     sreg+1
	ldx     #$00
	lda     _pindex
	asl     a
	bcc     L4398
	inx
	clc
L4398:	adc     #<(_apry)
	sta     ptr1
	txa
	adc     #>(_apry)
	sta     ptr1+1
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     aslax4
	sta     (sreg),y
	iny
	txa
	sta     (sreg),y
;
; apon [pindex] = 1; 
;
	ldy     _pindex
	lda     #$01
	sta     _apon,y
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ player_hit (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_player_hit: near

.segment	"CODE"

;
; sfx_play (SFX_PLAYER_HIT, SC_PLAYER);
;
	lda     #$03
	jsr     pusha
	lda     #$01
	jsr     _sfx_play
;
; if (rds) {
;
	lda     _rds
	beq     L350B
;
; pvx = ADD_SIGN (rds, PLAYER_VX_REBOUND);
;
	lda     _rds
	beq     L439E
	sec
	sbc     #$01
	bvs     L3517
	eor     #$80
L3517:	bpl     L3518
	lda     #$40
	jmp     L439E
L3518:	lda     #$C0
L439E:	cmp     #$80
	bcc     L353A
;
; } else {
;
	jmp     L353A
;
; pvx = ADD_SIGN (-pvx, PLAYER_VX_REBOUND);
;
L350B:	tax
	lda     _pvx
	bpl     L3528
	dex
L3528:	jsr     negax
	stx     tmp1
	ora     tmp1
	beq     L439F
	lda     _pvx
	eor     #$FF
	clc
	adc     #$01
	sec
	sbc     #$01
	bvs     L352F
	eor     #$80
L352F:	bpl     L3530
	lda     #$40
	jmp     L439F
L3530:	lda     #$C0
L439F:	cmp     #$80
L353A:	sta     _pvx
;
; if (plife) {
;
	lda     _plife
	beq     L353B
;
; pst = EST_FLICKER;
;
	lda     #$01
	sta     _pst
;
; pct = 100;
;
	lda     #$64
	sta     _pct
;
; plife --;
;
	dec     _plife
;
; hud_update_life ();
;
	jmp     _hud_update_life
;
; pkill = 1;
;
L353B:	lda     #$01
	sta     _pkill
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ player_respawn (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_player_respawn: near

.segment	"CODE"

;
; -- aplife [pindex]; 
;
	lda     #<(_aplife)
	ldx     #>(_aplife)
	clc
	adc     _pindex
	bcc     L3549
	inx
L3549:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (ptr1),y
;
; player_find_safe_spot ();
;
	jsr     _player_find_safe_spot
;
; apvx [pindex] = apvy [pindex] = apkill [pindex] = 0;
;
	lda     #<(_apvx)
	ldx     #>(_apvx)
	clc
	adc     _pindex
	bcc     L354D
	inx
L354D:	jsr     pushax
	lda     #<(_apvy)
	ldx     #>(_apvy)
	clc
	adc     _pindex
	bcc     L3550
	inx
L3550:	jsr     pushax
	ldy     _pindex
	lda     #$00
	sta     _apkill,y
	tay
	jsr     staspidx
	tay
	jsr     staspidx
;
; plife = aplife [pindex];
;
	ldy     _pindex
	lda     _aplife,y
	sta     _plife
;
; hud_update_life (); 
;
	jmp     _hud_update_life

.endproc

; ---------------------------------------------------------------
; void __near__ player_move (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_player_move: near

.segment	"CODE"

;
; if (pkill) {
;
	lda     _pkill
	beq     L355B
;
; psprid = pfacing + CELL_DEAD;
;
	lda     _pfacing
	clc
	adc     #$07
	sta     _psprid
;
; pst = EST_DEAD;
;
	lda     #$02
	sta     _pst
;
; pvy += PLAYER_G;
;
	lda     #$04
	clc
	adc     _pvy
	sta     _pvy
;
; if (pvy > PLAYER_VY_FALLING_MAX) pvy = PLAYER_VY_FALLING_MAX;
;
	sec
	sbc     #$51
	bvs     L3568
	eor     #$80
L3568:	asl     a
	ldx     #$00
	bcc     L43BA
	lda     #$50
	sta     _pvy
;
; py += pvy;
;
L43BA:	lda     _pvy
	cmp     #$80
	bcc     L43AF
	dex
	clc
L43AF:	adc     _py
	sta     _py
	txa
	adc     _py+1
	sta     _py+1
;
; pry = py >> FIX_BITS;
;
	lda     _py
	ldx     _py+1
	jsr     shrax4
	sta     _pry
	stx     _pry+1
;
; } else 
;
	jmp     L3786
;
; if (!pgotten) {
;
L355B:	lda     _pgotten
	bne     L3572
;
; if (!pj) pvy += PLAYER_G; else pvy += PLAYER_G_JUMPING;
;
	lda     _pj
	bne     L3574
	lda     #$04
	clc
	adc     _pvy
	sta     _pvy
	bpl     L43BC
	jmp     L43BC
L3574:	inc     _pvy
;
; if (pvy > PLAYER_VY_FALLING_MAX) pvy = PLAYER_VY_FALLING_MAX;
;
L43BC:	lda     _pvy
	sec
	sbc     #$51
	bvs     L3580
	eor     #$80
L3580:	asl     a
	ldx     #$00
	bcc     L43BD
	lda     #$50
;
; } else if (!pj) pvy = 0;
;
	jmp     L43A8
L3572:	lda     _pj
	bne     L3584
L43A8:	sta     _pvy
;
; py += pvy;
;
L3584:	ldx     #$00
L43BD:	lda     _pvy
	cmp     #$80
	bcc     L43B0
	dex
	clc
L43B0:	adc     _py
	sta     _py
	txa
	adc     _py+1
	sta     _py+1
;
; prx = px >> FIX_BITS;  // Pixel position
;
	lda     _px
	ldx     _px+1
	jsr     asrax4
	sta     _prx
;
; pry = py >> FIX_BITS;
;
	lda     _py
	ldx     _py+1
	jsr     shrax4
	sta     _pry
	stx     _pry+1
;
; cx1 = prx >> 4;    // Tile position of the corners of the bounding box
;
	lda     _prx
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     _cx1
;
; cx2 = (prx + 7) >> 4;
;
	ldx     #$00
	lda     _prx
	clc
	adc     #$07
	bcc     L3595
	inx
L3595:	jsr     shrax4
	sta     _cx2
;
; if (pvy < 0) {
;
	lda     _pvy
	asl     a
	jcc     L43C3
;
; cy1 = cy2 = pry >> 4;
;
	lda     _pry
	ldx     _pry+1
	jsr     asrax4
	sta     _cy2
	sta     _cy1
;
; cm_two_points ();
;
	jsr     _cm_two_points
;
; if ((at1 & OBSTACLE_BIT) || (at2 & OBSTACLE_BIT)) {
;
	lda     _at1
	and     #$08
	bne     L43BF
	lda     _at2
	and     #$08
	beq     L359D
;
; pgotten = pvy = 0;
;
L43BF:	lda     #$00
	sta     _pvy
	sta     _pgotten
;
; pry = (cy1 + 1) << 4;
;
	tax
	lda     _cy1
	clc
	adc     #$01
	bcc     L35A8
	inx
L35A8:	jsr     shlax4
	sta     _pry
	stx     _pry+1
;
; py = pry << FIX_BITS;
;
	jsr     aslax4
	sta     _py
	stx     _py+1
;
; else if (psinking) {
;
	jmp     L3602
L359D:	lda     _psinking
	jeq     L3602
;
; cy1 = cy1 = (pry + 12) >> 4;
;
	lda     _pry
	ldx     _pry+1
	clc
	adc     #$0C
	bcc     L35B2
	inx
L35B2:	jsr     asrax4
	sta     _cy1
	sta     _cy1
;
; cm_two_points (); 
;
	jsr     _cm_two_points
;
; if ((at1 & SINK_BIT) || (at2 & SINK_BIT)) {
;
	lda     _at1
	and     #$20
	bne     L43C0
	lda     _at2
	and     #$20
	jeq     L43A9
;
; if (pvy < -PLAYER_VY_EXIT_SINKING) pvy = -PLAYER_VY_EXIT_SINKING;
;
L43C0:	lda     _pvy
	sec
	sbc     #$F8
	bvc     L35BC
	eor     #$80
L35BC:	jpl     L3602
	lda     #$F8
	sta     _pvy
;
; } else psinking = 0;
;
	jmp     L3602
;
; } else if (pvy > 0) {
;
L43C3:	lda     _pvy
	sec
	sbc     #$01
	bvs     L35C6
	eor     #$80
L35C6:	jpl     L3602
;
; cy1 = cy2 = (pry + 15) >> 4;
;
	lda     _pry
	ldx     _pry+1
	clc
	adc     #$0F
	bcc     L35CB
	inx
L35CB:	jsr     asrax4
	sta     _cy2
	sta     _cy1
;
; cm_two_points ();
;
	jsr     _cm_two_points
;
; rdy = ((pry - 1) & 0xf);
;
	lda     _pry
	sec
	sbc     #$01
	ldx     #$00
	and     #$0F
	sta     _rdy
	stx     _rdy+1
;
; *((unsigned char *) 0xf1) = rdy;
;
	lda     _rdy
	sta     $00F1
;
; rda = pry & 0xf;
;
	lda     _pry
	and     #$0F
	sta     _rda
;
; if (rdy < 6 && ((at1 & FLOOR_BITS) || (at2 & FLOOR_BITS))) {
;
	lda     _rdy
	cmp     #$06
	lda     _rdy+1
	sbc     #$00
	bvc     L35D9
	eor     #$80
L35D9:	bpl     L43CA
	lda     _at1
	and     #$0C
	bne     L43C9
	lda     _at2
	and     #$0C
	beq     L43CA
;
; pgotten = pvy = 0;
;
L43C9:	txa
	sta     _pvy
	sta     _pgotten
;
; pry = (cy2 - 1) << 4;
;
	lda     _cy2
	sec
	sbc     #$01
	bcs     L35E8
	dex
L35E8:	jsr     shlax4
	sta     _pry
	stx     _pry+1
;
; py = pry << FIX_BITS;
;
	jsr     aslax4
	sta     _py
	stx     _py+1
;
; else if (((at1 & 1) || (at2 & 1)) && rda && rda < 6 && !ppossee) {
;
	jmp     L3602
L43CA:	lda     _at1
	and     #$01
	bne     L43CB
	lda     _at2
	and     #$01
	beq     L43CF
L43CB:	lda     _rda
	beq     L43CF
	cmp     #$06
	bcs     L43CF
	lda     _ppossee
	bne     L43CF
;
; pvy = -PLAYER_VY_JUMP_INITIAL<<1;
;
	lda     #$90
	sta     _pvy
;
; pkill = 1;
;
	lda     #$01
	sta     _pkill
;
; else {
;
	jmp     L3602
;
; if ((at1 & SINK_BIT) || (at2 & SINK_BIT)) {
;
L43CF:	lda     _at1
	and     #$20
	bne     L43D0
	lda     _at2
	and     #$20
	beq     L43A9
;
; pvy = PLAYER_VY_SINKING;
;
L43D0:	lda     #$01
	sta     _pvy
;
; } else psinking = 0; 
;
L43A9:	sta     _psinking
;
; cy1 = cy2 = (pry + 16) >> 4;
;
L3602:	lda     _pry
	ldx     _pry+1
	clc
	adc     #$10
	bcc     L3609
	inx
L3609:	jsr     asrax4
	sta     _cy2
	sta     _cy1
;
; cm_two_points ();
;
	jsr     _cm_two_points
;
; ppossee = ((pry & 0xf) == 0) && ((at1 & FLOOR_BITS) || (at2 & FLOOR_BITS)); 
;
	lda     _pry
	and     #$0F
	bne     L43D3
	lda     _at1
	and     #$0C
	bne     L43D2
	lda     _at2
	and     #$0C
	beq     L43D6
L43D2:	lda     #$01
	jmp     L43D6
L43D3:	lda     #$00
L43D6:	sta     _ppossee
;
; pslips = ppossee && ((at1 & PLAYER_SLIPPERY_BIT) || (at2 & PLAYER_SLIPPERY_BIT));
;
	lda     _ppossee
	beq     L361F
	lda     _at1
	and     #$10
	bne     L43D7
	lda     _at2
	and     #$10
	beq     L361F
L43D7:	lda     #$01
L361F:	sta     _pslips
;
; if (pad & PAD_A) {
;
	lda     _pad
	and     #$01
	beq     L43DD
;
; if (!p_pressingA) {
;
	lda     _p_pressingA
	bne     L3628
;
; p_pressingA = 1;
;
	lda     #$01
	sta     _p_pressingA
;
; if (!pj) {
;
	lda     _pj
	bne     L3628
;
; if (pgotten || ppossee || psinking) {
;
	lda     _pgotten
	bne     L43DB
	lda     _ppossee
	bne     L43DB
	lda     _psinking
	beq     L3628
;
; pj = 1; pctj = 0; 
;
L43DB:	lda     #$01
	sta     _pj
	lda     #$00
	sta     _pctj
;
; pvy = -PLAYER_VY_JUMP_INITIAL;
;
	lda     #$C8
	sta     _pvy
;
; sfx_play (SFX_JUMP, SC_PLAYER);
;
	lda     #$01
	jsr     pusha
	jsr     _sfx_play
;
; if (pj) {
;
L3628:	lda     _pj
	beq     L363E
;
; ++ pctj; if (pctj == PLAYER_VY_JUMP_A_STEPS) pj = 0;
;
	inc     _pctj
	lda     _pctj
	cmp     #$10
	bne     L363E
;
; } else {
;
	jmp     L440B
;
; p_pressingA = 0;
;
L43DD:	sta     _p_pressingA
;
; if (pj) {
;
	lda     _pj
	beq     L363E
;
; if (pvy < -PLAYER_VY_JUMP_RELEASE) pvy = -PLAYER_VY_JUMP_RELEASE;
;
	lda     _pvy
	sec
	sbc     #$E8
	bvc     L3643
	eor     #$80
L3643:	asl     a
	lda     #$00
	bcc     L43AA
	lda     #$E8
	sta     _pvy
;
; pj = 0;
;
L440B:	lda     #$00
L43AA:	sta     _pj
;
; if (pslips) {
;
L363E:	lda     _pslips
	beq     L3648
;
; _PLAYER_AX = PLAYER_AX_SLIPPERY;
;
	lda     #$01
	sta     __PLAYER_AX
;
; _PLAYER_RX = half_life;
;
	lda     _half_life
	bpl     L43AB
;
; } else {
;
	jmp     L43AB
;
; _PLAYER_AX = PLAYER_AX;
;
L3648:	lda     #$04
	sta     __PLAYER_AX
;
; _PLAYER_RX = PLAYER_RX;
;
	lda     #$03
L43AB:	sta     __PLAYER_RX
;
; if ((pad & PAD_LEFT)
;
	lda     _pad
	and     #$40
;
; ) {
;
	beq     L43E2
;
; pfacing = CELL_FACING_LEFT;
;
	lda     #$08
	sta     _pfacing
;
; pvx -= _PLAYER_AX; 
;
	lda     __PLAYER_AX
	cmp     #$80
	eor     #$FF
	sec
	adc     _pvx
	sta     _pvx
;
; if (pvx < -PLAYER_VX_MAX) pvx = -PLAYER_VX_MAX;
;
	sec
	sbc     #$D8
	bvc     L3661
	eor     #$80
L3661:	asl     a
	ldx     #$00
	bcc     L43EE
	lda     #$D8
;
; } else if ((pad & PAD_RIGHT)
;
	jmp     L43AC
L43E2:	lda     _pad
	and     #$80
;
; ) {
;
	beq     L43E6
;
; pfacing = CELL_FACING_RIGHT;
;
	lda     #$00
	sta     _pfacing
;
; pvx += _PLAYER_AX;
;
	lda     __PLAYER_AX
	cmp     #$80
	clc
	adc     _pvx
	sta     _pvx
;
; if (pvx > PLAYER_VX_MAX) pvx = PLAYER_VX_MAX;
;
	sec
	sbc     #$29
	bvs     L3672
	eor     #$80
L3672:	asl     a
	ldx     #$00
	bcc     L43EE
	lda     #$28
;
; } else 
;
	jmp     L43AC
;
; if (pvx > 0) {
;
L43E6:	lda     _pvx
	sec
	sbc     #$01
	bvs     L3679
	eor     #$80
L3679:	bpl     L43EA
;
; pvx -= _PLAYER_RX;
;
	lda     __PLAYER_RX
	cmp     #$80
	eor     #$FF
	sec
	adc     _pvx
	sta     _pvx
;
; if (pvx < 0) pvx = 0;
;
	asl     a
	ldx     #$00
	bcc     L43EE
;
; } else if (pvx < 0) {
;
	jmp     L440C
L43EA:	lda     _pvx
	asl     a
	ldx     #$00
	bcc     L43EE
;
; pvx += _PLAYER_RX;
;
	lda     __PLAYER_RX
	cmp     #$80
	clc
	adc     _pvx
	sta     _pvx
;
; if (pvx > 0) pvx = 0;
;
	sec
	sbc     #$01
	bvs     L3690
	eor     #$80
L3690:	bpl     L43EE
L440C:	txa
L43AC:	sta     _pvx
;
; px += pvx;
;
L43EE:	lda     _pvx
	cmp     #$80
	bcc     L43B1
	dex
	clc
L43B1:	adc     _px
	sta     _px
	txa
	adc     _px+1
	sta     _px+1
;
; if (pgotten) px += ptgmx; else ptgmx = 0;
;
	lda     _pgotten
	beq     L3697
	ldx     #$00
	lda     _ptgmx
	cmp     #$80
	bcc     L43B2
	dex
	clc
L43B2:	adc     _px
	sta     _px
	txa
	adc     _px+1
	sta     _px+1
	jmp     L369D
L3697:	sta     _ptgmx
;
; if (px < (4<<FIX_BITS)) {px = 4<<FIX_BITS; pvx = 0;}
;
L369D:	lda     _px
	cmp     #$40
	lda     _px+1
	sbc     #$00
	bvc     L36A3
	eor     #$80
L36A3:	bpl     L36A0
	ldx     #$00
	lda     #$40
	sta     _px
	stx     _px+1
	stx     _pvx
;
; if (px > (244<<FIX_BITS)) {px = 244<<FIX_BITS; pvx = 0;}
;
L36A0:	lda     _px
	cmp     #$41
	lda     _px+1
	sbc     #$0F
	bvs     L36AB
	eor     #$80
L36AB:	bpl     L36A8
	ldx     #$0F
	lda     #$40
	sta     _px
	stx     _px+1
	lda     #$00
	sta     _pvx
;
; prx = px >> FIX_BITS;  // Pixel position
;
L36A8:	lda     _px
	ldx     _px+1
	jsr     asrax4
	sta     _prx
;
; cy1 = pry >> 4;
;
	lda     _pry
	ldx     _pry+1
	jsr     asrax4
	sta     _cy1
;
; cy2 = (pry + 15) >> 4;
;
	lda     _pry
	ldx     _pry+1
	clc
	adc     #$0F
	bcc     L36B7
	inx
L36B7:	jsr     asrax4
	sta     _cy2
;
; if (pvx + ptgmx < 0) {
;
	ldx     #$00
	lda     _pvx
	bpl     L36BA
	dex
L36BA:	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     _ptgmx
	bpl     L36BB
	dex
L36BB:	clc
	adc     ptr1
	txa
	adc     ptr1+1
	tax
	cpx     #$80
	ldx     #$00
	bcc     L43F2
;
; cx1 = cx2 = prx >> 4;
;
	lda     _prx
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     _cx2
	sta     _cx1
;
; cm_two_points ();
;
	jsr     _cm_two_points
;
; if ((at1 & OBSTACLE_BIT) || (at2 & OBSTACLE_BIT)) {
;
	lda     _at1
	and     #$08
	bne     L43F1
	lda     _at2
	and     #$08
	jeq     L36D9
;
; pvx = 0;
;
L43F1:	lda     #$00
	sta     _pvx
;
; prx = (cx1 + 1) << 4;
;
	lda     _cx1
	clc
	adc     #$01
	asl     a
	asl     a
	asl     a
	asl     a
;
; } else if (pvx + ptgmx > 0) {
;
	jmp     L4412
L43F2:	lda     _pvx
	bpl     L36D0
	dex
L36D0:	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     _ptgmx
	bpl     L36D1
	dex
L36D1:	clc
	adc     ptr1
	pha
	txa
	adc     ptr1+1
	tax
	pla
	cmp     #$01
	txa
	sbc     #$00
	bvs     L36D2
	eor     #$80
L36D2:	bpl     L36D9
;
; cx1 = cx2 = (prx + 7) >> 4;
;
	ldx     #$00
	lda     _prx
	clc
	adc     #$07
	bcc     L36D7
	inx
L36D7:	jsr     shrax4
	sta     _cx2
	sta     _cx1
;
; cm_two_points ();
;
	jsr     _cm_two_points
;
; if ((at1 & OBSTACLE_BIT) || (at2 & OBSTACLE_BIT)) {
;
	lda     _at1
	and     #$08
	bne     L43F3
	lda     _at2
	and     #$08
	beq     L36D9
;
; pvx = 0;
;
L43F3:	lda     #$00
	sta     _pvx
;
; prx = ((cx1 - 1) << 4) + 8;
;
	lda     _cx1
	sec
	sbc     #$01
	asl     a
	asl     a
	asl     a
	asl     a
	clc
	adc     #$08
L4412:	sta     _prx
;
; px = prx << FIX_BITS;
;
	ldx     #$00
	lda     _prx
	jsr     aslax4
	sta     _px
	stx     _px+1
;
; if (pry > 8 + cam_pos) {
;
L36D9:	lda     _pry
	ldx     _pry+1
	jsr     pushax
	lda     _cam_pos
	ldx     _cam_pos+1
	clc
	adc     #$08
	bcc     L36EA
	inx
L36EA:	jsr     tosicmp
	jmi     L43F6
	jeq     L43F6
;
; cx1 = cx2 = (prx + 4) >> 4;
;
	ldx     #$00
	lda     _prx
	clc
	adc     #$04
	bcc     L36EF
	inx
L36EF:	jsr     shrax4
	sta     _cx2
	sta     _cx1
;
; cy1 = cy2 = (pry + 7) >> 4;
;
	lda     _pry
	ldx     _pry+1
	clc
	adc     #$07
	bcc     L36F4
	inx
L36F4:	jsr     asrax4
	sta     _cy2
	sta     _cy1
;
; cm_two_points ();
;
	jsr     _cm_two_points
;
; rdd = SCREEN_BUFFER [cx1 | ((cy1 & 15) << 4)];
;
	lda     _cy1
	ldx     #$00
	and     #$0F
	jsr     shlax4
	ora     _cx1
	inx
	inx
	inx
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sta     _rdd
;
; if (at1 & PLAYER_TILE_GET_BIT) {
;
	lda     _at1
	and     #$02
	jeq     L43F6
;
; rdb = ((cy1 - (map_tilepos & 0x0f)) & 0x0f); // Distance from top
;
	lda     _cy1
	jsr     pusha0
	lda     _map_tilepos
	and     #$0F
	jsr     tossuba0
	and     #$0F
	sta     _rdb
;
; rdx = cx1 + cx1;        // x position in nametables
;
	lda     _cx1
	clc
	adc     _cx1
	sta     _rdx
;
; rdy = (rdb + rdb) + (wtp & 0xfe);    // y position in nametables
;
	ldx     #$00
	lda     _rdb
	clc
	adc     _rdb
	bcc     L43A1
	inx
L43A1:	sta     ptr1
	stx     ptr1+1
	lda     _wtp
	and     #$FE
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L440A
	inx
L440A:	sta     _rdy
	stx     _rdy+1
;
; if (rdy >= 30) rdy -= 30;      // Crude mod 30
;
	cmp     #$1E
	txa
	sbc     #$00
	bvs     L370B
	eor     #$80
L370B:	asl     a
	lda     #$00
	bcc     L43F5
	lda     _rdy
	sec
	sbc     #$1E
	sta     _rdy
	bcs     L370E
	dec     _rdy+1
;
; rdt = 0;          // Erase with tile 0
;
L370E:	lda     #$00
L43F5:	sta     _rdt
;
; put_tile_ul ();         // Draw tile
;
	jsr     _put_tile_ul
;
; SCREEN_BUFFER [cx1 + ((cy1 & 15) << 4)] = 0;
;
	lda     _cy1
	ldx     #$00
	and     #$0F
	jsr     shlax4
	clc
	adc     _cx1
	bcc     L43A4
	inx
L43A4:	inx
	inx
	inx
	sta     ptr1
	stx     ptr1+1
	lda     #$00
	tay
	sta     (ptr1),y
;
; rdt = rdd - 24;
;
	lda     _rdd
	sec
	sbc     #$18
	sta     _rdt
;
; bcd_score_add_5_2 (pc_scores_a [rdt], pc_scores_b [rdt]);
;
	ldy     _rdt
	lda     _pc_scores_a,y
	jsr     pusha
	ldy     _rdt
	lda     _pc_scores_b,y
	jsr     _bcd_score_add_5_2
;
; rdy = (cy1 << 4) - cam_pos - 8 + SPRITE_ADJUST;
;
	ldx     #$00
	lda     _cy1
	jsr     aslax4
	sec
	sbc     _cam_pos
	pha
	txa
	sbc     _cam_pos+1
	tax
	pla
	sec
	sbc     #$08
	bcs     L43B3
	dex
	sec
L43B3:	sbc     #$01
	bcs     L43B4
	dex
	sec
L43B4:	sbc     #$F0
	sta     _rdy
	txa
	sbc     #$FF
	sta     _rdy+1
;
; rdx = cx1 << 4;
;
	lda     _cx1
	asl     a
	asl     a
	asl     a
	asl     a
	sta     _rdx
;
; points_create ();
;
	jsr     _points_create
;
; hud_update_score ();
;
	jsr     _hud_update_score
;
; sfx_play (sfx_item [rdt], SC_ROOM);
;
	ldy     _rdt
	lda     _sfx_item,y
	jsr     pusha
	lda     #$02
	jsr     _sfx_play
;
; if (pad & PAD_B) {
;
L43F6:	lda     _pad
	and     #$02
	beq     L43F8
;
; if (!p_pressingB) {
;
	lda     _p_pressingB
	bne     L373B
;
; p_pressingB = 1;
;
	lda     #$01
	sta     _p_pressingB
;
; sfx_play (SFX_PUAS, SC_PLAYER);
;
	lda     #$09
	jsr     pusha
	lda     #$01
	jsr     _sfx_play
;
; puas_create ();
;
	jsr     _puas_create
;
; } else p_pressingB = 0;
;
	jmp     L373B
L43F8:	sta     _p_pressingB
;
; if (pry < cam_pos && !autoscroll) { pry = cam_pos +1; py = pry << FIX_BITS; }
;
L373B:	lda     _pry
	cmp     _cam_pos
	lda     _pry+1
	sbc     _cam_pos+1
	bvc     L43A5
	eor     #$80
L43A5:	bpl     L373E
	lda     _autoscroll
	bne     L373E
	lda     _cam_pos
	ldx     _cam_pos+1
	clc
	adc     #$01
	bcc     L3744
	inx
L3744:	sta     _pry
	stx     _pry+1
	jsr     aslax4
	sta     _py
	stx     _py+1
;
; if ((ntsc && pry > 220 + cam_pos) || (pry > 228 + cam_pos)) {
;
L373E:	lda     _ntsc
	beq     L43A6
	lda     _pry
	ldx     _pry+1
	jsr     pushax
	lda     _cam_pos
	ldx     _cam_pos+1
	clc
	adc     #$DC
	bcc     L374B
	inx
L374B:	jsr     tosicmp
	beq     L43A6
	bpl     L43FE
L43A6:	lda     _pry
	ldx     _pry+1
	jsr     pushax
	lda     _cam_pos
	ldx     _cam_pos+1
	clc
	adc     #$E4
	bcc     L374E
	inx
L374E:	jsr     tosicmp
	beq     L3747
	bmi     L3747
;
; pkill = 2;
;
L43FE:	lda     #$02
	sta     _pkill
;
; sfx_play (SFX_PLAYER_HIT, SC_PLAYER);
;
	lda     #$03
	jsr     pusha
	lda     #$01
	jsr     _sfx_play
;
; pvy = -PLAYER_VY_JUMP_INITIAL<<1;
;
	lda     #$90
	sta     _pvy
;
; pry -= 8;
;
	lda     _pry
	sec
	sbc     #$08
	sta     _pry
	bcs     L3759
	dec     _pry+1
;
; py = pry << FIX_BITS;
;
L3759:	lda     _pry
	ldx     _pry+1
	jsr     aslax4
	sta     _py
	stx     _py+1
;
; } else */if ((ppossee || pgotten || psinking) && pvy >= 0) {
;
L3747:	lda     _ppossee
	bne     L375E
	lda     _pgotten
	bne     L375E
	lda     _psinking
	beq     L4406
L375E:	ldx     _pvy
	bmi     L4406
;
; if (ABS (pvx) > PLAYER_VX_MIN) {
;
	lda     _pvx
	asl     a
	ldx     #$00
	bcc     L4402
	lda     _pvx
	eor     #$FF
	clc
	adc     #$01
L4401:	cmp     #$80
	bcc     L376C
	jmp     L43AD
L4402:	lda     _pvx
	cmp     #$80
	bcc     L4401
L43AD:	dex
L376C:	cmp     #$11
	txa
	sbc     #$00
	bvs     L3773
	eor     #$80
L3773:	asl     a
	lda     #$00
	bcc     L43AE
;
; psprid = CELL_WALK_BASE + ((prx >> 4) & 3);
;
	lda     _prx
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	and     #$03
	clc
	adc     #$01
;
; } else psprid = CELL_IDLE;
;
	jmp     L43AE
;
; } else psprid = CELL_AIRBORNE;
;
L4406:	lda     #$05
L43AE:	sta     _psprid
;
; psprid += pfacing;  
;
	lda     _pfacing
	clc
	adc     _psprid
	sta     _psprid
;
; if (pst == EST_FLICKER) {
;
	lda     _pst
	cmp     #$01
	bne     L3786
;
; if (pct) pct --; else pst = EST_NORMAL;
;
	lda     _pct
	beq     L4408
	dec     _pct
	jmp     L3786
L4408:	sta     _pst
;
; if (pry <= cam_pos) return;
;
L3786:	lda     _pry
	ldx     _pry+1
	jsr     pushax
	lda     _cam_pos
	ldx     _cam_pos+1
	jsr     tosicmp
	bpl     L4413
;
; }
;
	rts
;
; if (pry <= cam_pos) return;
;
L4413:	beq     L378B
;
; if (pst != EST_FLICKER || half_life) oam_index = oam_meta_spr (
;
	lda     _pst
	cmp     #$01
	bne     L4409
	lda     _half_life
	bne     L4409
	rts
;
; prx, pry - cam_pos + SPRITE_ADJUST, 
;
L4409:	jsr     decsp3
	lda     _prx
	ldy     #$02
	sta     (sp),y
	lda     _pry
	sec
	sbc     _cam_pos
	pha
	lda     _pry+1
	sbc     _cam_pos+1
	tax
	pla
	sec
	sbc     #$01
	bcs     L43B5
	dex
	sec
L43B5:	sbc     #$F0
	pha
	txa
	sbc     #$FF
	pla
	dey
	sta     (sp),y
;
; oam_index, 
;
	lda     _oam_index
	dey
	sta     (sp),y
;
; spr_player [pcharacter][psprid]
;
	ldx     #$00
	lda     _pcharacter
	asl     a
	bcc     L43B6
	inx
	clc
L43B6:	adc     #<(_spr_player)
	sta     ptr1
	txa
	adc     #>(_spr_player)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     _psprid
	asl     a
	bcc     L43B7
	inx
	clc
L43B7:	adc     ptr1
;
; );
;
	sta     ptr1
;
; spr_player [pcharacter][psprid]
;
	txa
	adc     ptr1+1
;
; );
;
	sta     ptr1+1
	iny
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _oam_meta_spr
	sta     _oam_index
;
; }
;
L378B:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ players_move (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_players_move: near

.segment	"CODE"

;
; __asm__ ("ldy #0");
;
	ldy     #0
;
; __asm__ ("lda %v, y", apon);
;
L379B:	lda     _apon,y
;
; __asm__ ("beq %g", players_move_continue);
;
	jeq     L37A1
;
; __asm__ ("lda %v, y", apvx);
;
	lda     _apvx,y
;
; __asm__ ("sta %v", pvx);
;
	sta     _pvx
;
; __asm__ ("lda %v, y", apvy);
;
	lda     _apvy,y
;
; __asm__ ("sta %v", pvy);
;
	sta     _pvy
;
; __asm__ ("lda %v, y", aprx);
;
	lda     _aprx,y
;
; __asm__ ("sta %v", prx);
;
	sta     _prx
;
; __asm__ ("lda %v, y", apfacing);
;
	lda     _apfacing,y
;
; __asm__ ("sta %v", pfacing);
;
	sta     _pfacing
;
; __asm__ ("lda %v, y", apkill);
;
	lda     _apkill,y
;
; __asm__ ("sta %v", pkill);
;
	sta     _pkill
;
; __asm__ ("lda %v, y", aptgmx);
;
	lda     _aptgmx,y
;
; __asm__ ("sta %v", ptgmx);
;
	sta     _ptgmx
;
; __asm__ ("lda %v, y", aplives);
;
	lda     _aplives,y
;
; __asm__ ("sta %v", plives);
;
	sta     _plives
;
; __asm__ ("lda %v, y", aplife);  
;
	lda     _aplife,y
;
; __asm__ ("sta %v", plife);
;
	sta     _plife
;
; __asm__ ("lda %v, y", apst);
;
	lda     _apst,y
;
; __asm__ ("sta %v", pst);
;
	sta     _pst
;
; __asm__ ("lda %v, y", apct);
;
	lda     _apct,y
;
; __asm__ ("sta %v", pct);
;
	sta     _pct
;
; __asm__ ("lda %v, y", apsinking);
;
	lda     _apsinking,y
;
; __asm__ ("sta %v", psinking);
;
	sta     _psinking
;
; __asm__ ("lda %v, y", ap_pressingA);
;
	lda     _ap_pressingA,y
;
; __asm__ ("sta %v", p_pressingA);
;
	sta     _p_pressingA
;
; __asm__ ("lda %v, y", ap_pressingB);
;
	lda     _ap_pressingB,y
;
; __asm__ ("sta %v", p_pressingB);  
;
	sta     _p_pressingB
;
; __asm__ ("lda %v, y", apj);
;
	lda     _apj,y
;
; __asm__ ("sta %v", pj);
;
	sta     _pj
;
; __asm__ ("lda %v, y", apctj);
;
	lda     _apctj,y
;
; __asm__ ("sta %v", pctj);
;
	sta     _pctj
;
; __asm__ ("lda %v, y", appossee);
;
	lda     _appossee,y
;
; __asm__ ("sta %v", ppossee);
;
	sta     _ppossee
;
; __asm__ ("lda %v, y", apgotten);
;
	lda     _apgotten,y
;
; __asm__ ("sta %v", pgotten);
;
	sta     _pgotten
;
; __asm__ ("lda %v, y", apcharacter);
;
	lda     _apcharacter,y
;
; __asm__ ("sta %v", pcharacter);
;
	sta     _pcharacter
;
; __asm__ ("tya");
;
	tya
;
; __asm__ ("asl a");
;
	asl     a
;
; __asm__ ("tax");
;
	tax
;
; __asm__ ("lda %v, x", apy);
;
	lda     _apy,x
;
; __asm__ ("sta %v, x", apcy);
;
	sta     _apcy,x
;
; __asm__ ("sta %v", py);
;
	sta     _py
;
; __asm__ ("lda %v+1, x", apy);
;
	lda     _apy+1,x
;
; __asm__ ("sta %v+1, x", apcy);
;
	sta     _apcy+1,x
;
; __asm__ ("sta %v+1", py);
;
	sta     _py+1
;
; __asm__ ("lda %v, x", apx);
;
	lda     _apx,x
;
; __asm__ ("sta %v, x", apcx);
;
	sta     _apcx,x
;
; __asm__ ("sta %v", px);
;
	sta     _px
;
; __asm__ ("lda %v+1, x", apx);
;
	lda     _apx+1,x
;
; __asm__ ("sta %v+1, x", apcx);
;
	sta     _apcx+1,x
;
; __asm__ ("sta %v+1", px);
;
	sta     _px+1
;
; __asm__ ("lda %v, x", apry);
;
	lda     _apry,x
;
; __asm__ ("sta %v", pry);
;
	sta     _pry
;
; __asm__ ("lda %v+1, x", apry);
;
	lda     _apry+1,x
;
; __asm__ ("sta %v+1", pry);
;
	sta     _pry+1
;
; __asm__ ("sty %v", pindex);
;
	sty     _pindex
;
; if (pindex == 0) pad = pad0; else pad = pad1;
;
	lda     _pindex
	bne     L4417
	lda     _pad0
	jmp     L4416
L4417:	lda     _pad1
L4416:	sta     _pad
;
; player_move ();
;
	jsr     _player_move
;
; __asm__ ("ldy %v", pindex);
;
	ldy     _pindex
;
; __asm__ ("lda %v", pvx);
;
	lda     _pvx
;
; __asm__ ("sta %v, y", apvx);
;
	sta     _apvx,y
;
; __asm__ ("lda %v", pvy);
;
	lda     _pvy
;
; __asm__ ("sta %v, y", apvy);
;
	sta     _apvy,y
;
; __asm__ ("lda %v", prx);
;
	lda     _prx
;
; __asm__ ("sta %v, y", aprx);
;
	sta     _aprx,y
;
; __asm__ ("lda %v", pfacing);
;
	lda     _pfacing
;
; __asm__ ("sta %v, y", apfacing);
;
	sta     _apfacing,y
;
; __asm__ ("lda %v", pkill);
;
	lda     _pkill
;
; __asm__ ("sta %v, y", apkill);
;
	sta     _apkill,y
;
; __asm__ ("lda %v", ptgmx);
;
	lda     _ptgmx
;
; __asm__ ("sta %v, y", aptgmx);
;
	sta     _aptgmx,y
;
; __asm__ ("lda %v", plives);
;
	lda     _plives
;
; __asm__ ("sta %v, y", aplives);
;
	sta     _aplives,y
;
; __asm__ ("lda %v", plife);
;
	lda     _plife
;
; __asm__ ("sta %v, y", aplife);  
;
	sta     _aplife,y
;
; __asm__ ("lda %v", pst);
;
	lda     _pst
;
; __asm__ ("sta %v, y", apst);
;
	sta     _apst,y
;
; __asm__ ("lda %v", pct);
;
	lda     _pct
;
; __asm__ ("sta %v, y", apct);
;
	sta     _apct,y
;
; __asm__ ("lda %v", psinking);
;
	lda     _psinking
;
; __asm__ ("sta %v, y", apsinking);
;
	sta     _apsinking,y
;
; __asm__ ("lda %v", p_pressingA);
;
	lda     _p_pressingA
;
; __asm__ ("sta %v, y", ap_pressingA);
;
	sta     _ap_pressingA,y
;
; __asm__ ("lda %v", p_pressingB);  
;
	lda     _p_pressingB
;
; __asm__ ("sta %v, y", ap_pressingB);
;
	sta     _ap_pressingB,y
;
; __asm__ ("lda %v", pj);
;
	lda     _pj
;
; __asm__ ("sta %v, y", apj);
;
	sta     _apj,y
;
; __asm__ ("lda %v", pctj);
;
	lda     _pctj
;
; __asm__ ("sta %v, y", apctj);
;
	sta     _apctj,y
;
; __asm__ ("lda %v", ppossee);
;
	lda     _ppossee
;
; __asm__ ("sta %v, y", appossee);
;
	sta     _appossee,y
;
; __asm__ ("lda %v", pgotten);
;
	lda     _pgotten
;
; __asm__ ("sta %v, y", apgotten);
;
	sta     _apgotten,y
;
; __asm__ ("tya");
;
	tya
;
; __asm__ ("asl a");
;
	asl     a
;
; __asm__ ("tax");
;
	tax
;
; __asm__ ("lda %v", py);
;
	lda     _py
;
; __asm__ ("sta %v, x", apy);
;
	sta     _apy,x
;
; __asm__ ("lda %v+1", py);
;
	lda     _py+1
;
; __asm__ ("sta %v+1, x", apy);
;
	sta     _apy+1,x
;
; __asm__ ("lda %v", px);
;
	lda     _px
;
; __asm__ ("sta %v, x", apx);
;
	sta     _apx,x
;
; __asm__ ("lda %v+1", px);
;
	lda     _px+1
;
; __asm__ ("sta %v+1, x", apx);
;
	sta     _apx+1,x
;
; __asm__ ("lda %v", pry);
;
	lda     _pry
;
; __asm__ ("sta %v, x", apry);
;
	sta     _apry,x
;
; __asm__ ("lda %v+1", pry);
;
	lda     _pry+1
;
; __asm__ ("sta %v+1, x", apry);
;
	sta     _apry+1,x
;
; __asm__ ("iny");
;
L37A1:	iny
;
; __asm__ ("cpy #2");
;
	cpy     #2
;
; __asm__ ("bne %g", players_move_loop);
;
	jne     L379B
;
; if (collide_players) {
;
	lda     _collide_players
	bne     L441B
;
; }
;
	rts
;
; aprx [0] + 7 >= aprx [1] && 
;
L441B:	ldx     #$00
	lda     _aprx
	clc
	adc     #$07
	bcc     L388C
	inx
L388C:	cmp     _aprx+1
	txa
	sbc     #$00
	bcc     L4419
;
; aprx [1] + 7 >= aprx [0] && 
;
	ldx     #$00
	lda     _aprx+1
	clc
	adc     #$07
	bcc     L3890
	inx
L3890:	cmp     _aprx
	txa
	sbc     #$00
	bcc     L4419
;
; apry [0] + 15 >= apry [1] && 
;
	lda     _apry
	ldx     _apry+1
	clc
	adc     #$0F
	bcc     L3893
	inx
L3893:	cmp     _apry+2
	txa
	sbc     _apry+2+1
	bvs     L4414
	eor     #$80
L4414:	bpl     L4419
;
; apry [1] + 15 >= apry [0]
;
	lda     _apry+2
	ldx     _apry+2+1
	clc
	adc     #$0F
	bcc     L3896
	inx
;
; ) {
;
L3896:	cmp     _apry
	txa
	sbc     _apry+1
	bvs     L4415
	eor     #$80
L4415:	bmi     L441A
L4419:	rts
;
; rds = apvx [0];
;
L441A:	lda     _apvx
	sta     _rds
;
; apvx [0] = apvx [1];
;
	lda     _apvx+1
	sta     _apvx
;
; apvx [1] = rds;
;
	lda     _rds
	sta     _apvx+1
;
; rds = apvy [0];
;
	lda     _apvy
	sta     _rds
;
; apvy [0] = apvy [1];
;
	lda     _apvy+1
	sta     _apvy
;
; apvy [1] = rds;
;
	lda     _rds
	sta     _apvy+1
;
; apx [0] = apcx [0];
;
	lda     _apcx+1
	sta     _apx+1
	lda     _apcx
	sta     _apx
;
; apx [1] = apcx [1];
;
	lda     _apcx+2+1
	sta     _apx+2+1
	lda     _apcx+2
	sta     _apx+2
;
; apy [0] = apcy [0];
;
	lda     _apcy+1
	sta     _apy+1
	lda     _apcy
	sta     _apy
;
; apy [1] = apcy [1];
;
	lda     _apcy+2+1
	sta     _apy+2+1
	lda     _apcy+2
	sta     _apy+2
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ player_gotten (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_player_gotten: near

.segment	"CODE"

;
; pgotten = 1;
;
	lda     #$01
	sta     _pgotten
;
; ptgmx = (envx << FIX_BITS);
;
	lda     _envx
	asl     a
	asl     a
	asl     a
	asl     a
	cmp     #$80
	sta     _ptgmx
;
; pry = _eny - 16; py = pry << FIX_BITS;
;
	lda     __eny
	ldx     __eny+1
	sec
	sbc     #$10
	bcs     L38CD
	dex
L38CD:	sta     _pry
	stx     _pry+1
	jsr     aslax4
	sta     _py
	stx     _py+1
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ enems_init (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_enems_init: near

.segment	"CODE"

;
; enit = ENEMS_MAX; while (enit --) {
;
	lda     #$08
	sta     _enit
	jmp     L441C
;
; ena [enit] = 0; enslots [enit] = enit;
;
L38D3:	ldy     _enit
	lda     #$00
	sta     _ena,y
	ldy     _enit
	lda     _enit
	sta     _enslots,y
;
; enit = ENEMS_MAX; while (enit --) {
;
L441C:	lda     _enit
	dec     _enit
	tax
	bne     L38D3
;
; ensloti = ENEMS_MAX;
;
	lda     #$08
	sta     _ensloti
;
; enstart = 0; 
;
	stx     _enstart
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ enems_spawn (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_enems_spawn: near

.segment	"CODE"

;
; __asm__ ("lda #0");
;
	lda     #0
;
; __asm__ ("sta %v+1", rdy);
;
	sta     _rdy+1
;
; __asm__ ("ldy #0");
;
	tay
;
; __asm__ ("lda (%v), y", strip_pointer);
;
	lda     (_strip_pointer),y
;
; __asm__ ("sta %v", rdy);
;
	sta     _rdy
;
; __asm__ ("bne %g", enems_spawn_check);
;
	bne     L38F0
;
; __asm__ ("rts");
;
	rts
;
; __asm__ ("cmp %v", map_tilepos);
;
L38F0:	cmp     _map_tilepos
;
; __asm__ ("beq %g", enems_spawn_do);
;
	beq     L38F9
;
; __asm__ ("rts");
;
	rts
;
; __asm__ ("iny");
;
L38F9:	iny
;
; __asm__ ("lda (%v), y", strip_pointer);
;
	lda     (_strip_pointer),y
;
; __asm__ ("sta %v", rdx);
;
	sta     _rdx
;
; __asm__ ("iny");
;
	iny
;
; __asm__ ("lda (%v), y", strip_pointer);
;
	lda     (_strip_pointer),y
;
; __asm__ ("sta %v", rdc);
;
	sta     _rdc
;
; __asm__ ("lda %v", ensloti);
;
	lda     _ensloti
;
; __asm__ ("beq %g", enems_spawn_done);
;
	jeq     L390E
;
; __asm__ ("dec %v", ensloti);
;
	dec     _ensloti
;
; __asm__ ("ldy %v", ensloti);
;
	ldy     _ensloti
;
; __asm__ ("lda %v, y", enslots);
;
	lda     _enslots,y
;
; __asm__ ("sta %v", enit);
;
	sta     _enit
;
; __asm__ ("tay");
;
	tay
;
; __asm__ ("lda #1");
;
	lda     #1
;
; __asm__ ("sta %v, y", ena);
;
	sta     _ena,y
;
; __asm__ ("lda %v", rdx);
;
	lda     _rdx
;
; __asm__ ("and #$0f");
;
	and     #$0f
;
; __asm__ ("sta %v, y", ent);
;
	sta     _ent,y
;
; __asm__ ("lda %v", rdx);
;
	lda     _rdx
;
; __asm__ ("and #$f0");
;
	and     #$f0
;
; __asm__ ("sta %v, y", enx);
;
	sta     _enx,y
;
; __asm__ ("tya");
;
	tya
;
; __asm__ ("asl a");
;
	asl     a
;
; __asm__ ("tay");    // Index*2
;
	tay
;
; __asm__ ("lda %v", rdy);  // LSB in A
;
	lda     _rdy
;
; __asm__ ("ldx %v+1", rdy);  // MSB in X
;
	ldx     _rdy+1
;
; __asm__ ("jsr aslax4");   // X:A =<< 4
;
	jsr     aslax4
;
; __asm__ ("sta %v, y", eny);
;
	sta     _eny,y
;
; __asm__ ("sta %v, y", eny1);
;
	sta     _eny1,y
;
; __asm__ ("txa");
;
	txa
;
; __asm__ ("sta %v+1, y", eny);
;
	sta     _eny+1,y
;
; __asm__ ("sta %v+1, y", eny1);
;
	sta     _eny1+1,y
;
; __asm__ ("ldy %v", enit);
;
	ldy     _enit
;
; __asm__ ("lda #0");
;
	lda     #0
;
; __asm__ ("sta %v, y", enl);
;
	sta     _enl,y
;
; __asm__ ("lda %v", rdc);
;
	lda     _rdc
;
; __asm__ ("and #$0f");
;
	and     #$0f
;
; __asm__ ("sta %v", rda);
;
	sta     _rda
;
; __asm__ ("lda %v", rdc);
;
	lda     _rdc
;
; __asm__ ("and #$f0");
;
	and     #$f0
;
; __asm__ ("sta %v", rdb);
;
	sta     _rdb
;
; __asm__ ("lda %v, y", ent);
;
	lda     _ent,y
;
; __asm__ ("cmp #4");
;
	cmp     #4
;
; __asm__ ("beq %g", enems_spawn_chasers);
;
	beq     L3958
;
; __asm__ ("cmp #6");
;
	cmp     #6
;
; __asm__ ("beq %g", enems_spawn_flipflop);
;
	beq     L395E
;
; __asm__ ("cmp #7");
;
	cmp     #7
;
; __asm__ ("beq %g", enems_spawn_platforms);
;
	beq     L3964
;
; __asm__ ("lda %v", rda);
;
	lda     _rda
;
; __asm__ ("bne %g", ESBF0);
;
	bne     L396A
;
; __asm__ ("sta %v, y", enx1);
;
	sta     _enx1,y
;
; __asm__ ("lda #1");
;
	lda     #1
;
; __asm__ ("sta %v", rda);
;
	sta     _rda
;
; __asm__ ("jmp %g", ESBF1);
;
	jmp     L3974
;
; __asm__ ("lda #1");
;
L396A:	lda     #1
;
; __asm__ ("sta %v, y", enx1);
;
	sta     _enx1,y
;
; __asm__ ("lda %v", rdb);
;
L3974:	lda     _rdb
;
; __asm__ ("and #$10");
;
	and     #$10
;
; __asm__ ("beq %g", ESBF2);
;
	beq     L3982
;
; __asm__ ("lda #0");
;
	lda     #0
;
; __asm__ ("sec");
;
	sec
;
; __asm__ ("sbc %v", rda);
;
	sbc     _rda
;
; __asm__ ("jmp %g", ESBF3);  // A = -rda
;
	jmp     L398C
;
; __asm__ ("lda %v", rda);  // A = rda
;
L3982:	lda     _rda
;
; __asm__ ("sta %v, y", enmx);
;
L398C:	sta     _enmx,y
;
; __asm__ ("lda #0");
;
	lda     #0
;
; __asm__ ("sta %v, y", enmy);
;
	sta     _enmy,y
;
; __asm__ ("jmp %g", enems_spawn_done);
;
	jmp     L390E
;
; __asm__ ("lda #0");
;
L3958:	lda     #0
;
; __asm__ ("sta %v, y", enmx);
;
	sta     _enmx,y
;
; __asm__ ("sta %v, y", enmy);
;
	sta     _enmy,y
;
; __asm__ ("jmp %g", enems_spawn_done);
;
	jmp     L390E
;
; __asm__ ("lda #0");
;
L395E:	lda     #0
;
; __asm__ ("sta %v, y", ENSTATE);
;
	sta     _enx2,y
;
; __asm__ ("lda %v, y", enx);
;
	lda     _enx,y
;
; __asm__ ("and #$7f");
;
	and     #$7f
;
; __asm__ ("sta %v, y", enct);
;
	sta     _enct,y
;
; __asm__ ("jmp %g", enems_spawn_done);
;
	jmp     L390E
;
; __asm__ ("lda %v", rdb);
;
L3964:	lda     _rdb
;
; __asm__ ("sta %v, y", enx2);
;
	sta     _enx2,y
;
; __asm__ ("lda %v", rda);
;
	lda     _rda
;
; __asm__ ("asl a");
;
	asl     a
;
; __asm__ ("asl a");
;
	asl     a
;
; __asm__ ("asl a");
;
	asl     a
;
; __asm__ ("asl a");
;
	asl     a
;
; __asm__ ("sta %v, y", enx1);
;
	sta     _enx1,y
;
; __asm__ ("cmp %v", rdb);  // A = enx1, cmp enx2
;
	cmp     _rdb
;
; __asm__ ("bcs %g", ESPSWP);
;
	bcs     L39C8
;
; __asm__ ("lda #1");
;
	lda     #1
;
; __asm__ ("sta %v, y", enmx);
;
	sta     _enmx,y
;
; __asm__ ("jmp %g", ESPSWPD);
;
	jmp     L390E
;
; __asm__ ("lda #%b", -1);
;
L39C8:	lda     #$FF
;
; __asm__ ("sta %v, y", enmx);
;
	sta     _enmx,y
;
; __asm__ ("lda %v, y", enx1);
;
	lda     _enx1,y
;
; __asm__ ("sta %v", rdd);
;
	sta     _rdd
;
; __asm__ ("lda %v, y", enx2);
;
	lda     _enx2,y
;
; __asm__ ("sta %v, y", enx1);
;
	sta     _enx1,y
;
; __asm__ ("lda %v", rdd);
;
	lda     _rdd
;
; __asm__ ("sta %v, y", enx2);
;
	sta     _enx2,y
;
; __asm__ ("sta %v, y", enx);
;
	sta     _enx,y
;
; __asm__ ("lda %v", strip_pointer);
;
L390E:	lda     _strip_pointer
;
; __asm__ ("clc");
;
	clc
;
; __asm__ ("adc #%b", ENEM_SIZE);
;
	adc     #$03
;
; __asm__ ("sta %v", strip_pointer);
;
	sta     _strip_pointer
;
; __asm__ ("bcc %g", ESAPS0);
;
	bcc     L39F6
;
; __asm__ ("inc %v+1", strip_pointer);
;
	inc     _strip_pointer+1
;
; }
;
L39F6:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ enems_destroy (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_enems_destroy: near

.segment	"CODE"

;
; ena [enit] = 0;
;
	ldy     _enit
	lda     #$00
	sta     _ena,y
;
; enslots [ensloti] = enit;
;
	ldy     _ensloti
	lda     _enit
	sta     _enslots,y
;
; ensloti ++;
;
	inc     _ensloti
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ enems_kill (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_enems_kill: near

.segment	"CODE"

;
; ent [enit] = 16;
;
	ldy     _enit
	lda     #$10
	sta     _ent,y
;
; _enct = 16;
;
	sta     __enct
;
; rda = 1;
;
	lda     #$01
	sta     _rda
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ enems_do (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_enems_do: near

.segment	"CODE"

;
; aptgmx [1] = apgotten [1] = 0;
;
	lda     #$00
	sta     _apgotten+1
	sta     _aptgmx+1
	sta     _apgotten
	sta     _aptgmx
;
; enit = enstart;
;
	lda     _enstart
	sta     _enit
;
; enjt = ENEMS_MAX; 
;
	lda     #$08
	sta     _enjt
;
; __asm__ ("lda %v", enjt);
;
L3A1C:	lda     _enjt
;
; __asm__ ("beq %g", enems_do_loop_done);
;
	jeq     L3A22
;
; __asm__ ("dec %v", enjt);
;
	dec     _enjt
;
; __asm__ ("lda %v", enit);
;
	lda     _enit
;
; __asm__ ("clc");
;
	clc
;
; __asm__ ("adc #%b", (ENEMS_MAX - 1));
;
	adc     #$07
;
; __asm__ ("cmp #%b", ENEMS_MAX);
;
	cmp     #$08
;
; __asm__ ("bcc %g", EDCL0);
;
	bcc     L3A33
;
; __asm__ ("sec");
;
	sec
;
; __asm__ ("sbc #%b", ENEMS_MAX);
;
	sbc     #$08
;
; __asm__ ("sta %v", enit);
;
L3A33:	sta     _enit
;
; __asm__ ("tay");
;
	tay
;
; __asm__ ("lda %v, y", ena);
;
	lda     _ena,y
;
; __asm__ ("beq %g", enems_do_loop);
;
	beq     L3A1C
;
; __asm__ ("lda %v, y", enct);
;
	lda     _enct,y
;
; __asm__ ("sta %v", _enct);
;
	sta     __enct
;
; __asm__ ("lda %v, y", enx);
;
	lda     _enx,y
;
; __asm__ ("sta %v", _enx);
;
	sta     __enx
;
; __asm__ ("lda %v, y", enx1);
;
	lda     _enx1,y
;
; __asm__ ("sta %v", _enx1);
;
	sta     __enx1
;
; __asm__ ("lda %v, y", enx2);
;
	lda     _enx2,y
;
; __asm__ ("sta %v", _enx2);
;
	sta     __enx2
;
; __asm__ ("lda %v, y", enmx);
;
	lda     _enmx,y
;
; __asm__ ("sta %v", _enmx);
;
	sta     __enmx
;
; __asm__ ("lda %v, y", enmy);
;
	lda     _enmy,y
;
; __asm__ ("sta %v", _enmy);
;
	sta     __enmy
;
; __asm__ ("tya");
;
	tya
;
; __asm__ ("asl a");
;
	asl     a
;
; __asm__ ("tax");
;
	tax
;
; __asm__ ("lda %v, x", eny);
;
	lda     _eny,x
;
; __asm__ ("sta %v", _eny);
;
	sta     __eny
;
; __asm__ ("lda %v+1, x", eny);
;
	lda     _eny+1,x
;
; __asm__ ("sta %v+1", _eny);
;
	sta     __eny+1
;
; __asm__ ("lda #0");
;
	lda     #0
;
; __asm__ ("sta %v", envx);
;
	sta     _envx
;
; __asm__ ("sta %v", envy);
;
	sta     _envy
;
; __asm__ ("lda %v, y", ent);
;
	lda     _ent,y
;
; __asm__ ("sta %v", rdt);
;
	sta     _rdt
;
; __asm__ ("cmp #3");
;
	cmp     #3
;
; __asm__ ("beq %g", enems_do_pre_type_3);
;
	beq     L3A78
;
; __asm__ ("cmp #2");
;
	cmp     #2
;
; __asm__ ("beq %g", enems_do_pre_type_2);
;
	beq     L3AA4
;
; __asm__ ("cmp #7");
;
	cmp     #7
;
; __asm__ ("beq %g", enems_do_pre_type_7);
;
	beq     L3A84
;
; __asm__ ("cmp #4");
;
	cmp     #4
;
; __asm__ ("beq %g", enems_do_pre_type_4);
;
	beq     L3A8A
;
; __asm__ ("cmp #6");
;
	cmp     #6
;
; __asm__ ("beq %g", enems_do_pre_type_6);
;
	jeq     L3A90
;
; __asm__ ("jmp %g", enems_do_pre_done);
;
	jmp     L3C3D
;
; __asm__ ("ldx %v", _enmy);
;
L3A78:	ldx     __enmy
;
; __asm__ ("lda %v, x", enems_lut_falling);
;
	lda     _enems_lut_falling,x
;
; __asm__ ("sta %v", envy);
;
	sta     _envy
;
; __asm__ ("txa");
;
	txa
;
; __asm__ ("cmp #%b", ENEMS_LUT_FALLING_MAXIDX);
;
	cmp     #$0F
;
; __asm__ ("beq %g", EDPT3S0);
;
	beq     L3AA4
;
; __asm__ ("inc %v", _enmy);
;
	inc     __enmy
;
; __asm__ ("lda %v", _enx1);
;
L3AA4:	lda     __enx1
;
; __asm__ ("bne %g", EDPT2D);
;
	bne     L3AAE
;
; __asm__ ("lda %v", half_life);
;
	lda     _half_life
;
; __asm__ ("bne %g", enems_do_pre_done);
;
	jne     L3C3D
;
; __asm__ ("lda %v", _enmx);
;
L3AAE:	lda     __enmx
;
; __asm__ ("sta %v", envx);
;
	sta     _envx
;
; __asm__ ("jmp %g", enems_do_pre_done);
;
	jmp     L3C3D
;
; __asm__ ("lda %v", _enmx);
;
L3A84:	lda     __enmx
;
; __asm__ ("sta %v", envx);
;
	sta     _envx
;
; __asm__ ("jmp %g", enems_do_pre_done);
;
	jmp     L3C3D
;
; __asm__ ("lda #1");
;
L3A8A:	lda     #1
;
; __asm__ ("sta %v", rdd);
;
	sta     _rdd
;
; __asm__ ("lda %v", enit);
;
	lda     _enit
;
; __asm__ ("tay");
;
	tay
;
; __asm__ ("asl a");
;
	asl     a
;
; __asm__ ("tax");
;
	tax
;
; __asm__ ("lda %v, x", eny1);
;
	lda     _eny1,x
;
; __asm__ ("ora %v+1,x", eny1);
;
	ora     _eny1+1,x
;
; __asm__ ("bne %g", EDPT4E0);
;
	bne     L3AD8
;
; __asm__ ("lda %v", eny);
;
	lda     _eny
;
; __asm__ ("clc");
;
	clc
;
; __asm__ ("adc #2");
;
	adc     #2
;
; __asm__ ("sta %v", eny);
;
	sta     _eny
;
; __asm__ ("bcc %g", EDPT4C0);
;
	jcc     L3C3D
;
; __asm__ ("inc %v+1", eny);
;
	inc     _eny+1
;
; __asm__ ("jmp %g", enems_do_pre_done);
;
	jmp     L3C3D
;
; __asm__ ("lda %v", _eny);
;
L3AD8:	lda     __eny
;
; __asm__ ("clc");
;
	clc
;
; __asm__ ("adc #240");
;
	adc     #240
;
; __asm__ ("sta %v", rdu16);
;
	sta     _rdu16
;
; __asm__ ("lda %v+1", _eny);
;
	lda     __eny+1
;
; __asm__ ("adc #0");
;
	adc     #0
;
; __asm__ ("sta %v+1", rdu16);
;
	sta     _rdu16+1
;
; __asm__ ("lda %v", rdu16);
;
	lda     _rdu16
;
; __asm__ ("cmp %v, x", eny1);
;
	cmp     _eny1,x
;
; __asm__ ("lda %v+1", rdu16);
;
	lda     _rdu16+1
;
; __asm__ ("sbc %v+1, x", eny1);
;
	sbc     _eny1+1,x
;
; __asm__ ("bcs %g", EDPT4E1);
;
	bcs     L3B05
;
; __asm__ ("lda #0");
;
	lda     #0
;
; __asm__ ("sta %v, x", eny1);
;
	sta     _eny1,x
;
; __asm__ ("sta %v+1, x", eny1);
;
	sta     _eny1+1,x
;
; __asm__ ("lda %v", apon);
;
L3B05:	lda     _apon
;
; __asm__ ("beq %g", EDPT4PE1);
;
	beq     L3B12
;
; __asm__ ("lda %v+1", apon);
;
	lda     _apon+1
;
; __asm__ ("beq %g", EDPT4PE2);
;
	beq     L3B20
;
; __asm__ ("tya");
;
	tya
;
; __asm__ ("and #1");
;
	and     #1
;
; __asm__ ("jmp %g", EDPT4PEE);
;
	jmp     L3B20
;
; __asm__ ("lda #1");
;
L3B12:	lda     #1
;
; __asm__ ("sta %v", pindex);
;
L3B20:	sta     _pindex
;
; __asm__ ("tax");
;
	tax
;
; __asm__ ("lda %v, x", aprx);
;
	lda     _aprx,x
;
; __asm__ ("sta %v", prx);
;
	sta     _prx
;
; __asm__ ("lda %v, x", apfacing);;
;
	lda     _apfacing,x
;
; __asm__ ("sta %v", pfacing);
;
	sta     _pfacing
;
; __asm__ ("txa");
;
	txa
;
; __asm__ ("asl a");
;
	asl     a
;
; __asm__ ("tax");
;
	tax
;
; __asm__ ("lda %v, x", apry);
;
	lda     _apry,x
;
; __asm__ ("sta %v", pry);
;
	sta     _pry
;
; __asm__ ("lda %v+1, x", apry);
;
	lda     _apry+1,x
;
; __asm__ ("sta %v+1", pry);
;
	sta     _pry+1
;
; __asm__ ("lda %v", prx);
;
	lda     _prx
;
; __asm__ ("cmp %v", _enx);
;
	cmp     __enx
;
; __asm__ ("bcc %g", EDPT4F0);
;
	bcc     L3B4C
;
; __asm__ ("lda %v", pfacing);
;
	lda     _pfacing
;
; __asm__ ("bne %g", enems_do_pre_done);
;
	jne     L3C3D
;
; __asm__ ("jmp %g", EDPT4FE);
;
	jmp     L443E
;
; __asm__ ("lda %v", pfacing);
;
L3B4C:	lda     _pfacing
;
; __asm__ ("beq %g", enems_do_pre_done);
;
	jeq     L3C3D
;
; __asm__ ("lda #0");
;
	lda     #0
;
; __asm__ ("sta %v", rdd);
;
L443E:	sta     _rdd
;
; __asm__ ("tya");
;
	tya
;
; __asm__ ("clc");
;
	clc
;
; __asm__ ("adc %v", half_life);
;
	adc     _half_life
;
; __asm__ ("and #1");
;
	and     #1
;
; __asm__ ("bne %g", enems_do_pre_done);
;
	jne     L3C3D
;
; __asm__ ("jsr %v", rand8);
;
	jsr     _rand8
;
; __asm__ ("sta %v", rda);
;
	sta     _rda
;
; __asm__ ("cmp #3");
;
	cmp     #3
;
; __asm__ ("bcc %g", EDPT4MXD);
;
	bcc     L3B75
;
; __asm__ ("lda %v", _enx);
;
	lda     __enx
;
; __asm__ ("cmp %v", prx);
;
	cmp     _prx
;
; __asm__ ("bcs %g", EDPT4MXADDS);
;
	bcs     L3B7D
;
; __asm__ ("lda %v", _enmx);
;
	lda     __enmx
;
; __asm__ ("sec");
;
	sec
;
; __asm__ ("sbc #%b", ENEMS_LUT_ACCELERATION_MAXIDX);
;
	sbc     #$0F
;
; __asm__ ("bvc %g", EDPT4MXADDC0);
;
	bvc     L3B88
;
; __asm__ ("eor #$80");
;
	eor     #$80
;
; __asm__ ("bpl %g", EDPT4MXADDS);
;
L3B88:	bpl     L3B7D
;
; __asm__ ("inc %v", _enmx);
;
	inc     __enmx
;
; __asm__ ("lda %v", prx);
;
L3B7D:	lda     _prx
;
; __asm__ ("cmp %v", _enx);
;
	cmp     __enx
;
; __asm__ ("bcs %g", EDPT4MXD);
;
	bcs     L3B75
;
; __asm__ ("lda #%b", -ENEMS_LUT_ACCELERATION_MAXIDX);
;
	lda     #$F1
;
; __asm__ ("sec");
;
	sec
;
; __asm__ ("sbc %v", _enmx);
;
	sbc     __enmx
;
; __asm__ ("bvc %g", EDPT4MXSUBC0);
;
	bvc     L3BA3
;
; __asm__ ("eor #$80");
;
	eor     #$80
;
; __asm__ ("bpl %g", EDPT4MXD);
;
L3BA3:	bpl     L3B75
;
; __asm__ ("dec %v", _enmx);
;
	dec     __enmx
;
; );
;
L3B75:	lda     __enmx
	beq     L4447
	sec
	sbc     #$01
	bvs     L3BB8
	eor     #$80
L3BB8:	bpl     L4443
	lda     __enmx
	asl     a
	ldx     #$00
	bcc     L4440
	lda     __enmx
	eor     #$FF
	clc
	adc     #$01
L443F:	cmp     #$80
	bcc     L442F
	jmp     L4426
L4440:	lda     __enmx
	cmp     #$80
	bcc     L443F
L4426:	dex
	clc
L442F:	adc     #<(_enems_lut_acceleration)
	tay
	txa
	adc     #>(_enems_lut_acceleration)
	tax
	tya
	ldy     #$00
	jsr     ldaidx
L4442:	cmp     #$80
	bcc     L4447
	jmp     L4447
L4443:	lda     __enmx
	asl     a
	ldx     #$00
	bcc     L4445
	lda     __enmx
	eor     #$FF
	clc
	adc     #$01
L4444:	cmp     #$80
	bcc     L4430
	jmp     L4427
L4445:	lda     __enmx
	cmp     #$80
	bcc     L4444
L4427:	dex
	clc
L4430:	adc     #<(_enems_lut_acceleration)
	tay
	txa
	adc     #>(_enems_lut_acceleration)
	tax
	tya
	ldy     #$00
	jsr     ldaidx
	eor     #$FF
	clc
	adc     #$01
	cmp     #$80
	bcc     L4442
L4447:	cmp     #$80
	sta     _envx
;
; _enx += envx;
;
	clc
	adc     __enx
	sta     __enx
;
; if (rda > 2) {
;
	lda     _rda
	cmp     #$03
	bcc     L3BF1
;
; if (pry > _eny) {
;
	lda     _pry
	sec
	sbc     __eny
	sta     tmp1
	lda     _pry+1
	sbc     __eny+1
	ora     tmp1
	bcc     L3BE9
	beq     L3BE9
;
; if (_enmy < ENEMS_LUT_ACCELERATION_MAXIDX) _enmy ++;
;
	lda     __enmy
	sec
	sbc     #$0F
	bvc     L3BEC
	eor     #$80
L3BEC:	bpl     L3BE9
	inc     __enmy
;
; if (pry < _eny) {
;
L3BE9:	lda     _pry
	cmp     __eny
	lda     _pry+1
	sbc     __eny+1
	bcs     L3BF1
;
; if (_enmy > -ENEMS_LUT_ACCELERATION_MAXIDX) _enmy --;
;
	lda     __enmy
	sec
	sbc     #$F2
	bvs     L3BF4
	eor     #$80
L3BF4:	bpl     L3BF1
	dec     __enmy
;
; );
;
L3BF1:	lda     __enmy
	beq     L4452
	sec
	sbc     #$01
	bvs     L3C01
	eor     #$80
L3C01:	bpl     L444E
	lda     __enmy
	asl     a
	ldx     #$00
	bcc     L444B
	lda     __enmy
	eor     #$FF
	clc
	adc     #$01
L444A:	cmp     #$80
	bcc     L4431
	jmp     L4428
L444B:	lda     __enmy
	cmp     #$80
	bcc     L444A
L4428:	dex
	clc
L4431:	adc     #<(_enems_lut_acceleration)
	tay
	txa
	adc     #>(_enems_lut_acceleration)
	tax
	tya
	ldy     #$00
	jsr     ldaidx
L444D:	cmp     #$80
	bcc     L4452
	jmp     L4452
L444E:	lda     __enmy
	asl     a
	ldx     #$00
	bcc     L4450
	lda     __enmy
	eor     #$FF
	clc
	adc     #$01
L444F:	cmp     #$80
	bcc     L4432
	jmp     L4429
L4450:	lda     __enmy
	cmp     #$80
	bcc     L444F
L4429:	dex
	clc
L4432:	adc     #<(_enems_lut_acceleration)
	tay
	txa
	adc     #>(_enems_lut_acceleration)
	tax
	tya
	ldy     #$00
	jsr     ldaidx
	eor     #$FF
	clc
	adc     #$01
	cmp     #$80
	bcc     L444D
L4452:	cmp     #$80
	sta     _envy
;
; _eny += envy;
;
	ldx     #$00
	lda     _envy
	cmp     #$80
	bcc     L4433
	dex
	clc
L4433:	adc     __eny
	sta     __eny
	txa
	adc     __eny+1
	sta     __eny+1
;
; __asm__ ("jmp %g", enems_do_pre_done);
;
	jmp     L3C3D
;
; __asm__ ("lda %v", _enct);
;
L3A90:	lda     __enct
;
; __asm__ ("beq %g", EDPT6S);
;
	beq     L3C37
;
; __asm__ ("dec %v", _enct);
;
	dec     __enct
;
; __asm__ ("jmp %g", EDPT6E);
;
	jmp     L3C3D
;
; __asm__ ("lda %v", _ENSTATE);
;
L3C37:	lda     __enx2
;
; __asm__ ("bne %g", EDPT6SNE);
;
	bne     L3C44
;
; __asm__ ("lda #1");  
;
	lda     #1
;
; __asm__ ("jmp %g", EDPT6SNS);
;
	jmp     L3C4A
;
; __asm__ ("lda #0");
;
L3C44:	lda     #0
;
; __asm__ ("sta %v", _ENSTATE);
;
L3C4A:	sta     __enx2
;
; __asm__ ("beq %g", EDPT6S64);
;
	beq     L3C54
;
; __asm__ ("lda #128");
;
	lda     #128
;
; __asm__ ("jmp %g", EDPT6SE);
;
	jmp     L3C5A
;
; __asm__ ("lda #64");
;
L3C54:	lda     #64
;
; __asm__ ("sta %v", _enct);
;
L3C5A:	sta     __enct
;
; __asm__ ("lda %v", envy);
;
L3C3D:	lda     _envy
;
; __asm__ ("beq %g", enems_do_vertical_done);
;
	jeq     L3CC4
;
; __asm__ ("ldx #0");    // X = 00  
;
	ldx     #0
;
; __asm__ ("cmp #$80");   // is negative?
;
	cmp     #$80
;
; __asm__ ("bcc %g", EVMCP0);  // branch if not
;
	bcc     L3C70
;
; __asm__ ("dex");    // X = FF
;
	dex
;
; __asm__ ("clc");
;
	clc
;
; __asm__ ("adc %v", _eny);
;
L3C70:	adc     __eny
;
; __asm__ ("sta %v", _eny);
;
	sta     __eny
;
; __asm__ ("txa");    // Sign extended
;
	txa
;
; __asm__ ("adc %v+1", _eny);
;
	adc     __eny+1
;
; __asm__ ("sta %v+1", _eny);
;
	sta     __eny+1
;
; __asm__ ("lda %v", _enx);
;
	lda     __enx
;
; __asm__ ("lsr a");
;
	lsr     a
;
; __asm__ ("lsr a");
;
	lsr     a
;
; __asm__ ("lsr a");
;
	lsr     a
;
; __asm__ ("lsr a");
;
	lsr     a
;
; __asm__ ("sta %v", cx1);
;
	sta     _cx1
;
; __asm__ ("lda %v", _enx);
;
	lda     __enx
;
; __asm__ ("clc");
;
	clc
;
; __asm__ ("adc #7");
;
	adc     #7
;
; __asm__ ("lsr a");
;
	lsr     a
;
; __asm__ ("lsr a");
;
	lsr     a
;
; __asm__ ("lsr a");
;
	lsr     a
;
; __asm__ ("lsr a");
;
	lsr     a
;
; __asm__ ("sta %v", cx2);
;
	sta     _cx2
;
; __asm__ ("lda %v", envy);
;
	lda     _envy
;
; __asm__ ("asl a");    // bit 7 goes to C
;
	asl     a
;
; __asm__ ("bcc %g", EVMCNN0); // Not negative.
;
	bcc     L3CA3
;
; __asm__ ("lda %v", _eny);
;
	lda     __eny
;
; __asm__ ("ldx %v+1", _eny);
;
	ldx     __eny+1
;
; __asm__ ("jsr shrax4");
;
	jsr     shrax4
;
; __asm__ ("sta %v", cy1);
;
	sta     _cy1
;
; __asm__ ("sta %v", cy2);
;
	sta     _cy2
;
; cm_two_points ();
;
	jsr     _cm_two_points
;
; __asm__ ("lda %v", at1);
;
	lda     _at1
;
; __asm__ ("and #%b", ENEMS_OBSTACLE_BITS);
;
	and     #$18
;
; __asm__ ("bne %g", EVMCNDO);
;
	bne     L3CBA
;
; __asm__ ("lda %v", at2);
;
	lda     _at2
;
; __asm__ ("and #%b", ENEMS_OBSTACLE_BITS);
;
	and     #$18
;
; __asm__ ("beq %g", EVMCNNE);
;
	beq     L3CC4
;
; __asm__ ("lda #0");
;
L3CBA:	lda     #0
;
; __asm__ ("sta %v", _enmy);
;
	sta     __enmy
;
; __asm__ ("lda %v", cy1);
;
	lda     _cy1
;
; __asm__ ("clc");
;
	clc
;
; __asm__ ("adc #1");
;
	adc     #1
;
; __asm__ ("jmp %g", EVMCNNE);
;
	jmp     L4483
;
; __asm__ ("lda %v", _eny);
;
L3CA3:	lda     __eny
;
; __asm__ ("ldx %v+1", _eny);
;
	ldx     __eny+1
;
; __asm__ ("clc");
;
	clc
;
; __asm__ ("adc #15");
;
	adc     #15
;
; __asm__ ("bcc %g", EVMCNN0CC);
;
	bcc     L3CE7
;
; __asm__ ("inx");
;
	inx
;
; __asm__ ("jsr shrax4");
;
L3CE7:	jsr     shrax4
;
; __asm__ ("sta %v", cy1);
;
	sta     _cy1
;
; __asm__ ("sta %v", cy2);
;
	sta     _cy2
;
; cm_two_points ();
;
	jsr     _cm_two_points
;
; __asm__ ("lda %v", at1);
;
	lda     _at1
;
; __asm__ ("and #%b", ENEMS_FLOOR_BITS);
;
	and     #$3C
;
; __asm__ ("bne %g", EVMCPDO);
;
	bne     L3CFE
;
; __asm__ ("lda %v", at2);
;
	lda     _at2
;
; __asm__ ("and #%b", ENEMS_FLOOR_BITS);
;
	and     #$3C
;
; __asm__ ("beq %g", EVMCNNE);
;
	beq     L3CC4
;
; __asm__ ("lda #0");
;
L3CFE:	lda     #0
;
; __asm__ ("sta %v", _enmy);
;
	sta     __enmy
;
; __asm__ ("lda %v", cy2);
;
	lda     _cy2
;
; __asm__ ("sec");
;
	sec
;
; __asm__ ("sbc #1");
;
	sbc     #1
;
; __asm__ ("ldx #0");
;
L4483:	ldx     #0
;
; __asm__ ("jsr shlax4");
;
	jsr     shlax4
;
; __asm__ ("sta %v", _eny);
;
	sta     __eny
;
; __asm__ ("stx %v+1", _eny);
;
	stx     __eny+1
;
; __asm__ ("lda %v", _enx);
;
L3CC4:	lda     __enx
;
; __asm__ ("sta %v", encx);
;
	sta     _encx
;
; __asm__ ("clc");
;
	clc
;
; __asm__ ("adc %v", envx);
;
	adc     _envx
;
; __asm__ ("sta %v", _enx);
;
	sta     __enx
;
; __asm__ ("lda %v", rdt);
;
	lda     _rdt
;
; __asm__ ("cmp #7");
;
	cmp     #7
;
; __asm__ ("bne %g", EHMCNT7);
;
	bne     L3D2F
;
; __asm__ ("lda %v", _enx);
;
	lda     __enx
;
; __asm__ ("cmp %v", _enx1);
;
	cmp     __enx1
;
; __asm__ ("bcc %g", EHMCT7CH);
;
	bcc     L3D37
;
; __asm__ ("lda %v", _enx2);
;
	lda     __enx2
;
; __asm__ ("cmp %v", _enx);
;
	cmp     __enx
;
; __asm__ ("bcs %g", EHMCNT7E);
;
	bcs     L3D3F
;
; __asm__ ("lda #0");
;
L3D37:	lda     #0
;
; __asm__ ("sec");
;
	sec
;
; __asm__ ("jmp %g", EHMCNT7E);
;
	jmp     L4484
;
; __asm__ ("lda %v", envx);
;
L3D2F:	lda     _envx
;
; __asm__ ("beq %g", EHMCNT7E);
;
	beq     L3D3F
;
; __asm__ ("lda %v", _eny);
;
	lda     __eny
;
; __asm__ ("ldx %v+1", _eny);
;
	ldx     __eny+1
;
; __asm__ ("jsr shrax4");
;
	jsr     shrax4
;
; __asm__ ("sta %v", cy1);
;
	sta     _cy1
;
; __asm__ ("lda %v", _eny);
;
	lda     __eny
;
; __asm__ ("ldx %v+1", _eny);
;
	ldx     __eny+1
;
; __asm__ ("clc");
;
	clc
;
; __asm__ ("adc #15");
;
	adc     #15
;
; __asm__ ("bcc %g", EHMCNN0CC);
;
	bcc     L3D69
;
; __asm__ ("inx");
;
	inx
;
; __asm__ ("jsr shrax4");
;
L3D69:	jsr     shrax4
;
; __asm__ ("sta %v", cy2);
;
	sta     _cy2
;
; __asm__ ("lda %v", envx);
;
	lda     _envx
;
; __asm__ ("asl a");    // bit 7 goes to C
;
	asl     a
;
; __asm__ ("bcc %g", EHMCNN0); // Not negative.
;
	bcc     L3D78
;
; __asm__ ("lda #8");
;
	lda     #8
;
; __asm__ ("sta %v", rdx);
;
	sta     _rdx
;
; __asm__ ("lda %v", _enx);
;
	lda     __enx
;
; __asm__ ("jmp %g", EHMCNNE);
;
	jmp     L4487
;
; __asm__ ("lda #240");
;
L3D78:	lda     #240
;
; __asm__ ("sta %v", rdx);
;
	sta     _rdx
;
; __asm__ ("lda %v", _enx);
;
	lda     __enx
;
; __asm__ ("clc");
;
	clc
;
; __asm__ ("adc #7");
;
	adc     #7
;
; __asm__ ("lsr a");
;
L4487:	lsr     a
;
; __asm__ ("lsr a");
;
	lsr     a
;
; __asm__ ("lsr a");
;
	lsr     a
;
; __asm__ ("lsr a");
;
	lsr     a
;
; __asm__ ("sta %v", cx1);
;
	sta     _cx1
;
; __asm__ ("sta %v", cx2);
;
	sta     _cx2
;
; cm_two_points ();
;
	jsr     _cm_two_points
;
; __asm__ ("lda %v", at1);
;
	lda     _at1
;
; __asm__ ("and #%b", ENEMS_OBSTACLE_BITS);
;
	and     #$18
;
; __asm__ ("bne %g", EHMCCHD);
;
	bne     L3DB3
;
; __asm__ ("lda %v", at2);
;
	lda     _at2
;
; __asm__ ("and #%b", ENEMS_OBSTACLE_BITS);
;
	and     #$18
;
; __asm__ ("bne %g", EHMCCHD);
;
	bne     L3DB3
;
; __asm__ ("lda %v", _enx);
;
	lda     __enx
;
; __asm__ ("cmp %v", rdx);
;
	cmp     _rdx
;
; __asm__ ("bne %g", EHMCNT7E);
;
	bne     L3D3F
;
; __asm__ ("lda #0");
;
L3DB3:	lda     #0
;
; __asm__ ("sbc %v", _enmx);
;
L4484:	sbc     __enmx
;
; __asm__ ("sta %v", _enmx);
;
	sta     __enmx
;
; __asm__ ("lda %v", encx);
;
	lda     _encx
;
; __asm__ ("sta %v", _enx);
;
	sta     __enx
;
; rdy = _eny - cam_pos;
;
L3D3F:	lda     __eny
	sec
	sbc     _cam_pos
	pha
	lda     __eny+1
	sbc     _cam_pos+1
	tax
	pla
	sta     _rdy
	stx     _rdy+1
;
; if (rdy >= 220) enems_destroy ();
;
	cmp     #$DC
	txa
	sbc     #$00
	bvs     L3DD5
	eor     #$80
L3DD5:	bpl     L4454
	jsr     _enems_destroy
;
; gpit = PUAS_MAX; while (gpit) { --gpit;
;
L4454:	lda     #$02
	sta     _gpit
	jmp     L3DE2
L3DD9:	dec     _gpit
;
; if (puas_st [gpit] == 1) {
;
	ldy     _gpit
	lda     _puas_st,y
	cmp     #$01
	jne     L3DE2
;
; if (CLB (puas_x [gpit], puas_y [gpit], _enx, _eny)) {
;
	ldy     _gpit
	ldx     #$00
	lda     _puas_x,y
	clc
	adc     #$07
	bcc     L3DE8
	inx
L3DE8:	cmp     __enx
	txa
	sbc     #$00
	jcc     L3DE2
	ldy     _gpit
	lda     _puas_x,y
	jsr     pusha0
	lda     __enx
	clc
	adc     #$07
	bcc     L3DEF
	ldx     #$01
L3DEF:	jsr     tosicmp
	beq     L443C
	jcs     L3DE2
L443C:	ldx     #$00
	lda     _gpit
	asl     a
	bcc     L4434
	inx
	clc
L4434:	adc     #<(_puas_y)
	sta     ptr1
	txa
	adc     #>(_puas_y)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	clc
	adc     #$08
	bcc     L3DF2
	inx
L3DF2:	cmp     __eny
	txa
	sbc     __eny+1
	bcc     L3DE2
	ldx     #$00
	lda     _gpit
	asl     a
	bcc     L4435
	inx
	clc
L4435:	adc     #<(_puas_y)
	sta     ptr1
	txa
	adc     #>(_puas_y)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	lda     __eny
	ldx     __eny+1
	clc
	adc     #$0E
	bcc     L3DF7
	inx
L3DF7:	jsr     tosicmp
	bcc     L3DE4
	bne     L3DE2
;
; if (c_level_killable_enems & pow2 [rdt]) {
;
L3DE4:	ldy     _rdt
	lda     _pow2,y
	and     _c_level_killable_enems
	pha
	pla
	beq     L3DF9
;
; enems_kill ();
;
	jsr     _enems_kill
;
; bcd_score_add_5_2 (rdt, 0);
;
	lda     _rdt
	jsr     pusha
	lda     #$00
	jsr     _bcd_score_add_5_2
;
; pindex = puas_who [gpit];
;
	ldy     _gpit
	lda     _puas_who,y
	sta     _pindex
;
; hud_update_score ();
;
	jsr     _hud_update_score
;
; puas_st [gpit] = 0;
;
	ldy     _gpit
	lda     #$00
;
; } else puas_st [gpit] = 2;
;
	jmp     L442D
L3DF9:	ldy     _gpit
	lda     #$02
L442D:	sta     _puas_st,y
;
; sfx_play (SFX_ENEMY_HIT, SC_ROOM);
;
	lda     #$06
	jsr     pusha
	lda     #$02
	jsr     _sfx_play
;
; gpit = PUAS_MAX; while (gpit) { --gpit;
;
L3DE2:	lda     _gpit
	jne     L3DD9
;
; if (rdt == 16) {
;
	lda     _rdt
	cmp     #$10
	bne     L3E12
;
; if (_enct) _enct --; else {
;
	lda     __enct
	beq     L3E14
	dec     __enct
	jmp     L3E17
;
; enems_destroy ();
;
L3E14:	jsr     _enems_destroy
;
; goto enems_do_loop;
;
	jmp     L3A1C
;
; rda = c_spr_base [0];
;
L3E17:	lda     _c_spr_base+1
	sta     ptr1+1
	lda     _c_spr_base
	sta     ptr1
	ldy     #$00
	lda     (ptr1),y
	sta     _rda
;
; } else {
;
	jmp     L3E4F
;
; rda = c_spr_base [rdt];
;
L3E12:	lda     _c_spr_base
	ldx     _c_spr_base+1
	ldy     _rdt
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	sta     _rda
;
; switch (rdt) {
;
	lda     _rdt
;
; }
;
	cmp     #$02
	beq     L4459
	cmp     #$03
	beq     L4459
	cmp     #$04
	beq     L4457
	cmp     #$06
	beq     L445B
	cmp     #$08
	beq     L4463
	jmp     L4464
;
; if (prx < _enx) rda += EN_FACING;
;
L4457:	lda     _prx
	cmp     __enx
	bcs     L3E26
	lda     #$04
	clc
	adc     _rda
	sta     _rda
;
; if (rdd) rda += 2; else
;
L3E26:	lda     _rdd
	beq     L4458
	lda     #$02
	jmp     L4482
;
; rda += (frame_counter >> 4) & 1;
;
L4458:	lda     _frame_counter
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	and     #$01
;
; break;
;
	jmp     L4482
;
; if (_enmx < 0) rda += EN_FACING;
;
L4459:	lda     __enmx
	asl     a
	bcc     L445A
	lda     #$04
	clc
	adc     _rda
	sta     _rda
;
; rda += (_enx >> 4) & 1;
;
L445A:	lda     __enx
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	and     #$01
;
; break;
;
	jmp     L4482
;
; if (_ENSTATE == 0 || (_enct < 32 && half_life)) rda = 0;
;
L445B:	lda     __enx2
	beq     L447E
	lda     __enct
	cmp     #$20
	bcs     L4464
	lda     _half_life
	beq     L4465
	lda     #$00
L447E:	sta     _rda
;
; break;
;
	jmp     L4465
;
; rda += ((frame_counter >> 2) & 3);
;
L4463:	lda     _frame_counter
	lsr     a
	lsr     a
	and     #$03
L4482:	clc
	adc     _rda
	sta     _rda
;
; for (pindex = 0; pindex < 2; ++ pindex) {
;
L4464:	lda     #$00
L4465:	sta     _pindex
L4466:	lda     _pindex
	cmp     #$02
	jcs     L3E4F
;
; if (apon [pindex]) {
;
	ldy     _pindex
	lda     _apon,y
	jeq     L4476
;
; __asm__ ("ldy %v", pindex);
;
	ldy     _pindex
;
; __asm__ ("lda %v, y", aprx);
;
	lda     _aprx,y
;
; __asm__ ("sta %v", prx);
;
	sta     _prx
;
; __asm__ ("lda %v, y", apvx);
;
	lda     _apvx,y
;
; __asm__ ("sta %v", pvx);
;
	sta     _pvx
;
; __asm__ ("lda %v, y", apkill);
;
	lda     _apkill,y
;
; __asm__ ("sta %v", pkill);
;
	sta     _pkill
;
; __asm__ ("lda %v, y", aplife);
;
	lda     _aplife,y
;
; __asm__ ("sta %v", plife);
;
	sta     _plife
;
; __asm__ ("lda %v, y", apst);
;
	lda     _apst,y
;
; __asm__ ("sta %v", pst);
;
	sta     _pst
;
; __asm__ ("lda %v, y", apct);
;
	lda     _apct,y
;
; __asm__ ("sta %v", pct);
;
	sta     _pct
;
; __asm__ ("lda %v, y", apgotten);
;
	lda     _apgotten,y
;
; __asm__ ("sta %v", pgotten);
;
	sta     _pgotten
;
; __asm__ ("lda %v, y", aptgmx);
;
	lda     _aptgmx,y
;
; __asm__ ("sta %v", ptgmx);
;
	sta     _ptgmx
;
; pry = apry [pindex];
;
	ldx     #$00
	lda     _pindex
	asl     a
	bcc     L4436
	inx
	clc
L4436:	adc     #<(_apry)
	sta     ptr1
	txa
	adc     #>(_apry)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	sta     _pry+1
	dey
	lda     (ptr1),y
	sta     _pry
;
; py = apy [pindex];
;
	ldx     #$00
	lda     _pindex
	asl     a
	bcc     L4437
	inx
	clc
L4437:	adc     #<(_apy)
	sta     ptr1
	txa
	adc     #>(_apy)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	sta     _py+1
	dey
	lda     (ptr1),y
	sta     _py
;
; if (!pkill) switch (rdt) {
;
	lda     _pkill
	jne     L3E86
	tax
	lda     _rdt
;
; }
;
	cmp     #$06
	beq     L3E88
	cmp     #$07
	beq     L446B
	jmp     L4470
;
; if (_ENSTATE) {
;
L3E88:	lda     __enx2
	jeq     L3E86
;
; if (prx + 11 >= _enx && prx <= _enx + 11) {
;
	lda     _prx
	clc
	adc     #$0B
	bcc     L3E8D
	inx
L3E8D:	cmp     __enx
	txa
	sbc     #$00
	jcc     L3E86
	lda     _prx
	jsr     pusha0
	lda     __enx
	clc
	adc     #$0B
	bcc     L3E8F
	ldx     #$01
L3E8F:	jsr     tosicmp
	bcc     L3E8C
	jne     L3E86
;
; if (pry + 16 >= _eny && pry + 12 <= _eny) {
;
L3E8C:	lda     _pry
	ldx     _pry+1
	clc
	adc     #$10
	bcc     L3E93
	inx
L3E93:	cmp     __eny
	txa
	sbc     __eny+1
	jcc     L3E86
	lda     _pry
	ldx     _pry+1
	clc
	adc     #$0C
	bcc     L3E95
	inx
L3E95:	sec
	sbc     __eny
	sta     tmp1
	txa
	sbc     __eny+1
	ora     tmp1
	bcc     L3E92
	jne     L3E86
;
; player_gotten ();
;
L3E92:	jsr     _player_gotten
;
; break;
;
	jmp     L3E86
;
; if (prx + 19 >= _enx && prx <= _enx + 19) {
;
L446B:	lda     _prx
	clc
	adc     #$13
	bcc     L3E9C
	inx
L3E9C:	cmp     __enx
	txa
	sbc     #$00
	jcc     L3E86
	lda     _prx
	jsr     pusha0
	lda     __enx
	clc
	adc     #$13
	bcc     L3E9E
	ldx     #$01
L3E9E:	jsr     tosicmp
	bcc     L3E9B
	jne     L3E86
;
; if (pry + 16 >= _eny && pry + 12 <= _eny) {
;
L3E9B:	lda     _pry
	ldx     _pry+1
	clc
	adc     #$10
	bcc     L3EA2
	inx
L3EA2:	cmp     __eny
	txa
	sbc     __eny+1
	jcc     L3E86
	lda     _pry
	ldx     _pry+1
	clc
	adc     #$0C
	bcc     L3EA4
	inx
L3EA4:	sec
	sbc     __eny
	sta     tmp1
	txa
	sbc     __eny+1
	ora     tmp1
	bcc     L3EA1
	jne     L3E86
;
; player_gotten ();
;
L3EA1:	jsr     _player_gotten
;
; break;
;
	jmp     L3E86
;
; CLE (prx, pry, _enx, _eny) && pst != EST_FLICKER
;
L4470:	lda     _prx
	clc
	adc     #$07
	bcc     L3EAC
	inx
L3EAC:	cmp     __enx
	txa
	sbc     #$00
	bcc     L3E86
	lda     _prx
	jsr     pusha0
	lda     __enx
	clc
	adc     #$07
	bcc     L3EB1
	ldx     #$01
L3EB1:	jsr     tosicmp
	beq     L443D
	bcs     L3E86
L443D:	lda     _pry
	ldx     _pry+1
	clc
	adc     #$0E
	bcc     L3EB3
	inx
L3EB3:	cmp     __eny
	txa
	sbc     __eny+1
	bcc     L3E86
	lda     _pry
	ldx     _pry+1
	jsr     pushax
	lda     __eny
	ldx     __eny+1
	clc
	adc     #$0E
	bcc     L3EB7
	inx
L3EB7:	jsr     tosicmp
	bcc     L3EAA
	bne     L3E86
L3EAA:	lda     _pst
;
; ) {
;
	cmp     #$01
	beq     L3E86
;
; rds = envx;
;
	lda     _envx
	sta     _rds
;
; if (rdt == 1) goal_time = 0; else
;
	lda     _rdt
	cmp     #$01
	bne     L3EBE
	lda     #$00
	sta     _goal_time
	jmp     L3EC2
;
; player_hit ();
;
L3EBE:	jsr     _player_hit
;
; enems_kill ();
;
L3EC2:	jsr     _enems_kill
;
; __asm__ ("ldy %v", pindex);
;
L3E86:	ldy     _pindex
;
; __asm__ ("lda %v", prx);
;
	lda     _prx
;
; __asm__ ("sta %v, y", aprx);
;
	sta     _aprx,y
;
; __asm__ ("lda %v", pvx);
;
	lda     _pvx
;
; __asm__ ("sta %v, y", apvx);
;
	sta     _apvx,y
;
; __asm__ ("lda %v", pkill);
;
	lda     _pkill
;
; __asm__ ("sta %v, y", apkill);
;
	sta     _apkill,y
;
; __asm__ ("lda %v", plife);
;
	lda     _plife
;
; __asm__ ("sta %v, y", aplife);
;
	sta     _aplife,y
;
; __asm__ ("lda %v", pst);
;
	lda     _pst
;
; __asm__ ("sta %v, y", apst);
;
	sta     _apst,y
;
; __asm__ ("lda %v", pct);
;
	lda     _pct
;
; __asm__ ("sta %v, y", apct);
;
	sta     _apct,y
;
; __asm__ ("lda %v", pgotten);
;
	lda     _pgotten
;
; __asm__ ("sta %v, y", apgotten);
;
	sta     _apgotten,y
;
; __asm__ ("lda %v", ptgmx);
;
	lda     _ptgmx
;
; __asm__ ("sta %v, y", aptgmx);
;
	sta     _aptgmx,y
;
; apry [pindex] = pry;
;
	ldx     #$00
	lda     _pindex
	asl     a
	bcc     L4438
	inx
	clc
L4438:	adc     #<(_apry)
	sta     ptr1
	txa
	adc     #>(_apry)
	sta     ptr1+1
	lda     _pry
	ldy     #$00
	sta     (ptr1),y
	iny
	lda     _pry+1
	sta     (ptr1),y
;
; apy [pindex] = py;
;
	ldx     #$00
	lda     _pindex
	asl     a
	bcc     L4439
	inx
	clc
L4439:	adc     #<(_apy)
	sta     ptr1
	txa
	adc     #>(_apy)
	sta     ptr1+1
	lda     _py
	dey
	sta     (ptr1),y
	iny
	lda     _py+1
	sta     (ptr1),y
;
; for (pindex = 0; pindex < 2; ++ pindex) {
;
L4476:	inc     _pindex
	jmp     L4466
;
; if (rdy < 220 && rda) oam_index = oam_meta_spr (
;
L3E4F:	lda     _rdy
	cmp     #$DC
	lda     _rdy+1
	sbc     #$00
	bvc     L3EEF
	eor     #$80
L3EEF:	bpl     L3EED
	lda     _rda
	beq     L3EED
;
; _enx, rdy + SPRITE_ADJUST, 
;
	jsr     decsp3
	lda     __enx
	ldy     #$02
	sta     (sp),y
	lda     _rdy
	ldx     _rdy+1
	sec
	sbc     #$01
	bcs     L443A
	dex
	sec
L443A:	sbc     #$F0
	pha
	txa
	sbc     #$FF
	pla
	dey
	sta     (sp),y
;
; oam_index,
;
	lda     _oam_index
	dey
	sta     (sp),y
;
; spr_enems [rda]
;
	ldx     #$00
	lda     _rda
	asl     a
	bcc     L443B
	inx
	clc
L443B:	adc     _spr_enems
;
; );
;
	sta     ptr1
;
; spr_enems [rda]
;
	txa
	adc     _spr_enems+1
;
; );
;
	sta     ptr1+1
	iny
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _oam_meta_spr
	sta     _oam_index
;
; __asm__ ("ldy %v", enit);
;
L3EED:	ldy     _enit
;
; __asm__ ("lda %v", _enct);
;
	lda     __enct
;
; __asm__ ("sta %v, y", enct);
;
	sta     _enct,y
;
; __asm__ ("lda %v", _enx);
;
	lda     __enx
;
; __asm__ ("sta %v, y", enx);
;
	sta     _enx,y
;
; __asm__ ("lda %v", _enx1);
;
	lda     __enx1
;
; __asm__ ("sta %v, y", enx1);
;
	sta     _enx1,y
;
; __asm__ ("lda %v", _enx2);
;
	lda     __enx2
;
; __asm__ ("sta %v, y", enx2);
;
	sta     _enx2,y
;
; __asm__ ("lda %v", _enmx);
;
	lda     __enmx
;
; __asm__ ("sta %v, y", enmx);
;
	sta     _enmx,y
;
; __asm__ ("lda %v", _enmy);
;
	lda     __enmy
;
; __asm__ ("sta %v, y", enmy);
;
	sta     _enmy,y
;
; __asm__ ("tya");
;
	tya
;
; __asm__ ("asl a");
;
	asl     a
;
; __asm__ ("tax");
;
	tax
;
; __asm__ ("lda %v", _eny);
;
	lda     __eny
;
; __asm__ ("sta %v, x", eny);
;
	sta     _eny,x
;
; __asm__ ("lda %v+1", _eny);
;
	lda     __eny+1
;
; __asm__ ("sta %v+1, x", eny);
;
	sta     _eny+1,x
;
; __asm__ ("jmp %g", enems_do_loop);
;
	jmp     L3A1C
;
; enstart ++; if (enstart == ENEMS_MAX) enstart = 0;
;
L3A22:	inc     _enstart
	lda     _enstart
	cmp     #$08
	bne     L3F28
	lda     #$00
	sta     _enstart
;
; }
;
L3F28:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ enter_screen (__near__ const unsigned char *, __near__ __near__ function returning void *)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_enter_screen: near

.segment	"CODE"

;
; void enter_screen (const unsigned char *pal, void (*func) (void)) {
;
	jsr     pushax
;
; scroll (0, 0);
;
	jsr     push0
	jsr     _scroll
;
; cls ();
;
	jsr     _cls
;
; pal_bg (pal);
;
	ldy     #$03
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     _pal_bg
;
; (*func) ();
;
	ldy     #$01
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     callax
;
; ppu_on_all ();
;
	jsr     _ppu_on_all
;
; fade_in ();
;
	jsr     _fade_in
;
; }
;
	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; void __near__ exit_cleanly (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_exit_cleanly: near

.segment	"CODE"

;
; oam_hide_rest (0);
;
	lda     #$00
	jsr     _oam_hide_rest
;
; music_stop ();
;
	jsr     _music_stop
;
; fade_out ();
;
	jsr     _fade_out
;
; ppu_off (); 
;
	jmp     _ppu_off

.endproc

; ---------------------------------------------------------------
; void __near__ wait_time_or_input (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_wait_time_or_input: near

.segment	"CODE"

;
; while (game_time) {
;
	jmp     L3F40
;
; ticker ++; if (ticker == ticks) {
;
L3F3E:	inc     _ticker
	lda     _ticks
	cmp     _ticker
	bne     L3F43
;
; ticker = 0;
;
	lda     #$00
	sta     _ticker
;
; game_time --;
;
	dec     _game_time
;
; get_pad_once ();
;
L3F43:	jsr     _get_pad_once
;
; if (pad_once || pad_doce) break;
;
	lda     _pad_once
	bne     L3F4A
	lda     _pad_doce
	beq     L3F49
L3F4A:	rts
;
; ppu_wait_nmi ();
;
L3F49:	jsr     _ppu_wait_nmi
;
; while (game_time) {
;
L3F40:	lda     _game_time
	bne     L3F3E
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ do_screen (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_do_screen: near

.segment	"CODE"

;
; void do_screen (unsigned char seconds) {
;
	jsr     pusha
;
; game_time = seconds; ticker = 0;
;
	ldy     #$00
	lda     (sp),y
	sta     _game_time
	sty     _ticker
;
; wait_time_or_input ();
;
	jsr     _wait_time_or_input
;
; exit_cleanly ();
;
	jsr     _exit_cleanly
;
; }
;
	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; void __near__ screen_print_stats (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_screen_print_stats: near

.segment	"CODE"

;
; p_s (8, rda,   "PUNTOS    "); gp_gen = bcd_score; bcd_print ();
;
	jsr     decsp2
	lda     #$08
	ldy     #$01
	sta     (sp),y
	lda     _rda
	dey
	sta     (sp),y
	lda     #<(L3F58)
	ldx     #>(L3F58)
	jsr     _p_s
	lda     #>(_bcd_score)
	sta     _gp_gen+1
	lda     #<(_bcd_score)
	sta     _gp_gen
	jsr     _bcd_print
;
; p_s (8, rda+1, "RECORD    "); gp_gen = bcd_high_score; bcd_print ();
;
	jsr     decsp2
	lda     #$08
	ldy     #$01
	sta     (sp),y
	lda     _rda
	clc
	adc     #$01
	dey
	sta     (sp),y
	lda     #<(L3F60)
	ldx     #>(L3F60)
	jsr     _p_s
	lda     #>(_bcd_high_score)
	sta     _gp_gen+1
	lda     #<(_bcd_high_score)
	sta     _gp_gen
	jmp     _bcd_print

.endproc

; ---------------------------------------------------------------
; void __near__ screen_logo (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_screen_logo: near

.segment	"CODE"

;
; nt = NAMETABLE_A;
;
	ldx     #$20
	lda     #$00
	sta     _nt
	stx     _nt+1
;
; vram_adr (NAMETABLE_A); vram_unrle (title_png_rle);
;
	jsr     _vram_adr
	lda     #<(_title_png_rle)
	ldx     #>(_title_png_rle)
	jsr     _vram_unrle
;
; rda = 4; screen_print_stats ();
;
	lda     #$04
	sta     _rda
	jsr     _screen_print_stats
;
; p_s (5, 24, "@ 2019 THE MOJON TWINS");
;
	jsr     decsp2
	lda     #$05
	ldy     #$01
	sta     (sp),y
	lda     #$18
	dey
	sta     (sp),y
	lda     #<(L3F73)
	ldx     #>(L3F73)
	jmp     _p_s

.endproc

; ---------------------------------------------------------------
; void __near__ screen_title (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_screen_title: near

.segment	"CODE"

;
; screen_logo ();
;
	jsr     _screen_logo
;
; p_s (10, 18, "1 PLAYER");
;
	jsr     decsp2
	lda     #$0A
	ldy     #$01
	sta     (sp),y
	lda     #$12
	dey
	sta     (sp),y
	lda     #<(L3F7A)
	ldx     #>(L3F7A)
	jsr     _p_s
;
; p_s (10, 19, "2 PLAYER CO-OP");
;
	jsr     decsp2
	lda     #$0A
	ldy     #$01
	sta     (sp),y
	lda     #$13
	dey
	sta     (sp),y
	lda     #<(L3F7F)
	ldx     #>(L3F7F)
	jsr     _p_s
;
; p_s (10, 20, "2 PLAYER VS.");
;
	jsr     decsp2
	lda     #$0A
	ldy     #$01
	sta     (sp),y
	lda     #$14
	dey
	sta     (sp),y
	lda     #<(L3F84)
	ldx     #>(L3F84)
	jmp     _p_s

.endproc

; ---------------------------------------------------------------
; void __near__ screen_select (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_screen_select: near

.segment	"CODE"

;
; screen_logo ();
;
	jsr     _screen_logo
;
; p_s (8, 17, "ELIGE PERSONAJE:");
;
	jsr     decsp2
	lda     #$08
	ldy     #$01
	sta     (sp),y
	lda     #$11
	dey
	sta     (sp),y
	lda     #<(L3F8B)
	ldx     #>(L3F8B)
	jsr     _p_s
;
; p_s (11, 19, "ESPINETE");
;
	jsr     decsp2
	lda     #$0B
	ldy     #$01
	sta     (sp),y
	lda     #$13
	dey
	sta     (sp),y
	lda     #<(L3F90)
	ldx     #>(L3F90)
	jsr     _p_s
;
; p_s (11, 20, "DON PIMPON");
;
	jsr     decsp2
	lda     #$0B
	ldy     #$01
	sta     (sp),y
	lda     #$14
	dey
	sta     (sp),y
	lda     #<(L3F95)
	ldx     #>(L3F95)
	jmp     _p_s

.endproc

; ---------------------------------------------------------------
; void __near__ screen_select_level (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_screen_select_level: near

.segment	"CODE"

;
; screen_logo ();
;
	jsr     _screen_logo
;
; p_s (10, 17, "ELIGE NIVEL:");
;
	jsr     decsp2
	lda     #$0A
	ldy     #$01
	sta     (sp),y
	lda     #$11
	dey
	sta     (sp),y
	lda     #<(L3F9C)
	ldx     #>(L3F9C)
	jsr     _p_s
;
; p_s (11, 20, "AL AZAR!");
;
	jsr     decsp2
	lda     #$0B
	ldy     #$01
	sta     (sp),y
	lda     #$14
	dey
	sta     (sp),y
	lda     #<(L3FA1)
	ldx     #>(L3FA1)
	jsr     _p_s
;
; p_s (11, 19, "^          _");
;
	jsr     decsp2
	lda     #$0B
	ldy     #$01
	sta     (sp),y
	lda     #$13
	dey
	sta     (sp),y
	lda     #<(L3FA6)
	ldx     #>(L3FA6)
	jmp     _p_s

.endproc

; ---------------------------------------------------------------
; void __near__ screen_game_over (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_screen_game_over: near

.segment	"CODE"

;
; nt = NAMETABLE_A;
;
	ldx     #$20
	lda     #$00
	sta     _nt
	stx     _nt+1
;
; if (level && pcontinues) {
;
	lda     _level
	beq     L4489
	lda     _pcontinues
	beq     L4489
;
; rda = 11;
;
	lda     #$0B
	sta     _rda
;
; p_s (11, 15, "CONTINUA "); vram_put (DIGIT (pcontinues));
;
	jsr     decsp2
	lda     #$0B
	ldy     #$01
	sta     (sp),y
	lda     #$0F
	dey
	sta     (sp),y
	lda     #<(L3FB4)
	ldx     #>(L3FB4)
	jsr     _p_s
	lda     _pcontinues
	clc
	adc     #$10
	jsr     _vram_put
;
; p_s (12, 16, "SI^  _NO");
;
	jsr     decsp2
	lda     #$0C
	ldy     #$01
	sta     (sp),y
	lda     #$10
	dey
	sta     (sp),y
	lda     #<(L3FBE)
	ldx     #>(L3FBE)
	jsr     _p_s
;
; } else rda = 13;
;
	jmp     L3FC0
L4489:	lda     #$0D
	sta     _rda
;
; p_s (11, rda, "GAME OVER!");
;
L3FC0:	jsr     decsp2
	lda     #$0B
	ldy     #$01
	sta     (sp),y
	lda     _rda
	dey
	sta     (sp),y
	lda     #<(L3FC6)
	ldx     #>(L3FC6)
	jsr     _p_s
;
; rda += 2; screen_print_stats ();
;
	lda     #$02
	clc
	adc     _rda
	sta     _rda
	jmp     _screen_print_stats

.endproc

; ---------------------------------------------------------------
; void __near__ screen_ending (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_screen_ending: near

.segment	"CODE"

;
; nt = NAMETABLE_A;
;
	ldx     #$20
	lda     #$00
	sta     _nt
	stx     _nt+1
;
; vram_adr (NAMETABLE_A); vram_unrle (pselected ? cuts1_png_rle : cuts0_png_rle);
;
	jsr     _vram_adr
	lda     _pselected
	beq     L3FD2
	lda     #<(_cuts1_png_rle)
	ldx     #>(_cuts1_png_rle)
	jmp     L3FD4
L3FD2:	lda     #<(_cuts0_png_rle)
	ldx     #>(_cuts0_png_rle)
L3FD4:	jsr     _vram_unrle
;
; if (pselected) {
;
	lda     _pselected
	beq     L3FD6
;
; p_s (3, 16, "'[HOLA, DON PIMPON! [QUE");
;
	jsr     decsp2
	lda     #$03
	ldy     #$01
	sta     (sp),y
	lda     #$10
	dey
	sta     (sp),y
	lda     #<(L3FDB)
	ldx     #>(L3FDB)
	jsr     _p_s
;
; p_s (3, 18, "SORPRESA ENCONTRARTE AQUI!'");
;
	jsr     decsp2
	lda     #$03
	ldy     #$01
	sta     (sp),y
	lda     #$12
	dey
	sta     (sp),y
	lda     #<(L3FE0)
	ldx     #>(L3FE0)
	jsr     _p_s
;
; p_s (3, 20, "'<QUIEN SOY? <DONDE ESTOY?");
;
	jsr     decsp2
	lda     #$03
	ldy     #$01
	sta     (sp),y
	lda     #$14
	dey
	sta     (sp),y
	lda     #<(L3FE5)
	ldx     #>(L3FE5)
	jsr     _p_s
;
; p_s (3, 22, "<QUIEN ES USTED, SE]ORITA?'");
;
	jsr     decsp2
	lda     #$03
	ldy     #$01
	sta     (sp),y
	lda     #$16
	dey
	sta     (sp),y
	lda     #<(L3FEA)
	ldx     #>(L3FEA)
	jmp     _p_s
;
; p_s (4, 16, "'EH, TE GANO OTRA VEZ AL");
;
L3FD6:	jsr     decsp2
	lda     #$04
	ldy     #$01
	sta     (sp),y
	lda     #$10
	dey
	sta     (sp),y
	lda     #<(L3FF0)
	ldx     #>(L3FF0)
	jsr     _p_s
;
; p_s (4, 18, "ESCONDITE, ESPINETE.'");
;
	jsr     decsp2
	lda     #$04
	ldy     #$01
	sta     (sp),y
	lda     #$12
	dey
	sta     (sp),y
	lda     #<(L3FF5)
	ldx     #>(L3FF5)
	jsr     _p_s
;
; p_s (4, 20, "'[JO, ANA, ES QUE TE VAS");
;
	jsr     decsp2
	lda     #$04
	ldy     #$01
	sta     (sp),y
	lda     #$14
	dey
	sta     (sp),y
	lda     #<(L3FFA)
	ldx     #>(L3FFA)
	jsr     _p_s
;
; p_s (4, 22, "MUY LEJOS! PS!'");
;
	jsr     decsp2
	lda     #$04
	ldy     #$01
	sta     (sp),y
	lda     #$16
	dey
	sta     (sp),y
	lda     #<(L3FFF)
	ldx     #>(L3FFF)
	jmp     _p_s

.endproc

; ---------------------------------------------------------------
; void __near__ screen_score (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_screen_score: near

.segment	"CODE"

;
; p_s (9, 19, "RONDAS GANADAS");
;
	jsr     decsp2
	lda     #$09
	ldy     #$01
	sta     (sp),y
	lda     #$13
	dey
	sta     (sp),y
	lda     #<(L4005)
	ldx     #>(L4005)
	jsr     _p_s
;
; p_s (10, 20, "PLAYER 1: "); p_t2_d (pscore [0]);
;
	jsr     decsp2
	lda     #$0A
	ldy     #$01
	sta     (sp),y
	lda     #$14
	dey
	sta     (sp),y
	lda     #<(L400A)
	ldx     #>(L400A)
	jsr     _p_s
	lda     _pscore
	jsr     _p_t2_d
;
; p_s (10, 21, "PLAYER 2: "); p_t2_d (pscore [1]);
;
	jsr     decsp2
	lda     #$0A
	ldy     #$01
	sta     (sp),y
	lda     #$15
	dey
	sta     (sp),y
	lda     #<(L4012)
	ldx     #>(L4012)
	jsr     _p_s
	lda     _pscore+1
	jmp     _p_t2_d

.endproc

; ---------------------------------------------------------------
; void __near__ screen_round_results (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_screen_round_results: near

.segment	"CODE"

;
; screen_logo ();
;
	jsr     _screen_logo
;
; if (winner < 2) {
;
	lda     _winner
	cmp     #$02
	bcs     L4019
;
; p_s (5, 16, "PLAYER ");
;
	jsr     decsp2
	lda     #$05
	ldy     #$01
	sta     (sp),y
	lda     #$10
	dey
	sta     (sp),y
	lda     #<(L401E)
	ldx     #>(L401E)
	jsr     _p_s
;
; vram_put (17 + winner);
;
	lda     _winner
	clc
	adc     #$11
	jsr     _vram_put
;
; p_s (14, 16, "GANA RONDA ");
;
	jsr     decsp2
	lda     #$0E
	ldy     #$01
	sta     (sp),y
	lda     #$10
	dey
	sta     (sp),y
	lda     #<(L4026)
	ldx     #>(L4026)
	jsr     _p_s
;
; vram_put (17 + round);
;
	lda     _round
	clc
	adc     #$11
	jsr     _vram_put
;
; } else {
;
	jmp     _screen_score
;
; p_s (11, 16, "UN EMPATE!");
;
L4019:	jsr     decsp2
	lda     #$0B
	ldy     #$01
	sta     (sp),y
	lda     #$10
	dey
	sta     (sp),y
	lda     #<(L402F)
	ldx     #>(L402F)
	jsr     _p_s
;
; screen_score ();
;
	jmp     _screen_score

.endproc

; ---------------------------------------------------------------
; void __near__ screen_game_result (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_screen_game_result: near

.segment	"CODE"

;
; screen_logo ();
;
	jsr     _screen_logo
;
; screen_score ();
;
	jsr     _screen_score
;
; p_s (9, 16, "PLAYER ");
;
	jsr     decsp2
	lda     #$09
	ldy     #$01
	sta     (sp),y
	lda     #$10
	dey
	sta     (sp),y
	lda     #<(L4038)
	ldx     #>(L4038)
	jsr     _p_s
;
; vram_put (17 + winner);
;
	lda     _winner
	clc
	adc     #$11
	jsr     _vram_put
;
; p_s (18, 16, "GANA!");
;
	jsr     decsp2
	lda     #$12
	ldy     #$01
	sta     (sp),y
	lda     #$10
	dey
	sta     (sp),y
	lda     #<(L4040)
	ldx     #>(L4040)
	jmp     _p_s

.endproc

; ---------------------------------------------------------------
; void __near__ game_init (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_game_init: near

.segment	"CODE"

;
; scroll_init ();
;
	jsr     _scroll_init
;
; map_ptr = level_map [level];
;
	ldx     #$00
	lda     _level
	asl     a
	bcc     L4499
	inx
	clc
L4499:	adc     #<(_level_map)
	sta     ptr1
	txa
	adc     #>(_level_map)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	sta     _map_ptr+1
	dey
	lda     (ptr1),y
	sta     _map_ptr
;
; behs = level_behs [level];
;
	ldx     #$00
	lda     _level
	asl     a
	bcc     L449A
	inx
	clc
L449A:	adc     #<(_level_behs)
	sta     ptr1
	txa
	adc     #>(_level_behs)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	sta     _behs+1
	dey
	lda     (ptr1),y
	sta     _behs
;
; strip_pointer = level_strips [level];
;
	ldx     #$00
	lda     _level
	asl     a
	bcc     L449B
	inx
	clc
L449B:	adc     #<(_level_strips)
	sta     ptr1
	txa
	adc     #>(_level_strips)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	sta     _strip_pointer+1
	dey
	lda     (ptr1),y
	sta     _strip_pointer
;
; c_ts_tmaps_0 = level_ts_tmaps_0 [level];
;
	ldx     #$00
	lda     _level
	asl     a
	bcc     L449C
	inx
	clc
L449C:	adc     #<(_level_ts_tmaps_0)
	sta     ptr1
	txa
	adc     #>(_level_ts_tmaps_0)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	sta     _c_ts_tmaps_0+1
	dey
	lda     (ptr1),y
	sta     _c_ts_tmaps_0
;
; c_ts_tmaps_1 = level_ts_tmaps_1 [level];
;
	ldx     #$00
	lda     _level
	asl     a
	bcc     L449D
	inx
	clc
L449D:	adc     #<(_level_ts_tmaps_1)
	sta     ptr1
	txa
	adc     #>(_level_ts_tmaps_1)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	sta     _c_ts_tmaps_1+1
	dey
	lda     (ptr1),y
	sta     _c_ts_tmaps_1
;
; c_ts_tmaps_2 = level_ts_tmaps_2 [level]; 
;
	ldx     #$00
	lda     _level
	asl     a
	bcc     L449E
	inx
	clc
L449E:	adc     #<(_level_ts_tmaps_2)
	sta     ptr1
	txa
	adc     #>(_level_ts_tmaps_2)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	sta     _c_ts_tmaps_2+1
	dey
	lda     (ptr1),y
	sta     _c_ts_tmaps_2
;
; c_ts_tmaps_3 = level_ts_tmaps_3 [level]; 
;
	ldx     #$00
	lda     _level
	asl     a
	bcc     L449F
	inx
	clc
L449F:	adc     #<(_level_ts_tmaps_3)
	sta     ptr1
	txa
	adc     #>(_level_ts_tmaps_3)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	sta     _c_ts_tmaps_3+1
	dey
	lda     (ptr1),y
	sta     _c_ts_tmaps_3
;
; c_ts_pals_0 = level_ts_pals_0 [level];
;
	ldx     #$00
	lda     _level
	asl     a
	bcc     L44A0
	inx
	clc
L44A0:	adc     #<(_level_ts_pals_0)
	sta     ptr1
	txa
	adc     #>(_level_ts_pals_0)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	sta     _c_ts_pals_0+1
	dey
	lda     (ptr1),y
	sta     _c_ts_pals_0
;
; c_ts_pals_1 = level_ts_pals_1 [level];
;
	ldx     #$00
	lda     _level
	asl     a
	bcc     L44A1
	inx
	clc
L44A1:	adc     #<(_level_ts_pals_1)
	sta     ptr1
	txa
	adc     #>(_level_ts_pals_1)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	sta     _c_ts_pals_1+1
	dey
	lda     (ptr1),y
	sta     _c_ts_pals_1
;
; c_ts_pals_2 = level_ts_pals_2 [level];
;
	ldx     #$00
	lda     _level
	asl     a
	bcc     L44A2
	inx
	clc
L44A2:	adc     #<(_level_ts_pals_2)
	sta     ptr1
	txa
	adc     #>(_level_ts_pals_2)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	sta     _c_ts_pals_2+1
	dey
	lda     (ptr1),y
	sta     _c_ts_pals_2
;
; c_ts_pals_3 = level_ts_pals_3 [level];
;
	ldx     #$00
	lda     _level
	asl     a
	bcc     L44A3
	inx
	clc
L44A3:	adc     #<(_level_ts_pals_3)
	sta     ptr1
	txa
	adc     #>(_level_ts_pals_3)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	sta     _c_ts_pals_3+1
	dey
	lda     (ptr1),y
	sta     _c_ts_pals_3
;
; c_spr_base = level_spr_base [level];
;
	ldx     #$00
	lda     _level
	asl     a
	bcc     L44A4
	inx
	clc
L44A4:	adc     #<(_level_spr_base)
	sta     ptr1
	txa
	adc     #>(_level_spr_base)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	sta     _c_spr_base+1
	dey
	lda     (ptr1),y
	sta     _c_spr_base
;
; c_level_killable_enems = level_killable_enems [level];
;
	ldy     _level
	lda     _level_killable_enems,y
	sta     _c_level_killable_enems
;
; scroll_speed = 129;
;
	lda     #$81
	sta     _scroll_speed
;
; pal_bg  (level_pal_bg [level]);
;
	ldx     #$00
	lda     _level
	asl     a
	bcc     L44A5
	inx
	clc
L44A5:	adc     #<(_level_pal_bg)
	sta     ptr1
	txa
	adc     #>(_level_pal_bg)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _pal_bg
;
; spr_enems = level_spr_enems [level];
;
	ldx     #$00
	lda     _level
	asl     a
	bcc     L44A6
	inx
	clc
L44A6:	adc     #<(_level_spr_enems)
	sta     ptr1
	txa
	adc     #>(_level_spr_enems)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	sta     _spr_enems+1
	dey
	lda     (ptr1),y
	sta     _spr_enems
;
; players_init ();
;
	jsr     _players_init
;
; enems_init ();
;
	jsr     _enems_init
;
; puas_init ();
;
	jsr     _puas_init
;
; points_init ();
;
	jsr     _points_init
;
; switch (level) {
;
	lda     _level
;
; }
;
	cmp     #$04
	beq     L44A7
	cmp     #$06
	beq     L44A8
	cmp     #$08
	bne     L44A9
;
; pal_cycle [0] = 0x17;
;
L44A7:	lda     #$17
	sta     _pal_cycle
;
; pal_cycle [1] = 0x18;
;
	lda     #$18
	sta     _pal_cycle+1
;
; pal_cycle [2] = 0x27;
;
	lda     #$27
;
; break;
;
	jmp     L4498
;
; pal_cycle [0] = 0x0f;
;
L44A8:	lda     #$0F
	sta     _pal_cycle
;
; pal_cycle [1] = 0x0f;
;
	sta     _pal_cycle+1
;
; pal_cycle [2] = 0x2c;
;
	lda     #$2C
L4498:	sta     _pal_cycle+2
;
; pal_cycle_do = (level == 4 || level == 6 || level == 8);
;
L44A9:	lda     _level
	cmp     #$04
	beq     L44AA
	cmp     #$06
	beq     L44AA
	cmp     #$08
	beq     L44AA
	lda     #$00
	jmp     L44AB
L44AA:	lda     #$01
L44AB:	sta     _pal_cycle_do
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ game_loop (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_game_loop: near

.segment	"CODE"

;
; nt = NAMETABLE_A;
;
	ldx     #$20
	lda     #$00
	sta     _nt
	stx     _nt+1
;
; cls ();
;
	jsr     _cls
;
; if (game_mode == GM_VS) {
;
	lda     _game_mode
	cmp     #$02
	bne     L44AF
;
; p_s (12, 14, "RONDA: ");
;
	jsr     decsp2
	lda     #$0C
	ldy     #$01
	sta     (sp),y
	lda     #$0E
	dey
	sta     (sp),y
	lda     #<(L40A0)
	ldx     #>(L40A0)
	jsr     _p_s
;
; vram_put (17 + round);
;
	lda     _round
	clc
	adc     #$11
	jsr     _vram_put
;
; } else {
;
	jmp     L40B0
;
; if (level < 9) {
;
L44AF:	lda     _level
	cmp     #$09
	bcs     L40A6
;
; p_s (13, 14, "FASE ");
;
	jsr     decsp2
	lda     #$0D
	ldy     #$01
	sta     (sp),y
	lda     #$0E
	dey
	sta     (sp),y
	lda     #<(L40AB)
	ldx     #>(L40AB)
	jsr     _p_s
;
; vram_put (17 + level);
;
	lda     _level
	clc
	adc     #$11
	jsr     _vram_put
;
; } else {
;
	jmp     L40B0
;
; p_s (11, 14, "FASE FINAL");
;
L40A6:	jsr     decsp2
	lda     #$0B
	ldy     #$01
	sta     (sp),y
	lda     #$0E
	dey
	sta     (sp),y
	lda     #<(L40B4)
	ldx     #>(L40B4)
	jsr     _p_s
;
; hud_paint ();
;
L40B0:	jsr     _hud_paint
;
; pal_bright (0);
;
	lda     #$00
	jsr     _pal_bright
;
; ppu_on_all ();
;
	jsr     _ppu_on_all
;
; set_vram_update (update_list);
;
	lda     #<(_update_list)
	ldx     #>(_update_list)
	jsr     _set_vram_update
;
; autoscroll = ntsc ? 112 : 120;
;
	lda     _ntsc
	beq     L40BE
	lda     #$70
	jmp     L44B0
L40BE:	lda     #$78
L44B0:	sta     _autoscroll
;
; goal_time = 120;
;
	lda     #$78
	sta     _goal_time
;
; scroll (256, 0);
;
	ldx     #$01
	lda     #$00
	jsr     pushax
	dex
	jsr     _scroll
;
; ul = update_list;
;
	lda     #>(_update_list)
	sta     _ul+1
	lda     #<(_update_list)
	sta     _ul
;
; if (apon [0]) { pindex = 0; hud_update_score (); }
;
	lda     _apon
	beq     L40C9
	lda     #$00
	sta     _pindex
	jsr     _hud_update_score
;
; if (apon [1]) { pindex = 1; hud_update_score (); }
;
L40C9:	lda     _apon+1
	beq     L40CF
	lda     #$01
	sta     _pindex
	jsr     _hud_update_score
;
; hud_paint_lives ();
;
L40CF:	jsr     _hud_paint_lives
;
; *ul = NT_UPD_EOF;
;
	lda     _ul+1
	sta     ptr1+1
	lda     _ul
	sta     ptr1
	lda     #$FF
	ldy     #$00
	sta     (ptr1),y
;
; ppu_wait_nmi ();
;
	jsr     _ppu_wait_nmi
;
; do_split = 1;
;
	lda     #$01
	sta     _do_split
;
; fade_in ();
;
	jsr     _fade_in
;
; fskipct = is_scrolling = 0;
;
	lda     #$00
	sta     _is_scrolling
	sta     _fskipct
;
; signal10000 = 0;
;
	sta     _signal10000
;
; music_play (MUSIC_INGAME + (level & 3));
;
	lda     _level
	and     #$03
	jsr     _music_play
;
; gpit = ticks; while (gpit) { --gpit; 
;
	lda     _ticks
	sta     _gpit
	jmp     L40E8
L40E6:	dec     _gpit
;
; ppu_wait_nmi (); scroll (256, 0); custom_split ();
;
	jsr     _ppu_wait_nmi
	ldx     #$01
	lda     #$00
	jsr     pushax
	dex
	jsr     _scroll
	jsr     _custom_split
;
; gpit = ticks; while (gpit) { --gpit; 
;
L40E8:	lda     _gpit
	bne     L40E6
;
; ul = update_list;
;
L40F0:	lda     #>(_update_list)
	sta     _ul+1
	lda     #<(_update_list)
	sta     _ul
;
; sadv = 0;
;
	lda     #$00
	sta     _sadv
;
; if (ntsc && fskipct ++ == 6) {
;
	lda     _ntsc
	beq     L44B4
	lda     _fskipct
	inc     _fskipct
	cmp     #$06
	bne     L44B4
;
; fskipct = 0;
;
	lda     #$00
	sta     _fskipct
;
; } else {
;
	jmp     L40FE
;
; half_life = 1 - half_life;
;
L44B4:	lda     #$01
	sec
	sbc     _half_life
	sta     _half_life
;
; hl_proc = half_life;
;
	sta     _hl_proc
;
; frame_counter ++;
;
	inc     _frame_counter
;
; ticker ++; if (ticker == 50) ticker = 0;
;
	inc     _ticker
	lda     _ticker
	cmp     #$32
	bne     L44B5
	lda     #$00
	sta     _ticker
;
; tick = (ticker == 0);
;
L44B5:	lda     _ticker
	jsr     booleq
	sta     _tick
;
; get_pad_once ();
;
	jsr     _get_pad_once
;
; free_frame = 0;
;
	lda     #$00
	sta     _free_frame
;
; if (autoscroll) {
;
	lda     _autoscroll
	beq     L44B6
;
; autoscroll --; sadv = 2;
;
	dec     _autoscroll
	lda     #$02
	sta     _sadv
;
; } else if ((apkill [0] == 0 || apon [0] == 0) && (apkill [1] == 0 || apon [1] == 0)) {
;
	jmp     L4130
L44B6:	lda     _apkill
	beq     L44B7
	lda     _apon
	jne     L4130
L44B7:	lda     _apkill+1
	beq     L44BC
	lda     _apon+1
	jne     L4130
;
; if (is_scrolling) {
;
L44BC:	lda     _is_scrolling
	beq     L4121
;
; sadv = half_life;
;
	lda     _half_life
	sta     _sadv
;
; if (cam_pos <= scroll_to) is_scrolling = 0;
;
	lda     _cam_pos
	ldx     _cam_pos+1
	jsr     pushax
	lda     _scroll_to
	ldx     _scroll_to+1
	jsr     tosicmp
	beq     L44AE
	bpl     L4130
L44AE:	lda     #$00
	sta     _is_scrolling
;
; } else {
;
	jmp     L4130
;
; if (ppossee || pgotten || psinking) {
;
L4121:	lda     _ppossee
	bne     L44BD
	lda     _pgotten
	bne     L44BD
	lda     _psinking
	beq     L4130
;
; if (cam_pos > 0) {
;
L44BD:	lda     _cam_pos
	cmp     #$01
	lda     _cam_pos+1
	sbc     #$00
	bvs     L412F
	eor     #$80
L412F:	bpl     L4130
;
; (apon [0] && apry [0] < cam_pos + 104)
;
	lda     _apon
	beq     L44AC
	lda     _apry
	ldx     _apry+1
	jsr     pushax
	lda     _cam_pos
	ldx     _cam_pos+1
	clc
	adc     #$68
	bcc     L4136
	inx
L4136:	jsr     tosicmp
;
; ||
;
	bmi     L44DF
;
; (apon [1] && apry [1] < cam_pos + 104)
;
L44AC:	lda     _apon+1
	beq     L4130
	lda     _apry+2
	ldx     _apry+2+1
	jsr     pushax
	lda     _cam_pos
	ldx     _cam_pos+1
	clc
	adc     #$68
	bcc     L413C
	inx
L413C:	jsr     tosicmp
	bpl     L4130
L44DF:	lda     #$01
;
; is_scrolling = 1;
;
	sta     _is_scrolling
;
; scroll_to = 0; // Once you pop, never stop!              
;
	lda     #$00
	sta     _scroll_to
	sta     _scroll_to+1
;
; scroll_advance (sadv);
;
L4130:	lda     _sadv
	jsr     _scroll_advance
;
; oam_index = 4;
;
	lda     #$04
	sta     _oam_index
;
; enems_spawn ();
;
	jsr     _enems_spawn
;
; points_do ();
;
	jsr     _points_do
;
; players_move ();
;
	jsr     _players_move
;
; enems_do ();
;
	jsr     _enems_do
;
; puas_do ();
;
	jsr     _puas_do
;
; if (signal10000) {
;
	lda     _signal10000
	beq     L414C
;
; if (aplives [0] < 9) aplives [0] ++;
;
	lda     _aplives
	cmp     #$09
	bcs     L414E
	inc     _aplives
;
; hud_paint_lives ();
;
L414E:	jsr     _hud_paint_lives
;
; sfx_play (SFX_FANFARE, SC_MAIN);
;
	lda     #$15
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; signal10000 = 0;
;
	lda     #$00
	sta     _signal10000
;
; oam_hide_rest (oam_index);
;
L414C:	lda     _oam_index
	jsr     _oam_hide_rest
;
; if (pal_cycle_do && (frame_counter & 7) == 0) {
;
L40FE:	lda     _pal_cycle_do
	beq     L44C9
	lda     _frame_counter
	and     #$07
	bne     L44C9
;
; rda = pal_cycle [2];
;
	lda     _pal_cycle+2
	sta     _rda
;
; pal_cycle [2] = pal_cycle [1]; pal_col (7, pal_cycle [1]);
;
	lda     _pal_cycle+1
	sta     _pal_cycle+2
	lda     #$07
	jsr     pusha
	lda     _pal_cycle+1
	jsr     _pal_col
;
; pal_cycle [1] = pal_cycle [0]; pal_col (6, pal_cycle [0]);
;
	lda     _pal_cycle
	sta     _pal_cycle+1
	lda     #$06
	jsr     pusha
	lda     _pal_cycle
	jsr     _pal_col
;
; pal_cycle [0] = rda;           pal_col (5, rda);
;
	lda     _rda
	sta     _pal_cycle
	lda     #$05
	jsr     pusha
	lda     _rda
	jsr     _pal_col
;
; if (game_mode == GM_SINGLE) {
;
L44C9:	lda     _game_mode
	bne     L44CA
;
; if (pad1 & PAD_START) {
;
	lda     _pad1
	and     #$08
	beq     L44CA
;
; game_mode = GM_COOP;
;
	lda     #$01
	sta     _game_mode
;
; pindex = 1; player_init ();
;
	sta     _pindex
	jsr     _player_init
;
; player_find_safe_spot ();
;
	jsr     _player_find_safe_spot
;
; ul [0] = 0x24 | NT_UPD_HORZ;
;
	lda     _ul+1
	sta     ptr1+1
	lda     _ul
	sta     ptr1
	lda     #$64
	ldy     #$00
	sta     (ptr1),y
;
; ul [1] = 0x52;
;
	lda     _ul+1
	sta     ptr1+1
	lda     _ul
	sta     ptr1
	lda     #$52
	iny
	sta     (ptr1),y
;
; ul [2] = 13;
;
	lda     _ul+1
	sta     ptr1+1
	lda     _ul
	sta     ptr1
	lda     #$0D
	iny
	sta     (ptr1),y
;
; ul += 3;
;
	lda     #$03
	clc
	adc     _ul
	sta     _ul
	bcc     L418F
	inc     _ul+1
;
; ascii_to_ul ("  %%% 000000#");
;
L418F:	lda     #<(L4191)
	ldx     #>(L4191)
	jsr     _ascii_to_ul
;
; if (game_mode == GM_VS) {
;
L44CA:	lda     _game_mode
	cmp     #$02
	bne     L419E
;
; if (apon [0] == 0 && aplife [0]) {
;
	lda     _apon
	bne     L44CD
	lda     _aplife
	beq     L44CD
;
; pindex = 0; player_respawn ();
;
	lda     #$00
	sta     _pindex
	jsr     _player_respawn
;
; if (apon [1] == 0 && aplife [1]) {
;
L44CD:	lda     _apon+1
	bne     L419E
	lda     _aplife+1
	beq     L419E
;
; pindex = 1; player_respawn ();
;
	lda     #$01
	sta     _pindex
	jsr     _player_respawn
;
; *ul = NT_UPD_EOF;
;
L419E:	lda     _ul+1
	sta     ptr1+1
	lda     _ul
	sta     ptr1
	lda     #$FF
	ldy     #$00
	sta     (ptr1),y
;
; ppu_wait_nmi ();
;
	jsr     _ppu_wait_nmi
;
; scroll (256, 0);
;
	ldx     #$01
	lda     #$00
	jsr     pushax
	dex
	jsr     _scroll
;
; scroll_paint ();
;
	jsr     _scroll_paint
;
; custom_split ();  
;
	jsr     _custom_split
;
; bankswitch (bg_anim [(frame_counter >> 3) & 3]);
;
	lda     _frame_counter
	lsr     a
	lsr     a
	lsr     a
	and     #$03
	sta     ptr1
	lda     #$00
	clc
	adc     #>(_bg_anim)
	sta     ptr1+1
	ldy     #<(_bg_anim)
	lda     (ptr1),y
	jsr     _bankswitch
;
; rdu16 = 224 + cam_pos;
;
	lda     _cam_pos
	ldx     _cam_pos+1
	clc
	adc     #$E0
	bcc     L41B5
	inx
L41B5:	sta     _rdu16
	stx     _rdu16+1
;
; if (game_mode == GM_SINGLE) {
;
	lda     _game_mode
	bne     L41B6
;
; if (apkill [0] && apry [0] > rdu16) break;
;
	lda     _apkill
	beq     L41DA
	lda     _apry
	sec
	sbc     _rdu16
	sta     tmp1
	lda     _apry+1
	sbc     _rdu16+1
	ora     tmp1
	beq     L41DA
	jcs     L40F1
	jmp     L41DA
;
; if (apkill [0] && apry [0] > rdu16) apon [0] = 0;
;
L41B6:	lda     _apkill
	beq     L41BF
	lda     _apry
	sec
	sbc     _rdu16
	sta     tmp1
	lda     _apry+1
	sbc     _rdu16+1
	ora     tmp1
	beq     L41BF
	bcc     L41BF
	lda     #$00
	sta     _apon
;
; if (apkill [1] && apry [1] > rdu16) apon [1] = 0;
;
L41BF:	lda     _apkill+1
	beq     L44D6
	lda     _apry+2
	sec
	sbc     _rdu16
	sta     tmp1
	lda     _apry+2+1
	sbc     _rdu16+1
	ora     tmp1
	beq     L44D6
	bcc     L44D6
	lda     #$00
	sta     _apon+1
;
; if (apon [0] == 0 && apon [1] == 0) {
;
L44D6:	lda     _apon
	bne     L41DA
	lda     _apon+1
	bne     L41DA
;
; if (game_mode != GM_VS) break; else {
;
	lda     _game_mode
	cmp     #$02
	bne     L40F1
;
; if (aplife [0] == 0 && aplife [1] == 0) {
;
	lda     _aplife
	bne     L41DA
	lda     _aplife+1
	beq     L40F1
;
; if (cam_pos == 0 && level < 9) goal_time --;
;
L41DA:	lda     _cam_pos
	ora     _cam_pos+1
	bne     L44DD
	lda     _level
	cmp     #$09
	bcs     L44DD
	dec     _goal_time
;
; if (goal_time == 0 || (pad0 & (PAD_UP|PAD_SELECT|PAD_B)) == (PAD_UP|PAD_SELECT|PAD_B)) break;  
;
L44DD:	lda     _goal_time
	beq     L40F1
	lda     _pad0
	and     #$16
	cmp     #$16
	jne     L40F0
;
; music_stop ();
;
L40F1:	jsr     _music_stop
;
; fade_out (); 
;
	jsr     _fade_out
;
; oam_hide_rest (0);
;
	lda     #$00
	jsr     _oam_hide_rest
;
; set_vram_update (0);
;
	ldx     #$00
	txa
	jsr     _set_vram_update
;
; ppu_off ();
;
	jsr     _ppu_off
;
; set_scroll_write (0);
;
	ldx     #$00
	txa
	jsr     _set_scroll_write
;
; do_split = 0;
;
	lda     #$00
	sta     _do_split
;
; bankswitch (3);
;
	lda     #$03
	jmp     _bankswitch

.endproc

; ---------------------------------------------------------------
; void __near__ game_select_option (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_game_select_option: near

.segment	"CODE"

;
; get_pad_once ();
;
L41FB:	jsr     _get_pad_once
;
; if (pad_once & (PAD_SELECT|PAD_DOWN)) { ++ rdb; if (rdb == rda) rdb = 0; }
;
	lda     _pad_once
	and     #$24
	beq     L44E4
	inc     _rdb
	lda     _rda
	cmp     _rdb
	bne     L44E4
	lda     #$00
	sta     _rdb
;
; if (pad_once & PAD_UP) { if (rdb) -- rdb; else rdb = rda - 1;}
;
L44E4:	lda     _pad_once
	and     #$10
	beq     L44E6
	lda     _rdb
	beq     L44E5
	dec     _rdb
	jmp     L44E6
L44E5:	lda     _rda
	sec
	sbc     #$01
	sta     _rdb
;
; if (pad_once & PAD_START) break;
;
L44E6:	lda     _pad_once
	and     #$08
	beq     L44EA
;
; }
;
	rts
;
; if (rdt) {
;
L44EA:	lda     _rdt
	beq     L4213
;
; if (rdb == 0) {
;
	lda     _rdb
	bne     L44E9
;
; if (pad_once & PAD_LEFT) { if (level_selected) -- level_selected; else level_selected = 9; }
;
	lda     _pad_once
	and     #$40
	beq     L44E8
	lda     _level_selected
	beq     L44E7
	dec     _level_selected
	jmp     L44E8
L44E7:	lda     #$09
	sta     _level_selected
;
; if (pad_once & PAD_RIGHT) { ++ level_selected; if (level_selected == 10) level_selected = 0; }
;
L44E8:	lda     _pad_once
	and     #$80
	beq     L44E9
	inc     _level_selected
	lda     _level_selected
	cmp     #$0A
	bne     L44E9
	lda     #$00
	sta     _level_selected
;
; update_list [0] = 0x22 | NT_UPD_HORZ;
;
L44E9:	lda     #$62
	sta     _update_list
;
; update_list [1] = 0x6c; 
;
	lda     #$6C
	sta     _update_list+1
;
; update_list [2] = 10;
;
	lda     #$0A
	sta     _update_list+2
;
; memcpy (update_list + 3, level_names + (level_selected << 3) + (level_selected << 1), 10);
;
	lda     #<(_update_list+3)
	ldx     #>(_update_list+3)
	jsr     pushax
	ldx     #$00
	lda     _level_selected
	jsr     aslax3
	clc
	adc     #<(_level_names)
	sta     ptr1
	txa
	adc     #>(_level_names)
	sta     ptr1+1
	ldx     #$00
	lda     _level_selected
	asl     a
	bcc     L44E3
	inx
	clc
L44E3:	adc     ptr1
	pha
	txa
	adc     ptr1+1
	tax
	pla
	jsr     pushax
	ldx     #$00
	lda     #$0A
	jsr     _memcpy
;
; update_list [13] = NT_UPD_EOF;
;
	lda     #$FF
	sta     _update_list+13
;
; oam_hide_rest (oam_spr (64, rdc + (rdb << 3), 0xf, 0, 0));
;
L4213:	jsr     decsp4
	lda     #$40
	ldy     #$03
	sta     (sp),y
	lda     _rdb
	asl     a
	asl     a
	asl     a
	clc
	adc     _rdc
	dey
	sta     (sp),y
	lda     #$0F
	dey
	sta     (sp),y
	lda     #$00
	dey
	sta     (sp),y
	jsr     _oam_spr
	jsr     _oam_hide_rest
;
; ppu_wait_nmi ();
;
	jsr     _ppu_wait_nmi
;
; while (1) {
;
	jmp     L41FB

.endproc

; ---------------------------------------------------------------
; void __near__ game_title (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_game_title: near

.segment	"CODE"

;
; enter_screen (paltitle, screen_title);
;
	lda     #<(_paltitle)
	ldx     #>(_paltitle)
	jsr     pushax
	lda     #<(_screen_title)
	ldx     #>(_screen_title)
	jsr     _enter_screen
;
; rdb = game_mode; rda = 3; rdc = 143; rdt = 0;
;
	lda     _game_mode
	sta     _rdb
	lda     #$03
	sta     _rda
	lda     #$8F
	sta     _rdc
	lda     #$00
	sta     _rdt
;
; game_select_option ();
;
	jsr     _game_select_option
;
; game_mode = rdb;
;
	lda     _rdb
	sta     _game_mode
;
; exit_cleanly ();
;
	jmp     _exit_cleanly

.endproc

; ---------------------------------------------------------------
; void __near__ game_select (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_game_select: near

.segment	"CODE"

;
; enter_screen (paltitle, screen_select);
;
	lda     #<(_paltitle)
	ldx     #>(_paltitle)
	jsr     pushax
	lda     #<(_screen_select)
	ldx     #>(_screen_select)
	jsr     _enter_screen
;
; rdb = 0; rda = 2; rdc = 151; rdt = 0;
;
	lda     #$00
	sta     _rdb
	lda     #$02
	sta     _rda
	lda     #$97
	sta     _rdc
	lda     #$00
	sta     _rdt
;
; game_select_option ();
;
	jsr     _game_select_option
;
; pselected = rdb;
;
	lda     _rdb
	sta     _pselected
;
; exit_cleanly ();
;
	jmp     _exit_cleanly

.endproc

; ---------------------------------------------------------------
; void __near__ game_over (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_game_over: near

.segment	"CODE"

;
; enter_screen (palts0, screen_game_over);
;
	lda     #<(_palts0)
	ldx     #>(_palts0)
	jsr     pushax
	lda     #<(_screen_game_over)
	ldx     #>(_screen_game_over)
	jsr     _enter_screen
;
; signal_continue = 0;
;
	lda     #$00
	sta     _signal_continue
;
; if (level && pcontinues) {
;
	lda     _level
	jeq     L4267
	lda     _pcontinues
	beq     L4267
;
; get_pad_once ();
;
L426B:	jsr     _get_pad_once
;
; if (pad_once & PAD_RIGHT) {
;
	lda     _pad_once
	and     #$80
	beq     L44F0
;
; if (signal_continue) sfx_play (6, 0); signal_continue = 0;
;
	lda     _signal_continue
	beq     L44EF
	lda     #$06
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
	lda     #$00
L44EF:	sta     _signal_continue
;
; if (pad_once & PAD_LEFT) {
;
L44F0:	lda     _pad_once
	and     #$40
	beq     L44F2
;
; if (!signal_continue) sfx_play (6, 0); signal_continue = 1;
;
	lda     _signal_continue
	bne     L44F1
	lda     #$06
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
L44F1:	lda     #$01
	sta     _signal_continue
;
; if (pad_once & (PAD_A|PAD_B|PAD_START)) { sfx_play (0, 0); break; }
;
L44F2:	lda     _pad_once
	and     #$0B
	beq     L4282
	lda     #$00
	jsr     pusha
	jsr     _sfx_play
	jmp     _exit_cleanly
;
; oam_hide_rest (oam_spr (signal_continue ? 88 : 160, 127, 0xf, 0, 0));
;
L4282:	jsr     decsp4
	lda     _signal_continue
	beq     L44F3
	lda     #$58
	jmp     L44F4
L44F3:	lda     #$A0
L44F4:	ldy     #$03
	sta     (sp),y
	lda     #$7F
	dey
	sta     (sp),y
	lda     #$0F
	dey
	sta     (sp),y
	lda     #$00
	dey
	sta     (sp),y
	jsr     _oam_spr
	jsr     _oam_hide_rest
;
; ppu_wait_nmi ();
;
	jsr     _ppu_wait_nmi
;
; while (1) {
;
	jmp     L426B
;
; } else do_screen (10);
;
L4267:	lda     #$0A
	jmp     _do_screen

.endproc

; ---------------------------------------------------------------
; void __near__ game_ending (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_game_ending: near

.segment	"CODE"

;
; enter_screen (pselected ? palcuts1 : palcuts0, screen_ending);
;
	lda     _pselected
	beq     L429B
	lda     #<(_palcuts1)
	ldx     #>(_palcuts1)
	jmp     L429D
L429B:	lda     #<(_palcuts0)
	ldx     #>(_palcuts0)
L429D:	jsr     pushax
	lda     #<(_screen_ending)
	ldx     #>(_screen_ending)
	jsr     _enter_screen
;
; do_screen (240);
;
	lda     #$F0
	jmp     _do_screen

.endproc

; ---------------------------------------------------------------
; void __near__ game_round_results (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_game_round_results: near

.segment	"CODE"

;
; enter_screen (paltitle, screen_round_results);
;
	lda     #<(_paltitle)
	ldx     #>(_paltitle)
	jsr     pushax
	lda     #<(_screen_round_results)
	ldx     #>(_screen_round_results)
	jsr     _enter_screen
;
; do_screen (255);
;
	lda     #$FF
	jmp     _do_screen

.endproc

; ---------------------------------------------------------------
; void __near__ game_game_result (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_game_game_result: near

.segment	"CODE"

;
; enter_screen (paltitle, screen_game_result);
;
	lda     #<(_paltitle)
	ldx     #>(_paltitle)
	jsr     pushax
	lda     #<(_screen_game_result)
	ldx     #>(_screen_game_result)
	jsr     _enter_screen
;
; do_screen (255);
;
	lda     #$FF
	jmp     _do_screen

.endproc

; ---------------------------------------------------------------
; void __near__ game_select_level (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_game_select_level: near

.segment	"CODE"

;
; enter_screen (paltitle, screen_select_level);
;
	lda     #<(_paltitle)
	ldx     #>(_paltitle)
	jsr     pushax
	lda     #<(_screen_select_level)
	ldx     #>(_screen_select_level)
	jsr     _enter_screen
;
; rdb = 0; rda = 2; rdc = 151; rdt = 1; rdd = level_selected;
;
	lda     #$00
	sta     _rdb
	lda     #$02
	sta     _rda
	lda     #$97
	sta     _rdc
	lda     #$01
	sta     _rdt
	lda     _level_selected
	sta     _rdd
;
; set_vram_update (update_list); 
;
	lda     #<(_update_list)
	ldx     #>(_update_list)
	jsr     _set_vram_update
;
; game_select_option ();
;
	jsr     _game_select_option
;
; set_vram_update (0);
;
	ldx     #$00
	txa
	jsr     _set_vram_update
;
; if (rdb == 0) level = level_selected; else level = rand8 () % 10;
;
	lda     _rdb
	bne     L42C1
	lda     _level_selected
	jmp     L44F5
L42C1:	jsr     _rand8
	jsr     pushax
	lda     #$0A
	jsr     tosumoda0
L44F5:	sta     _level
;
; level_selected = rdd;
;
	lda     _rdd
	sta     _level_selected
;
; exit_cleanly (); 
;
	jmp     _exit_cleanly

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; ntsc = ppu_system ();
;
	jsr     _ppu_system
	sta     _ntsc
;
; ticks = ntsc ? 60 : 50;
;
	lda     _ntsc
	beq     L42D0
	lda     #$3C
	jmp     L44F8
L42D0:	lda     #$32
L44F8:	sta     _ticks
;
; halfticks = ticks >> 1;
;
	lsr     a
	sta     _halfticks
;
; do_split = level_selected = pselected = 0;
;
	lda     #$00
	sta     _pselected
	sta     _level_selected
	sta     _do_split
;
; bank_bg (0);
;
	jsr     _bank_bg
;
; bank_spr (1);
;
	lda     #$01
	jsr     _bank_spr
;
; pal_spr (palss0);
;
	lda     #<(_palss0)
	ldx     #>(_palss0)
	jsr     _pal_spr
;
; bcd_score_init ();
;
	jsr     _bcd_score_init
;
; bcd_high_score_init ();
;
	jsr     _bcd_high_score_init
;
; pal_bright (0);
;
	lda     #$00
	jsr     _pal_bright
;
; bankswitch (3);
;
L42E4:	lda     #$03
	jsr     _bankswitch
;
; if (signal_continue == 0) {
;
	lda     _signal_continue
	bne     L44FA
;
; game_title ();
;
	jsr     _game_title
;
; if (game_mode == GM_SINGLE) {
;
	lda     _game_mode
	bne     L44F9
;
; game_select ();
;
	jsr     _game_select
;
; apcharacter [0] = pselected;
;
	lda     _pselected
	sta     _apcharacter
;
; apcharacter [1] = 1 - pselected;    
;
	lda     #$01
	sec
	sbc     _pselected
;
; } else {
;
	jmp     L44F6
;
; apcharacter [0] = 0;
;
L44F9:	lda     #$00
	sta     _apcharacter
;
; apcharacter [1] = 1;
;
	lda     #$01
L44F6:	sta     _apcharacter+1
;
; level = 0;
;
	lda     #$00
	sta     _level
;
; pcontinues = 3;
;
	lda     #$03
	sta     _pcontinues
;
; } else pcontinues --;
;
	jmp     L4301
L44FA:	dec     _pcontinues
;
; bcd_score_init ();
;
L4301:	jsr     _bcd_score_init
;
; if (game_mode == GM_VS) {
;
	lda     _game_mode
	cmp     #$02
	bne     L44FB
;
; aplives [0] = aplives [1] = round = 0;
;
	lda     #$00
	sta     _round
	sta     _aplives+1
	sta     _aplives
;
; game_select_level ();
;
	jsr     _game_select_level
;
; } else {
;
	jmp     L430D
;
; aplives [0] = aplives [1] = PLAYER_LIVES_INI;
;
L44FB:	lda     #$05
	sta     _aplives+1
	sta     _aplives
;
; collide_players = (game_mode == GM_VS);
;
L430D:	lda     _game_mode
	cmp     #$02
	jsr     booleq
	sta     _collide_players
;
; apon [0] = 1;   
;
L44FC:	lda     #$01
	sta     _apon
;
; if (game_mode != GM_SINGLE) {
;
	lda     _game_mode
	beq     L44FD
;
; apon [1] = 1;
;
	lda     #$01
	sta     _apon+1
;
; if (game_mode == GM_VS) {
;
L44FD:	lda     _game_mode
	cmp     #$02
	bne     L4322
;
; bcd_score_init ();
;
	jsr     _bcd_score_init
;
; game_init ();
;
L4322:	jsr     _game_init
;
; game_loop ();
;
	jsr     _game_loop
;
; if (game_mode == GM_VS) {
;
	lda     _game_mode
	cmp     #$02
	bne     L4327
;
; winner = bcd_compare_scores ();
;
	jsr     _bcd_compare_scores
	sta     _winner
;
; if (winner < 2) ++ pscore [winner];
;
	cmp     #$02
	bcs     L432B
	lda     #<(_pscore)
	ldx     #>(_pscore)
	clc
	adc     _winner
	bcc     L432F
	inx
L432F:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     #$01
	clc
	adc     (ptr1),y
	sta     (ptr1),y
;
; game_round_results ();
;
L432B:	jsr     _game_round_results
;
; if (pscore [0] > pscore [1] + 1) {
;
	lda     _pscore
	jsr     pusha0
	lda     _pscore+1
	clc
	adc     #$01
	bcc     L4335
	ldx     #$01
L4335:	jsr     tosicmp
	bcc     L4331
	beq     L4331
;
; winner = 0;
;
	lda     #$00
;
; } else if (pscore [1] > pscore [0] + 1) {
;
	jmp     L44F7
L4331:	lda     _pscore+1
	jsr     pusha0
	lda     _pscore
	clc
	adc     #$01
	bcc     L433D
	ldx     #$01
L433D:	jsr     tosicmp
	bcc     L4339
	beq     L4339
;
; winner = 1;
;
	lda     #$01
;
; } else winner = 2;
;
	jmp     L44F7
L4339:	lda     #$02
L44F7:	sta     _winner
;
; if (winner < 2) {
;
	cmp     #$02
	bcs     L44FE
;
; game_game_result ();
;
	jsr     _game_game_result
;
; signal_continue = 0;
;
	lda     #$00
	sta     _signal_continue
;
; break;
;
	jmp     L4500
;
; } else round ++;
;
L44FE:	inc     _round
;
; } else {
;
	jmp     L44FC
;
; if (pkill) {
;
L4327:	lda     _pkill
	beq     L44FF
;
; if (aplives [0]) {
;
	lda     _aplives
	beq     L434D
;
; aplives [0] --;
;
	dec     _aplives
;
; } else {
;
	jmp     L44FC
;
; bcd_high_score_update ();
;
L434D:	jsr     _bcd_high_score_update
;
; game_over ();
;
	jsr     _game_over
;
; break;
;
	jmp     L4500
;
; level ++;
;
L44FF:	inc     _level
;
; if (level == 10) {
;
	lda     _level
	cmp     #$0A
	jne     L44FC
;
; game_ending ();
;
	jsr     _game_ending
;
; level = 0;
;
	lda     #$00
	sta     _level
;
; while (1) {
;
	jmp     L44FC
;
; if (game_mode != GM_SINGLE) bcd_score_init ();
;
L4500:	lda     _game_mode
	jeq     L42E4
	jsr     _bcd_score_init
;
; while (1) {
;
	jmp     L42E4

.endproc

